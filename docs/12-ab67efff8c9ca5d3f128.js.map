{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/core-js/modules/_wks-ext.js","webpack:///./node_modules/core-js/modules/_wks-define.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/node-libs-browser/node_modules/process/browser.js","webpack:///./node_modules/core-js/modules/_object-gopn.js","webpack:///./node_modules/@firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/util/dist/index.cjs.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/regenerator-runtime/runtime-module.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/polyfill/dist/index.esm.js","webpack:///./node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js","webpack:///./node_modules/promise-polyfill/lib/polyfill.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/core-js/fn/array/find.js","webpack:///./node_modules/core-js/fn/array/find-index.js","webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./node_modules/core-js/fn/object/assign.js","webpack:///./node_modules/core-js/fn/string/starts-with.js","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js","webpack:///./node_modules/core-js/fn/string/repeat.js","webpack:///./node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/core-js/modules/_string-repeat.js","webpack:///./node_modules/core-js/fn/symbol/index.js","webpack:///./node_modules/core-js/modules/es6.symbol.js","webpack:///./node_modules/core-js/modules/_meta.js","webpack:///./node_modules/core-js/modules/_enum-keys.js","webpack:///./node_modules/core-js/modules/_object-gopn-ext.js","webpack:///./node_modules/core-js/modules/_object-gopd.js","webpack:///./node_modules/core-js/modules/es6.object.to-string.js","webpack:///./node_modules/core-js/modules/es7.symbol.async-iterator.js","webpack:///./node_modules/core-js/modules/es7.symbol.observable.js","webpack:///./node_modules/core-js/fn/symbol/iterator.js","webpack:///./node_modules/@firebase/util/node_modules/tslib/tslib.es6.js","webpack:///./node_modules/firebase/database/dist/index.esm.js","webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/@firebase/logger/dist/index.esm.js","webpack:///./node_modules/@firebase/database/node_modules/tslib/tslib.es6.js"],"names":["dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e","exports","global","core","LIBRARY","wksExt","defineProperty","module","name","$Symbol","Symbol","charAt","value","undefined","Op","Object","hasOwn","hasOwnProperty","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","regeneratorRuntime","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","next","then","result","done","toString","keys","object","key","push","reverse","length","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","isNaN","slice","stop","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","state","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","$keys","hiddenKeys","getOwnPropertyNames","O","util","contains","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","options","config","firebase_","isDeleted_","services_","name_","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","options_","deepCopy","INTERNAL","getUid","getToken","addAuthTokenListener","callback","removeAuthTokenListener","filter","listener","checkDestroyed_","set","val","enumerable","delete","_this","removeApp","services","serviceKey","instanceKey","all","map","service","_getService","instanceIdentifier","instanceSpecifier","factories","extendApp","bind","props","deepExtend","code","appErrors","console","log","ErrorFactory","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","firebase","createFirebaseNamespace","apps_","appHooks","namespace","__esModule","initializeApp","rawConfig","name_1","app","callAppHooks","apps","SDK_VERSION","registerService","createService","serviceProperties","appHook","allowMultipleInstances","getApps","serviceNamespace","appArg","_i","extendNamespace","createSubscribe","useAsService","eventName","serviceName","factoryName","useService","patchProperty","default","tslib_1","CONSTANTS","NODE_CLIENT","NODE_ADMIN","assert","assertion","message","assertionError","stringToByteArray","str","out","p","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","opt_webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","byte4","base64Decode","target","source","Date","getTime","prop","Deferred","promise","wrapCallback","getUA","navigator","ERROR_NAME","captureStackTrace","FirebaseError","stack","errors","pattern","data","template","fullCode","replace","jsonEval","JSON","parse","decode","token","header","claims","signature","parts","split","extend","objTo","objFrom","findKey","opt_this","Sha1","_super","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","__extends","compress_","buf","opt_offset","W","t","k","a","b","d","update","opt_length","lengthMinusBlock","n","inbuf","digest","totalBits","j","ObserverProxy","executor","onNoObservers","observers","unsubscribes","observerCount","task","finalized","forEachObserver","observer","close","subscribe","nextOrObserver","methods","methods_1","implementsAnyMethods","unsub","unsubscribeOne","finalError","sendOne","errorPrefix","fnName","argumentNumber","optional","argName","base64Encode","utf8Bytes","isMobileCordova","window","test","isNodeSdk","isReactNative","patchCapture","captureFake","stringify","isAdmin","issuedAtTime","isValidFormat","isValidTimestamp","validSince","validUntil","now","Math","floor","clone","every","findValue","getAnyKey","getCount","rv","getValues","res","isEmpty","isNonNullObject","opt_obj","safeGet","querystring","querystringParams","params","arrayVal","encodeURIComponent","querystringDecode","onError","proxy","validateArgCount","minCount","maxCount","argCount","argError","validateCallback","validateContextObject","validateNamespace","stringLength","high","g","hadRuntime","indexOf","oldRuntime","asyncGeneratorStep","gen","_next","_throw","ex","r","__webpack_exports__","fetch","support","searchParams","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","Headers","append","normalizeName","normalizeValue","oldValue","has","thisArg","items","iteratorFor","entries","Request","body","_bodyInit","Body","Response","status","statusText","headers","url","response","redirectStatuses","redirect","RangeError","location","init","request","xhr","XMLHttpRequest","onload","rawHeaders","getAllResponseHeaders","line","shift","trim","responseURL","responseText","onerror","ontimeout","open","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","toLowerCase","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","text","readAsText","chars","readArrayBufferAsText","json","upcased","mode","toUpperCase","referrer","form","decodeURIComponent","bodyInit","ok","setImmediate","setTimeoutFunc","_state","_handled","_value","_deferreds","doResolve","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","newValue","finale","_unhandledRejectionFn","Handler","reason","prom","arr","remaining","race","warn","globalNS","scope","Timeout","id","clearFn","_id","_clearFn","setInterval","clearInterval","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","random","addEventListener","attachEvent","find","findIndex","$export","$find","KEY","forced","P","F","callbackfn","assign","startsWith","toLength","$startsWith","searchString","that","index","min","search","repeat","toInteger","defined","count","Infinity","DESCRIPTORS","redefine","META","$fails","shared","setToStringTag","uid","wks","wksDefine","enumKeys","anObject","isObject","toIObject","toPrimitive","createDesc","_create","gOPNExt","$GOPD","$DP","gOPD","gOPN","$JSON","_stringify","HIDDEN","TO_PRIMITIVE","isEnum","propertyIsEnumerable","SymbolRegistry","AllSymbols","OPSymbols","ObjectProto","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","it","D","protoDesc","tag","sym","_k","isSymbol","$defineProperty","$defineProperties","l","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","names","$getOwnPropertySymbols","IS_OP","$set","G","es6Symbols","wellKnownSymbols","store","S","for","keyFor","useSetter","useSimple","defineProperties","getOwnPropertyDescriptor","getOwnPropertySymbols","replacer","$replacer","valueOf","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","NEED","fastKey","getWeak","onFreeze","getKeys","gOPS","pIE","getSymbols","symbols","windowNames","getWindowNames","IE8_DOM_DEFINE","classof","__assign","__rest","__decorate","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","__","s","decorators","desc","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","_arguments","fulfilled","step","y","_","label","trys","ops","verb","throw","v","op","m","o","ar","q","resume","fulfill","settle","cooked","raw","mod","logger","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","var_args","logger$1","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","VERBOSE","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","dataSegs","substring","each","doubleToIEEE754String","ln","bits","abs","pow","LN2","round","hexByteString","hexByte","parseInt","substr","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","beingCrawled","setTimeoutNonBlocking","time","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","begin","parent","pieces","child","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","ValidationPath","path","errorPrefix_","parts_","byteLength_","max","checkValid_","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","connURL","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodePath","queryParams","queryString","results","_a","segment","kv","decodeQuery","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","onDisconnectCancel","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","duplicateTime","timeStampChars","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newPriority","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","cancelCallbackOrContext","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","cancelOrContext","firstCall","onceCallback","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","clear","SparseSnapshotTree","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","children","subtree","Empty","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views_","optCompleteServerCache","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","error$$1","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","forceRefresh","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","StatsCollection","counters_","incrementCounter","amount","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called_1","wrappedFn_1","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","iframeContents","iframe","contentWindow","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","User-Agent","platform","origin","mySock","onopen","onclose","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","mess","resetKeepAlive","remainingData","sendString_","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","cred","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","serverTimeOffset","normalizedPathString","statusCode","explanation","clientName","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","Repo","forceRestClient","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","listens","firebaseRef","registerDatabase","instance","unused","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","WARN","ERROR","_logLevel","_logHandler","debug","level","inst"],"mappings":"8EAAA,IAAAA,EAASC,EAAQ,IAAcC,EAC/BC,EAAAC,SAAAC,UACAC,EAAA,wBACA,SAGAH,GAAkBF,EAAQ,KAAgBD,EAAAG,EAH1C,OAG0C,CAC1CI,cAAA,EACAC,IAAA,WACA,IACA,UAAAC,MAAAC,MAAAJ,GAAA,GACK,MAAAK,GACL,kCCZAC,EAAAV,EAAYD,EAAQ,wBCApB,IAAAY,EAAaZ,EAAQ,GACrBa,EAAWb,EAAQ,IACnBc,EAAcd,EAAQ,IACtBe,EAAaf,EAAQ,KACrBgB,EAAqBhB,EAAQ,IAAcC,EAC3CgB,EAAAN,QAAA,SAAAO,GACA,IAAAC,EAAAN,EAAAO,SAAAP,EAAAO,OAAAN,EAAA,GAA0DF,EAAAQ,QAAA,IAC1D,KAAAF,EAAAG,OAAA,IAAAH,KAAAC,GAAAH,EAAAG,EAAAD,EAAA,CAAkFI,MAAAP,EAAAd,EAAAiB,0BCAlF,SAAAN,GACA,aAEA,IAEAW,EAFAC,EAAAC,OAAArB,UACAsB,EAAAF,EAAAG,eAEAR,EAAA,mBAAAC,cAAA,GACAQ,EAAAT,EAAAU,UAAA,aACAC,EAAAX,EAAAY,eAAA,kBACAC,EAAAb,EAAAc,aAAA,gBAEAC,EAAA,iBAAAjB,EACAkB,EAAAvB,EAAAwB,mBACA,GAAAD,EACAD,IAGAjB,EAAAN,QAAAwB,OAJA,EAaAA,EAAAvB,EAAAwB,mBAAAF,EAAAjB,EAAAN,QAAA,IAcA0B,OAoBA,IAAAC,EAAA,iBACAC,EAAA,iBACAC,EAAA,YACAC,EAAA,YAIAC,EAAA,GAYAC,EAAA,GACAA,EAAAf,GAAA,WACA,OAAApB,MAGA,IAAAoC,EAAAnB,OAAAoB,eACAC,EAAAF,OAAAG,EAAA,MACAD,GACAA,IAAAtB,GACAE,EAAAsB,KAAAF,EAAAlB,KAGAe,EAAAG,GAGA,IAAAG,EAAAC,EAAA9C,UACA+C,EAAA/C,UAAAqB,OAAA2B,OAAAT,GACAU,EAAAjD,UAAA6C,EAAAK,YAAAJ,EACAA,EAAAI,YAAAD,EACAH,EAAAlB,GACAqB,EAAAE,YAAA,oBAYApB,EAAAqB,oBAAA,SAAAC,GACA,IAAAC,EAAA,mBAAAD,KAAAH,YACA,QAAAI,IACAA,IAAAL,GAGA,uBAAAK,EAAAH,aAAAG,EAAAxC,QAIAiB,EAAAwB,KAAA,SAAAF,GAUA,OATAhC,OAAAmC,eACAnC,OAAAmC,eAAAH,EAAAP,IAEAO,EAAAI,UAAAX,EACAlB,KAAAyB,IACAA,EAAAzB,GAAA,sBAGAyB,EAAArD,UAAAqB,OAAA2B,OAAAH,GACAQ,GAOAtB,EAAA2B,MAAA,SAAAC,GACA,OAAYC,QAAAD,IAsEZE,EAAAC,EAAA9D,WACA8D,EAAA9D,UAAA0B,GAAA,WACA,OAAAtB,MAEA2B,EAAA+B,gBAKA/B,EAAAgC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAN,EACA7B,EAAA+B,EAAAC,EAAAC,EAAAC,IAGA,OAAApC,EAAAqB,oBAAAa,GACAG,EACAA,EAAAC,OAAAC,KAAA,SAAAC,GACA,OAAAA,EAAAC,KAAAD,EAAArD,MAAAkD,EAAAC,UAsKAR,EAAAhB,GAEAA,EAAAjB,GAAA,YAOAiB,EAAArB,GAAA,WACA,OAAApB,MAGAyC,EAAA4B,SAAA,WACA,4BAkCA1C,EAAA2C,KAAA,SAAAC,GACA,IAAAD,EAAA,GACA,QAAAE,KAAAD,EACAD,EAAAG,KAAAD,GAMA,OAJAF,EAAAI,UAIA,SAAAT,IACA,KAAAK,EAAAK,QAAA,CACA,IAAAH,EAAAF,EAAAM,MACA,GAAAJ,KAAAD,EAGA,OAFAN,EAAAnD,MAAA0D,EACAP,EAAAG,MAAA,EACAH,EAQA,OADAA,EAAAG,MAAA,EACAH,IAsCAtC,EAAAY,SAMAsC,EAAAjF,UAAA,CACAkD,YAAA+B,EAEAC,MAAA,SAAAC,GAcA,GAbA/E,KAAAgF,KAAA,EACAhF,KAAAiE,KAAA,EAGAjE,KAAAiF,KAAAjF,KAAAkF,MAAAnE,EACAf,KAAAoE,MAAA,EACApE,KAAAmF,SAAA,KAEAnF,KAAAoF,OAAA,OACApF,KAAAuD,IAAAxC,EAEAf,KAAAqF,WAAAC,QAAAC,IAEAR,EACA,QAAArE,KAAAV,KAEA,MAAAU,EAAAG,OAAA,IACAK,EAAAsB,KAAAxC,KAAAU,KACA8E,OAAA9E,EAAA+E,MAAA,MACAzF,KAAAU,GAAAK,IAMA2E,KAAA,WACA1F,KAAAoE,MAAA,EAEA,IACAuB,EADA3F,KAAAqF,WAAA,GACAO,WACA,aAAAD,EAAAE,KACA,MAAAF,EAAApC,IAGA,OAAAvD,KAAA8F,MAGAC,kBAAA,SAAAC,GACA,GAAAhG,KAAAoE,KACA,MAAA4B,EAGA,IAAAC,EAAAjG,KACA,SAAAkG,EAAAC,EAAAC,GAYA,OAXAC,EAAAR,KAAA,QACAQ,EAAA9C,IAAAyC,EACAC,EAAAhC,KAAAkC,EAEAC,IAGAH,EAAAb,OAAA,OACAa,EAAA1C,IAAAxC,KAGAqF,EAGA,QAAAE,EAAAtG,KAAAqF,WAAAV,OAAA,EAA8C2B,GAAA,IAAQA,EAAA,CACtD,IAAAC,EAAAvG,KAAAqF,WAAAiB,GACAD,EAAAE,EAAAX,WAEA,YAAAW,EAAAC,OAIA,OAAAN,EAAA,OAGA,GAAAK,EAAAC,QAAAxG,KAAAgF,KAAA,CACA,IAAAyB,EAAAvF,EAAAsB,KAAA+D,EAAA,YACAG,EAAAxF,EAAAsB,KAAA+D,EAAA,cAEA,GAAAE,GAAAC,EAAA,CACA,GAAA1G,KAAAgF,KAAAuB,EAAAI,SACA,OAAAT,EAAAK,EAAAI,UAAA,GACa,GAAA3G,KAAAgF,KAAAuB,EAAAK,WACb,OAAAV,EAAAK,EAAAK,iBAGW,GAAAH,GACX,GAAAzG,KAAAgF,KAAAuB,EAAAI,SACA,OAAAT,EAAAK,EAAAI,UAAA,OAGW,KAAAD,EAMX,UAAAG,MAAA,0CALA,GAAA7G,KAAAgF,KAAAuB,EAAAK,WACA,OAAAV,EAAAK,EAAAK,gBAUAE,OAAA,SAAAjB,EAAAtC,GACA,QAAA+C,EAAAtG,KAAAqF,WAAAV,OAAA,EAA8C2B,GAAA,IAAQA,EAAA,CACtD,IAAAC,EAAAvG,KAAAqF,WAAAiB,GACA,GAAAC,EAAAC,QAAAxG,KAAAgF,MACA9D,EAAAsB,KAAA+D,EAAA,eACAvG,KAAAgF,KAAAuB,EAAAK,WAAA,CACA,IAAAG,EAAAR,EACA,OAIAQ,IACA,UAAAlB,GACA,aAAAA,IACAkB,EAAAP,QAAAjD,GACAA,GAAAwD,EAAAH,aAGAG,EAAA,MAGA,IAAAV,EAAAU,IAAAnB,WAAA,GAIA,OAHAS,EAAAR,OACAQ,EAAA9C,MAEAwD,GACA/G,KAAAoF,OAAA,OACApF,KAAAiE,KAAA8C,EAAAH,WACA1E,GAGAlC,KAAAgH,SAAAX,IAGAW,SAAA,SAAAX,EAAAY,GACA,aAAAZ,EAAAR,KACA,MAAAQ,EAAA9C,IAcA,MAXA,UAAA8C,EAAAR,MACA,aAAAQ,EAAAR,KACA7F,KAAAiE,KAAAoC,EAAA9C,IACO,WAAA8C,EAAAR,MACP7F,KAAA8F,KAAA9F,KAAAuD,IAAA8C,EAAA9C,IACAvD,KAAAoF,OAAA,SACApF,KAAAiE,KAAA,OACO,WAAAoC,EAAAR,MAAAoB,IACPjH,KAAAiE,KAAAgD,GAGA/E,GAGAgF,OAAA,SAAAN,GACA,QAAAN,EAAAtG,KAAAqF,WAAAV,OAAA,EAA8C2B,GAAA,IAAQA,EAAA,CACtD,IAAAC,EAAAvG,KAAAqF,WAAAiB,GACA,GAAAC,EAAAK,eAGA,OAFA5G,KAAAgH,SAAAT,EAAAX,WAAAW,EAAAU,UACA1B,EAAAgB,GACArE,IAKAiF,MAAA,SAAAX,GACA,QAAAF,EAAAtG,KAAAqF,WAAAV,OAAA,EAA8C2B,GAAA,IAAQA,EAAA,CACtD,IAAAC,EAAAvG,KAAAqF,WAAAiB,GACA,GAAAC,EAAAC,WAAA,CACA,IAAAH,EAAAE,EAAAX,WACA,aAAAS,EAAAR,KAAA,CACA,IAAAuB,EAAAf,EAAA9C,IACAgC,EAAAgB,GAEA,OAAAa,GAMA,UAAAP,MAAA,0BAGAQ,cAAA,SAAAC,EAAAC,EAAAC,GAaA,OAZAxH,KAAAmF,SAAA,CACA9D,SAAAkB,EAAA+E,GACAC,aACAC,WAGA,SAAAxH,KAAAoF,SAGApF,KAAAuD,IAAAxC,GAGAmB,IAnqBA,SAAAL,EAAA+B,EAAAC,EAAAC,EAAAC,GAEA,IAAA0D,EAAA5D,KAAAjE,qBAAA+C,EAAAkB,EAAAlB,EACA+E,EAAAzG,OAAA2B,OAAA6E,EAAA7H,WACAqG,EAAA,IAAApB,EAAAd,GAAA,IAMA,OAFA2D,EAAAC,QAkMA,SAAA/D,EAAAE,EAAAmC,GACA,IAAA2B,EAAA9F,EAEA,gBAAAsD,EAAA7B,GACA,GAAAqE,IAAA5F,EACA,UAAA6E,MAAA,gCAGA,GAAAe,IAAA3F,EAAA,CACA,aAAAmD,EACA,MAAA7B,EAKA,OAAAsE,IAMA,IAHA5B,EAAAb,SACAa,EAAA1C,QAEA,CACA,IAAA4B,EAAAc,EAAAd,SACA,GAAAA,EAAA,CACA,IAAA2C,EAAAC,EAAA5C,EAAAc,GACA,GAAA6B,EAAA,CACA,GAAAA,IAAA5F,EAAA,SACA,OAAA4F,GAIA,YAAA7B,EAAAb,OAGAa,EAAAhB,KAAAgB,EAAAf,MAAAe,EAAA1C,SAES,aAAA0C,EAAAb,OAAA,CACT,GAAAwC,IAAA9F,EAEA,MADA8F,EAAA3F,EACAgE,EAAA1C,IAGA0C,EAAAF,kBAAAE,EAAA1C,SAES,WAAA0C,EAAAb,QACTa,EAAAa,OAAA,SAAAb,EAAA1C,KAGAqE,EAAA5F,EAEA,IAAAqE,EAAA2B,EAAApE,EAAAE,EAAAmC,GACA,cAAAI,EAAAR,KAAA,CAOA,GAJA+B,EAAA3B,EAAA7B,KACAnC,EACAF,EAEAsE,EAAA9C,MAAArB,EACA,SAGA,OACApB,MAAAuF,EAAA9C,IACAa,KAAA6B,EAAA7B,MAGS,UAAAiC,EAAAR,OACT+B,EAAA3F,EAGAgE,EAAAb,OAAA,QACAa,EAAA1C,IAAA8C,EAAA9C,OA1QA0E,CAAArE,EAAAE,EAAAmC,GAEAyB,EAcA,SAAAM,EAAAE,EAAAC,EAAA5E,GACA,IACA,OAAcsC,KAAA,SAAAtC,IAAA2E,EAAA1F,KAAA2F,EAAA5E,IACT,MAAA6E,GACL,OAAcvC,KAAA,QAAAtC,IAAA6E,IAiBd,SAAAzF,KACA,SAAAE,KACA,SAAAH,KA4BA,SAAAe,EAAA7D,GACA,0BAAA0F,QAAA,SAAAF,GACAxF,EAAAwF,GAAA,SAAA7B,GACA,OAAAvD,KAAA2H,QAAAvC,EAAA7B,MAoCA,SAAAG,EAAAgE,GAgCA,IAAAW,EAgCArI,KAAA2H,QA9BA,SAAAvC,EAAA7B,GACA,SAAA+E,IACA,WAAAC,QAAA,SAAAC,EAAAC,IAnCA,SAAAC,EAAAtD,EAAA7B,EAAAiF,EAAAC,GACA,IAAApC,EAAA2B,EAAAN,EAAAtC,GAAAsC,EAAAnE,GACA,aAAA8C,EAAAR,KAEO,CACP,IAAA1B,EAAAkC,EAAA9C,IACAzC,EAAAqD,EAAArD,MACA,OAAAA,GACA,iBAAAA,GACAI,EAAAsB,KAAA1B,EAAA,WACAyH,QAAAC,QAAA1H,EAAA0C,SAAAU,KAAA,SAAApD,GACA4H,EAAA,OAAA5H,EAAA0H,EAAAC,IACW,SAAAL,GACXM,EAAA,QAAAN,EAAAI,EAAAC,KAIAF,QAAAC,QAAA1H,GAAAoD,KAAA,SAAAyE,GAIAxE,EAAArD,MAAA6H,EACAH,EAAArE,IACS,SAAAyE,GAGT,OAAAF,EAAA,QAAAE,EAAAJ,EAAAC,KAvBAA,EAAApC,EAAA9C,KAiCAmF,CAAAtD,EAAA7B,EAAAiF,EAAAC,KAIA,OAAAJ,EAaAA,IAAAnE,KACAoE,EAGAA,GACAA,KA+GA,SAAAP,EAAA5C,EAAAc,GACA,IAAAb,EAAAD,EAAA9D,SAAA4E,EAAAb,QACA,GAAAA,IAAArE,EAAA,CAKA,GAFAkF,EAAAd,SAAA,KAEA,UAAAc,EAAAb,OAAA,CACA,GAAAD,EAAA9D,SAAAwH,SAGA5C,EAAAb,OAAA,SACAa,EAAA1C,IAAAxC,EACAgH,EAAA5C,EAAAc,GAEA,UAAAA,EAAAb,QAGA,OAAAlD,EAIA+D,EAAAb,OAAA,QACAa,EAAA1C,IAAA,IAAAuF,UACA,kDAGA,OAAA5G,EAGA,IAAAmE,EAAA2B,EAAA5C,EAAAD,EAAA9D,SAAA4E,EAAA1C,KAEA,aAAA8C,EAAAR,KAIA,OAHAI,EAAAb,OAAA,QACAa,EAAA1C,IAAA8C,EAAA9C,IACA0C,EAAAd,SAAA,KACAjD,EAGA,IAAA6G,EAAA1C,EAAA9C,IAEA,OAAAwF,EAOAA,EAAA3E,MAGA6B,EAAAd,EAAAoC,YAAAwB,EAAAjI,MAGAmF,EAAAhC,KAAAkB,EAAAqC,QAQA,WAAAvB,EAAAb,SACAa,EAAAb,OAAA,OACAa,EAAA1C,IAAAxC,GAUAkF,EAAAd,SAAA,KACAjD,GANA6G,GA3BA9C,EAAAb,OAAA,QACAa,EAAA1C,IAAA,IAAAuF,UAAA,oCACA7C,EAAAd,SAAA,KACAjD,GAoDA,SAAA8G,EAAAC,GACA,IAAA1C,EAAA,CAAiBC,OAAAyC,EAAA,IAEjB,KAAAA,IACA1C,EAAAI,SAAAsC,EAAA,IAGA,KAAAA,IACA1C,EAAAK,WAAAqC,EAAA,GACA1C,EAAAU,SAAAgC,EAAA,IAGAjJ,KAAAqF,WAAAZ,KAAA8B,GAGA,SAAAhB,EAAAgB,GACA,IAAAF,EAAAE,EAAAX,YAAA,GACAS,EAAAR,KAAA,gBACAQ,EAAA9C,IACAgD,EAAAX,WAAAS,EAGA,SAAAxB,EAAAd,GAIA/D,KAAAqF,WAAA,EAAwBmB,OAAA,SACxBzC,EAAAuB,QAAA0D,EAAAhJ,MACAA,KAAA8E,OAAA,GA8BA,SAAAvC,EAAA+E,GACA,GAAAA,EAAA,CACA,IAAA4B,EAAA5B,EAAAlG,GACA,GAAA8H,EACA,OAAAA,EAAA1G,KAAA8E,GAGA,sBAAAA,EAAArD,KACA,OAAAqD,EAGA,IAAA9B,MAAA8B,EAAA3C,QAAA,CACA,IAAA2B,GAAA,EAAArC,EAAA,SAAAA,IACA,OAAAqC,EAAAgB,EAAA3C,QACA,GAAAzD,EAAAsB,KAAA8E,EAAAhB,GAGA,OAFArC,EAAAnD,MAAAwG,EAAAhB,GACArC,EAAAG,MAAA,EACAH,EAOA,OAHAA,EAAAnD,MAAAC,EACAkD,EAAAG,MAAA,EAEAH,GAGA,OAAAA,UAKA,OAAYA,KAAA4D,GAIZ,SAAAA,IACA,OAAY/G,MAAAC,EAAAqD,MAAA,IAxfZ,CAssBA,WACA,OAAApE,MAAA,iBAAA8D,WADA,IAEGnE,SAAA,cAAAA,uBC9sBH,IAOAwJ,EACAC,EARAC,EAAA5I,EAAAN,QAAA,GAUA,SAAAmJ,IACA,UAAAzC,MAAA,mCAEA,SAAA0C,IACA,UAAA1C,MAAA,qCAsBA,SAAA2C,EAAAC,GACA,GAAAN,IAAAO,WAEA,OAAAA,WAAAD,EAAA,GAGA,IAAAN,IAAAG,IAAAH,IAAAO,WAEA,OADAP,EAAAO,WACAA,WAAAD,EAAA,GAEA,IAEA,OAAAN,EAAAM,EAAA,GACK,MAAAvJ,GACL,IAEA,OAAAiJ,EAAA3G,KAAA,KAAAiH,EAAA,GACS,MAAAvJ,GAET,OAAAiJ,EAAA3G,KAAAxC,KAAAyJ,EAAA,MAvCA,WACA,IAEAN,EADA,mBAAAO,WACAA,WAEAJ,EAEK,MAAApJ,GACLiJ,EAAAG,EAEA,IAEAF,EADA,mBAAAO,aACAA,aAEAJ,EAEK,MAAArJ,GACLkJ,EAAAG,GAjBA,GAwEA,IAEAK,EAFAC,EAAA,GACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAAjF,OACAkF,EAAAD,EAAAK,OAAAJ,GAEAE,GAAA,EAEAF,EAAAlF,QACAuF,KAIA,SAAAA,IACA,IAAAJ,EAAA,CAGA,IAAAK,EAAAX,EAAAQ,GACAF,GAAA,EAGA,IADA,IAAAM,EAAAP,EAAAlF,OACAyF,GAAA,CAGA,IAFAR,EAAAC,EACAA,EAAA,KACAE,EAAAK,GACAR,GACAA,EAAAG,GAAAM,MAGAN,GAAA,EACAK,EAAAP,EAAAlF,OAEAiF,EAAA,KACAE,GAAA,EAnEA,SAAAQ,GACA,GAAAlB,IAAAO,aAEA,OAAAA,aAAAW,GAGA,IAAAlB,IAAAG,IAAAH,IAAAO,aAEA,OADAP,EAAAO,aACAA,aAAAW,GAEA,IAEAlB,EAAAkB,GACK,MAAApK,GACL,IAEA,OAAAkJ,EAAA5G,KAAA,KAAA8H,GACS,MAAApK,GAGT,OAAAkJ,EAAA5G,KAAAxC,KAAAsK,KAgDAC,CAAAJ,IAiBA,SAAAK,EAAAf,EAAAgB,GACAzK,KAAAyJ,MACAzJ,KAAAyK,QAYA,SAAAC,KA5BArB,EAAAsB,SAAA,SAAAlB,GACA,IAAAmB,EAAA,IAAAC,MAAAC,UAAAnG,OAAA,GACA,GAAAmG,UAAAnG,OAAA,EACA,QAAA2B,EAAA,EAAuBA,EAAAwE,UAAAnG,OAAsB2B,IAC7CsE,EAAAtE,EAAA,GAAAwE,UAAAxE,GAGAuD,EAAApF,KAAA,IAAA+F,EAAAf,EAAAmB,IACA,IAAAf,EAAAlF,QAAAmF,GACAN,EAAAU,IASAM,EAAA5K,UAAAyK,IAAA,WACArK,KAAAyJ,IAAAsB,MAAA,KAAA/K,KAAAyK,QAEApB,EAAA2B,MAAA,UACA3B,EAAA4B,SAAA,EACA5B,EAAA6B,IAAA,GACA7B,EAAA8B,KAAA,GACA9B,EAAA+B,QAAA,GACA/B,EAAAgC,SAAA,GAIAhC,EAAAiC,GAAAZ,EACArB,EAAAkC,YAAAb,EACArB,EAAAmC,KAAAd,EACArB,EAAAoC,IAAAf,EACArB,EAAAqC,eAAAhB,EACArB,EAAAsC,mBAAAjB,EACArB,EAAAuC,KAAAlB,EACArB,EAAAwC,gBAAAnB,EACArB,EAAAyC,oBAAApB,EAEArB,EAAA0C,UAAA,SAAArL,GAAqC,UAErC2I,EAAA2C,QAAA,SAAAtL,GACA,UAAAmG,MAAA,qCAGAwC,EAAA4C,IAAA,WAA2B,WAC3B5C,EAAA6C,MAAA,SAAAC,GACA,UAAAtF,MAAA,mCAEAwC,EAAA+C,MAAA,WAA4B,+BCtL5B,IAAAC,EAAY7M,EAAQ,IACpB8M,EAAiB9M,EAAQ,IAAkByK,OAAA,sBAE3C9J,EAAAV,EAAAwB,OAAAsL,qBAAA,SAAAC,GACA,OAAAH,EAAAG,EAAAF,sCCHArL,OAAAT,eAAAL,EAAA,cAA8CW,OAAA,IAE9C,IAAA2L,EAAWjN,EAAQ,KAkBnBkN,EAAA,SAAAvE,EAAA3D,GACA,OAAAvD,OAAArB,UAAAuB,eAAAqB,KAAA2F,EAAA3D,IAEAmI,EAAA,YAGAC,EAAA,GAKAC,EAAA,WACA,SAAAA,EAAAC,EAAAC,EAAAC,GACAhN,KAAAgN,YACAhN,KAAAiN,YAAA,EACAjN,KAAAkN,UAAA,GACAlN,KAAAmN,MAAAJ,EAAArM,KACAV,KAAAoN,gCACAL,EAAAM,iCAAA,EACArN,KAAAsN,SAAAb,EAAAc,SAAAT,GACA9M,KAAAwN,SAAA,CACAC,OAAA,WAAiC,aACjCC,SAAA,WAAmC,OAAAnF,QAAAC,QAAA,OACnCmF,qBAAA,SAAAC,GACAhB,EAAAnI,KAAAmJ,GAEAlE,WAAA,WAAwC,OAAAkE,EAAA,OAAyB,IAEjEC,wBAAA,SAAAD,GACAhB,IAAAkB,OAAA,SAAAC,GAA4E,OAAAA,IAAAH,MAyH5E,OArHA3M,OAAAT,eAAAqM,EAAAjN,UAAA,kCACAG,IAAA,WAEA,OADAC,KAAAgO,kBACAhO,KAAAoN,iCAEAa,IAAA,SAAAC,GACAlO,KAAAgO,kBACAhO,KAAAoN,gCAAAc,GAEAC,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAAqM,EAAAjN,UAAA,QACAG,IAAA,WAEA,OADAC,KAAAgO,kBACAhO,KAAAmN,OAEAgB,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAAqM,EAAAjN,UAAA,WACAG,IAAA,WAEA,OADAC,KAAAgO,kBACAhO,KAAAsN,UAEAa,YAAA,EACArO,cAAA,IAEA+M,EAAAjN,UAAAwO,OAAA,WACA,IAAAC,EAAArO,KACA,WAAAuI,QAAA,SAAAC,GACA6F,EAAAL,kBACAxF,MAEAtE,KAAA,WACAmK,EAAArB,UAAAQ,SAAAc,UAAAD,EAAAlB,OACA,IAAAoB,EAAA,GAMA,OALAtN,OAAAqD,KAAA+J,EAAAnB,WAAA5H,QAAA,SAAAkJ,GACAvN,OAAAqD,KAAA+J,EAAAnB,UAAAsB,IAAAlJ,QAAA,SAAAmJ,GACAF,EAAA9J,KAAA4J,EAAAnB,UAAAsB,GAAAC,QAGAlG,QAAAmG,IAAAH,EAAAI,IAAA,SAAAC,GACA,OAAAA,EAAApB,SAAAY,cAGAlK,KAAA,WACAmK,EAAApB,YAAA,EACAoB,EAAAnB,UAAA,MAiBAL,EAAAjN,UAAAiP,YAAA,SAAAnO,EAAAoO,GAMA,QALA,IAAAA,IAA4CA,EAAAnC,GAC5C3M,KAAAgO,kBACAhO,KAAAkN,UAAAxM,KACAV,KAAAkN,UAAAxM,GAAA,KAEAV,KAAAkN,UAAAxM,GAAAoO,GAAA,CAKA,IAAAC,EAAAD,IAAAnC,EACAmC,OACA/N,EACA6N,EAAA5O,KAAAgN,UAAAQ,SAAAwB,UAAAtO,GAAAV,UAAAiP,UAAAC,KAAAlP,MAAA+O,GACA/O,KAAAkN,UAAAxM,GAAAoO,GAAAF,EAEA,OAAA5O,KAAAkN,UAAAxM,GAAAoO,IAMAjC,EAAAjN,UAAAqP,UAAA,SAAAE,GACA,IAAAd,EAAArO,KAEAyM,EAAA2C,WAAApP,KAAAmP,GAUAA,EAAA3B,UAAA2B,EAAA3B,SAAAG,uBACAf,EAAAtH,QAAA,SAAAyI,GACAM,EAAAb,SAAAG,qBAAAI,KAEAnB,EAAA,KAOAC,EAAAjN,UAAAoO,gBAAA,WACAhO,KAAAiN,YACArE,EAAA,eAAkClI,KAAAV,KAAAmN,SAGlCN,EA3IA,GAsUA,SAAAjE,EAAAyG,EAAAzE,GACA,MAAA0E,EAAA1M,OAAAyM,EAAAzE,GAxLAiC,EAAAjN,UAAAc,MAAAmM,EAAAjN,UAAAkN,SACAD,EAAAjN,UAAAwO,QACAmB,QAAAC,IAAA,MA0LA,IAcAF,EAAA,IAAA7C,EAAAgD,aAAA,iBAdA,CACAC,SAAA,iFAEAC,eAAA,6BACAC,gBAAA,8CACAC,cAAA,+CACAC,oBAAA,sDACAC,mBAAA,0LAIAC,uBAAA,4EAqBAC,EAlNA,SAAAC,IACA,IAAAC,EAAA,GACAnB,EAAA,GACAoB,EAAA,GAEAC,EAAA,CAGAC,YAAA,EACAC,cAqDA,SAAAzD,EAAA0D,GAEA,QADA,IAAAA,IAAmCA,EAAA,IACnC,iBAAAA,GAAA,OAAAA,EAAA,CACA,IAAAC,EAAAD,EACAA,EAAA,CAAyB9P,KAAA+P,GAEzB,IAAA1D,EAAAyD,OACAzP,IAAAgM,EAAArM,OACAqM,EAAArM,KAAAiM,GAEA,IAAAjM,EAAAqM,EAAArM,KACA,iBAAAA,MACAkI,EAAA,gBAAmClI,OAAA,KAEnCgM,EAAAyD,EAAAzP,IACAkI,EAAA,iBAAoClI,SAEpC,IAAAgQ,EAAA,IAAA7D,EAAAC,EAAAC,EAAAsD,GAGA,OAFAF,EAAAzP,GAAAgQ,EACAC,EAAAD,EAAA,UACAA,GAxEAA,MACAE,KAAA,KACArI,gBACAsI,YAAA,QACArD,SAAA,CACAsD,gBAmFA,SAAApQ,EAAAqQ,EAAAC,EAAAC,EAAAC,GAEAlC,EAAAtO,IACAkI,EAAA,qBAAwClI,SAGxCsO,EAAAtO,GAAAqQ,EAEAE,IACAb,EAAA1P,GAAAuQ,EAEAE,IAAA7L,QAAA,SAAAoL,GACAO,EAAA,SAAAP,MAIA,IAAAU,EAAA,SAAAC,GAQA,YAPA,IAAAA,IAAoCA,EAAAX,KACpC,mBAAAW,EAAA3Q,IAGAkI,EAAA,wBAA+ClI,SAG/C2Q,EAAA3Q,MAiBA,YAdAK,IAAAiQ,GACAvE,EAAA2C,WAAAgC,EAAAJ,GAGAX,EAAA3P,GAAA0Q,EAEAvE,EAAAjN,UAAAc,GAAA,WAEA,IADA,IAAAkK,EAAA,GACA0G,EAAA,EAA4BA,EAAAxG,UAAAnG,OAAuB2M,IACnD1G,EAAA0G,GAAAxG,UAAAwG,GAGA,OADAtR,KAAA6O,YAAAK,KAAAlP,KAAAU,GACAqK,MAAA/K,KAAAkR,EAAAtG,EAAA,KAEAwG,GA3HAlB,0BACAqB,gBAiIA,SAAApC,GACA1C,EAAA2C,WAAAiB,EAAAlB,IAjIAqC,gBAAA/E,EAAA+E,gBACA/B,aAAAhD,EAAAgD,aACAnB,UA0BA,SAAA5N,GAEAiQ,EADAR,EAAAzP,GACA,iBACAyP,EAAAzP,IA5BAsO,YACAyC,eACAlJ,gBACA6G,WAAA3C,EAAA2C,aA8BA,SAAAsB,EAAAhQ,GAKA,OAHAgM,EAAAyD,EADAzP,KAAAiM,IAEA/D,EAAA,UAA6BlI,SAE7ByP,EAAAzP,GA4BA,SAAAyQ,IAEA,OAAAlQ,OAAAqD,KAAA6L,GAAAxB,IAAA,SAAAjO,GAAuD,OAAAyP,EAAAzP,KA4DvD,SAAAiQ,EAAAD,EAAAgB,GACAzQ,OAAAqD,KAAA0K,GAAA1J,QAAA,SAAAqM,GAEA,IAAAC,EAAAH,EAAAf,EAAAiB,GACA,OAAAC,GAGAxB,EAAAwB,IACAxB,EAAAwB,GAAAF,EAAAhB,KAMA,SAAAe,EAAAf,EAAAhQ,GACA,kBAAAA,EACA,YAEA,IAAAmR,EAAAnR,EAEA,OADAgQ,EAAA5D,QACA+E,EAEA,OAtIApF,EAAAqF,cAAAzB,EAAA,UAAAA,GAEApP,OAAAT,eAAA6P,EAAA,QACAtQ,IAAAoR,IAqBA1E,EAAAqF,cAAApB,EAAA,MAAA7D,GA8GAwD,EAuCAH,GAEA/P,EAAA8P,WACA9P,EAAA4R,QAAA9B,oCC7YAhP,OAAAT,eAAAL,EAAA,cAA8CW,OAAA,IAE9C,IAAAkR,EAAcxS,EAAQ,KAqBtByS,EAAA,CAIAC,aAAA,EAIAC,YAAA,EAIAtB,YAAA,qBAwBAuB,EAAA,SAAAC,EAAAC,GACA,IAAAD,EACA,MAAAE,EAAAD,IAQAC,EAAA,SAAAD,GACA,WAAAzL,MAAA,sBACAoL,EAAApB,YACA,6BACAyB,IAmBAE,EAAA,SAAAC,GAGA,IADA,IAAAC,EAAA,GAAAC,EAAA,EACArM,EAAA,EAAmBA,EAAAmM,EAAA9N,OAAgB2B,IAAA,CACnC,IAAAsM,EAAAH,EAAAI,WAAAvM,GACAsM,EAAA,IACAF,EAAAC,KAAAC,EAEAA,EAAA,MACAF,EAAAC,KAAAC,GAAA,MACAF,EAAAC,KAAA,GAAAC,EAAA,KAEA,cAAAA,IACAtM,EAAA,EAAAmM,EAAA9N,QACA,cAAA8N,EAAAI,WAAAvM,EAAA,KAEAsM,EAAA,aAAAA,IAAA,UAAAH,EAAAI,aAAAvM,IACAoM,EAAAC,KAAAC,GAAA,OACAF,EAAAC,KAAAC,GAAA,UACAF,EAAAC,KAAAC,GAAA,SACAF,EAAAC,KAAA,GAAAC,EAAA,MAGAF,EAAAC,KAAAC,GAAA,OACAF,EAAAC,KAAAC,GAAA,SACAF,EAAAC,KAAA,GAAAC,EAAA,KAGA,OAAAF,GAuCAI,EAAA,CAMAC,eAAA,KAMAC,eAAA,KAMAC,sBAAA,KAMAC,sBAAA,KAMAC,kBAAA,iEAKAC,mBACA,OAAApT,KAAAmT,kBAAA,OAMAE,2BACA,OAAArT,KAAAmT,kBAAA,OAUAG,mBAAA,mBAAAC,KAUAC,gBAAA,SAAAC,EAAAC,GACA,IAAA7I,MAAA8I,QAAAF,GACA,MAAA5M,MAAA,iDAEA7G,KAAA4T,QAKA,IAJA,IAAAC,EAAAH,EACA1T,KAAAiT,sBACAjT,KAAA+S,eACAe,EAAA,GACAxN,EAAA,EAAuBA,EAAAmN,EAAA9O,OAAkB2B,GAAA,GACzC,IAAAyN,EAAAN,EAAAnN,GACA0N,EAAA1N,EAAA,EAAAmN,EAAA9O,OACAsP,EAAAD,EAAAP,EAAAnN,EAAA,KACA4N,EAAA5N,EAAA,EAAAmN,EAAA9O,OACAwP,EAAAD,EAAAT,EAAAnN,EAAA,KACA8N,EAAAL,GAAA,EACAM,GAAA,EAAAN,IAAA,EAAAE,GAAA,EACAK,GAAA,GAAAL,IAAA,EAAAE,GAAA,EACAI,EAAA,GAAAJ,EACAD,IACAK,EAAA,GACAP,IACAM,EAAA,KAGAR,EAAArP,KAAAoP,EAAAO,GAAAP,EAAAQ,GAAAR,EAAAS,GAAAT,EAAAU,IAEA,OAAAT,EAAAU,KAAA,KAUAC,aAAA,SAAAhB,EAAAC,GAGA,OAAA1T,KAAAsT,qBAAAI,EACAgB,KAAAjB,GAEAzT,KAAAwT,gBAAAhB,EAAAiB,GAAAC,IAUAiB,aAAA,SAAAlB,EAAAC,GAGA,OAAA1T,KAAAsT,qBAAAI,EACAH,KAAAE,GAvJA,SAAAmB,GAGA,IADA,IAAAlC,EAAA,GAAAmC,EAAA,EAAAjC,EAAA,EACAiC,EAAAD,EAAAjQ,QAAA,CACA,IAAAmQ,EAAAF,EAAAC,KACA,GAAAC,EAAA,IACApC,EAAAE,KAAAmC,OAAAC,aAAAF,QAEA,GAAAA,EAAA,KAAAA,EAAA,KACA,IAAAG,EAAAL,EAAAC,KACAnC,EAAAE,KAAAmC,OAAAC,cAAA,GAAAF,IAAA,KAAAG,QAEA,GAAAH,EAAA,KAAAA,EAAA,KAEA,IAGAI,IAAA,EAAAJ,IAAA,QAHAG,EAAAL,EAAAC,QAGA,QAFAM,EAAAP,EAAAC,QAEA,KADAD,EAAAC,MAEA,MACAnC,EAAAE,KAAAmC,OAAAC,aAAA,OAAAE,GAAA,KACAxC,EAAAE,KAAAmC,OAAAC,aAAA,YAAAE,QAEA,CACAD,EAAAL,EAAAC,KAAA,IACAM,EAAAP,EAAAC,KACAnC,EAAAE,KAAAmC,OAAAC,cAAA,GAAAF,IAAA,OAAAG,IAAA,KAAAE,IAGA,OAAAzC,EAAA8B,KAAA,IA6HAY,CAAApV,KAAAqV,wBAAA5B,EAAAC,KAiBA2B,wBAAA,SAAA5B,EAAAC,GACA1T,KAAA4T,QAKA,IAJA,IAAA0B,EAAA5B,EACA1T,KAAAkT,sBACAlT,KAAAgT,eACAc,EAAA,GACAxN,EAAA,EAAuBA,EAAAmN,EAAA9O,QAAkB,CACzC,IAAAoP,EAAAuB,EAAA7B,EAAA5S,OAAAyF,MAEA2N,EADA3N,EAAAmN,EAAA9O,OACA2Q,EAAA7B,EAAA5S,OAAAyF,IAAA,EAGA6N,IAFA7N,EACAmN,EAAA9O,OACA2Q,EAAA7B,EAAA5S,OAAAyF,IAAA,GAGAiP,IAFAjP,EACAmN,EAAA9O,OACA2Q,EAAA7B,EAAA5S,OAAAyF,IAAA,GAEA,KADAA,EACA,MAAAyN,GAAA,MAAAE,GAAA,MAAAE,GAAA,MAAAoB,EACA,MAAA1O,QAEA,IAAAuN,EAAAL,GAAA,EAAAE,GAAA,EAEA,GADAH,EAAArP,KAAA2P,GACA,IAAAD,EAAA,CACA,IAAAE,EAAAJ,GAAA,MAAAE,GAAA,EAEA,GADAL,EAAArP,KAAA4P,GACA,IAAAkB,EAAA,CACA,IAAAjB,EAAAH,GAAA,MAAAoB,EACAzB,EAAArP,KAAA6P,KAIA,OAAAR,GAOAF,MAAA,WACA,IAAA5T,KAAA+S,eAAA,CACA/S,KAAA+S,eAAA,GACA/S,KAAAgT,eAAA,GACAhT,KAAAiT,sBAAA,GACAjT,KAAAkT,sBAAA,GAEA,QAAA5M,EAAA,EAA2BA,EAAAtG,KAAAoT,aAAAzO,OAA8B2B,IACzDtG,KAAA+S,eAAAzM,GAAAtG,KAAAoT,aAAAvS,OAAAyF,GACAtG,KAAAgT,eAAAhT,KAAA+S,eAAAzM,MACAtG,KAAAiT,sBAAA3M,GAAAtG,KAAAqT,qBAAAxS,OAAAyF,GACAtG,KAAAkT,sBAAAlT,KAAAiT,sBAAA3M,MAEAA,GAAAtG,KAAAmT,kBAAAxO,SACA3E,KAAAgT,eAAAhT,KAAAqT,qBAAAxS,OAAAyF,MACAtG,KAAAkT,sBAAAlT,KAAAoT,aAAAvS,OAAAyF,UAwBAkP,EAAA,SAAA/C,GACA,IACA,OAAAK,EAAA6B,aAAAlC,GAAA,GAEA,MAAAvS,GACAqP,QAAA3G,MAAA,wBAAA1I,GAEA,aAqCA,SAAAkP,EAAAqG,EAAAC,GACA,KAAAA,aAAAzU,QACA,OAAAyU,EAEA,OAAAA,EAAA5S,aACA,KAAA6S,KAIA,WAAAA,KADAD,EACAE,WACA,KAAA3U,YACAF,IAAA0U,IACAA,EAAA,IAEA,MACA,KAAA5K,MAEA4K,EAAA,GACA,MACA,QAEA,OAAAC,EAEA,QAAAG,KAAAH,EACAA,EAAAvU,eAAA0U,KAGAJ,EAAAI,GAAAzG,EAAAqG,EAAAI,GAAAH,EAAAG,KAEA,OAAAJ,EAuBA,IAAAK,EAAA,WACA,SAAAA,IACA,IAAAzH,EAAArO,KACAA,KAAA+V,QAAA,IAAAxN,QAAA,SAAAC,EAAAC,GACA4F,EAAA7F,UACA6F,EAAA5F,WAkCA,OAxBAqN,EAAAlW,UAAAoW,aAAA,SAAApI,GACA,IAAAS,EAAArO,KACA,gBAAA4I,EAAA9H,GACA8H,EACAyF,EAAA5F,OAAAG,GAGAyF,EAAA7F,QAAA1H,GAEA,mBAAA8M,IAGAS,EAAA0H,QAAA5O,MAAA,cAGA,IAAAyG,EAAAjJ,OACAiJ,EAAAhF,GAGAgF,EAAAhF,EAAA9H,MAKAgV,EAvCA,GA8DAG,EAAA,WACA,0BAAAC,WACA,iBAAAA,UAAA,UACAA,UAAA,UAGA,IAiCAC,EAAA,gBACAC,EAAAvP,MACAuP,kBAOA,IAAAC,EAAA,WA0BA,OAzBA,SAAAhH,EAAAiD,GAIA,GAHAtS,KAAAqP,OACArP,KAAAsS,UAEA8D,EAEAA,EAAApW,KAAAyP,EAAA7P,UAAAgD,aAGA,IAGA,MAAAiE,MAAAkE,MAAA/K,KAAA8K,WAEA,MAAA1C,GACApI,KAAAU,KAAAyV,EAEAlV,OAAAT,eAAAR,KAAA,SACAD,IAAA,WACA,OAAAqI,EAAAkO,WApBA,GA6BAD,EAAAzW,UAAAqB,OAAA2B,OAAAiE,MAAAjH,WACAyW,EAAAzW,UAAAkD,YAAAuT,EACAA,EAAAzW,UAAAc,KAAAyV,EACA,IAAA1G,EAAA,WACA,SAAAA,EAAAb,EAAA+C,EAAA4E,GACAvW,KAAA4O,UACA5O,KAAA2R,cACA3R,KAAAuW,SAEAvW,KAAAwW,QAAA,gBAgCA,OA7BA/G,EAAA7P,UAAAgD,OAAA,SAAAyM,EAAAoH,QACA1V,IAAA0V,IACAA,EAAA,IAEA,IAEAnE,EAFAoE,EAAA1W,KAAAuW,OAAAlH,GACAsH,EAAA3W,KAAA4O,QAAA,IAAAS,EAGAiD,OADAvR,IAAA2V,EACA,QAGAA,EAAAE,QAAA5W,KAAAwW,QAAA,SAAAvW,EAAAuE,GACA,IAAA1D,EAAA2V,EAAAjS,GACA,YAAAzD,IAAAD,IAAAuD,WAAA,IAAAG,EAAA,OAIA8N,EAAAtS,KAAA2R,YAAA,KAAAW,EAAA,KAAAqE,EAAA,KACA,IAAAvO,EAAA,IAAAiO,EAAAM,EAAArE,GAGA,QAAAuD,KAAAY,EACAA,EAAAtV,eAAA0U,IAAA,MAAAA,EAAApQ,OAAA,KAGA2C,EAAAyN,GAAAY,EAAAZ,IAEA,OAAAzN,GAEAqH,EAtCA,GA+DA,SAAAoH,EAAApE,GACA,OAAAqE,KAAAC,MAAAtE,GAqCA,IAAAuE,EAAA,SAAAC,GACA,IAAAC,EAAA,GAAmBC,EAAA,GAAaV,EAAA,GAAWW,EAAA,GAC3C,IACA,IAAAC,EAAAJ,EAAAK,MAAA,KACAJ,EAAAL,EAAArB,EAAA6B,EAAA,SACAF,EAAAN,EAAArB,EAAA6B,EAAA,SACAD,EAAAC,EAAA,GACAZ,EAAAU,EAAA,aACAA,EAAA,EAEA,MAAAjX,IACA,OACAgX,SACAC,SACAV,OACAW,cA+GA9R,EAAA,SAAA6C,EAAAD,GACA,QAAA1D,KAAA2D,EACAlH,OAAArB,UAAAuB,eAAAqB,KAAA2F,EAAA3D,IACA0D,EAAA1D,EAAA2D,EAAA3D,KAUA+S,EAAA,SAAAC,EAAAC,GAIA,OAHAnS,EAAAmS,EAAA,SAAAjT,EAAA1D,GACA0W,EAAAhT,GAAA1D,IAEA0W,GAwCAE,EAAA,SAAAvP,EAAAD,EAAAyP,GACA,QAAAnT,KAAA2D,EACA,GAAAD,EAAA1F,KAAAmV,EAAAxP,EAAA3D,KAAA2D,GACA,OAAA3D,GA6LAoT,EAAA,SAAAC,GAEA,SAAAD,IACA,IAAAvJ,EAAAwJ,EAAArV,KAAAxC,YAOAqO,EAAAyJ,OAAA,GAMAzJ,EAAA0J,KAAA,GAOA1J,EAAA2J,GAAA,GAMA3J,EAAA4J,KAAA,GAIA5J,EAAA6J,OAAA,EAIA7J,EAAA8J,OAAA,EACA9J,EAAA+J,UAAA,GACA/J,EAAA4J,KAAA,OACA,QAAA3R,EAAA,EAAuBA,EAAA+H,EAAA+J,YAAqB9R,EAC5C+H,EAAA4J,KAAA3R,GAAA,EAGA,OADA+H,EAAAvJ,QACAuJ,EAkLA,OA7NA2D,EAAAqG,UAAAT,EAAAC,GA6CAD,EAAAhY,UAAAkF,MAAA,WACA9E,KAAA8X,OAAA,cACA9X,KAAA8X,OAAA,cACA9X,KAAA8X,OAAA,cACA9X,KAAA8X,OAAA,aACA9X,KAAA8X,OAAA,cACA9X,KAAAkY,OAAA,EACAlY,KAAAmY,OAAA,GAQAP,EAAAhY,UAAA0Y,UAAA,SAAAC,EAAAC,GACAA,IACAA,EAAA,GAEA,IAAAC,EAAAzY,KAAAgY,GAEA,oBAAAO,EACA,QAAAjS,EAAA,EAA2BA,EAAA,GAAQA,IASnCmS,EAAAnS,GACAiS,EAAA1F,WAAA2F,IAAA,GACAD,EAAA1F,WAAA2F,EAAA,OACAD,EAAA1F,WAAA2F,EAAA,MACAD,EAAA1F,WAAA2F,EAAA,GACAA,GAAA,OAIA,IAAAlS,EAAA,EAA2BA,EAAA,GAAQA,IACnCmS,EAAAnS,GACAiS,EAAAC,IAAA,GACAD,EAAAC,EAAA,OACAD,EAAAC,EAAA,MACAD,EAAAC,EAAA,GACAA,GAAA,EAIA,IAAAlS,EAAA,GAAwBA,EAAA,GAAQA,IAAA,CAChC,IAAAoS,EAAAD,EAAAnS,EAAA,GAAAmS,EAAAnS,EAAA,GAAAmS,EAAAnS,EAAA,IAAAmS,EAAAnS,EAAA,IACAmS,EAAAnS,GAAA,YAAAoS,GAAA,EAAAA,IAAA,IAEA,IAKAjZ,EAAAkZ,EALAC,EAAA5Y,KAAA8X,OAAA,GACAe,EAAA7Y,KAAA8X,OAAA,GACAlF,EAAA5S,KAAA8X,OAAA,GACAgB,EAAA9Y,KAAA8X,OAAA,GACA5X,EAAAF,KAAA8X,OAAA,GAGA,IAAAxR,EAAA,EAAuBA,EAAA,GAAQA,IAAA,CAC/BA,EAAA,GACAA,EAAA,IACA7G,EAAAqZ,EAAAD,GAAAjG,EAAAkG,GACAH,EAAA,aAGAlZ,EAAAoZ,EAAAjG,EAAAkG,EACAH,EAAA,YAIArS,EAAA,IACA7G,EAAAoZ,EAAAjG,EAAAkG,GAAAD,EAAAjG,GACA+F,EAAA,aAGAlZ,EAAAoZ,EAAAjG,EAAAkG,EACAH,EAAA,YAGAD,GAAAE,GAAA,EAAAA,IAAA,IAAAnZ,EAAAS,EAAAyY,EAAAF,EAAAnS,GAAA,WACApG,EAAA4Y,EACAA,EAAAlG,EACAA,EAAA,YAAAiG,GAAA,GAAAA,IAAA,GACAA,EAAAD,EACAA,EAAAF,EAEA1Y,KAAA8X,OAAA,GAAA9X,KAAA8X,OAAA,GAAAc,EAAA,WACA5Y,KAAA8X,OAAA,GAAA9X,KAAA8X,OAAA,GAAAe,EAAA,WACA7Y,KAAA8X,OAAA,GAAA9X,KAAA8X,OAAA,GAAAlF,EAAA,WACA5S,KAAA8X,OAAA,GAAA9X,KAAA8X,OAAA,GAAAgB,EAAA,WACA9Y,KAAA8X,OAAA,GAAA9X,KAAA8X,OAAA,GAAA5X,EAAA,YAEA0X,EAAAhY,UAAAmZ,OAAA,SAAAnE,EAAAoE,GAEA,SAAApE,EAAA,MAGA7T,IAAAiY,IACAA,EAAApE,EAAAjQ,QAQA,IANA,IAAAsU,EAAAD,EAAAhZ,KAAAoY,UACAc,EAAA,EAEAX,EAAAvY,KAAA+X,KACAoB,EAAAnZ,KAAAkY,OAEAgB,EAAAF,GAAA,CAKA,MAAAG,EACA,KAAAD,GAAAD,GACAjZ,KAAAsY,UAAA1D,EAAAsE,GACAA,GAAAlZ,KAAAoY,UAGA,oBAAAxD,GACA,KAAAsE,EAAAF,GAIA,GAHAT,EAAAY,GAAAvE,EAAA/B,WAAAqG,KAEAA,IADAC,GAEAnZ,KAAAoY,UAAA,CACApY,KAAAsY,UAAAC,GACAY,EAAA,EAEA,YAKA,KAAAD,EAAAF,GAIA,GAHAT,EAAAY,GAAAvE,EAAAsE,KAEAA,IADAC,GAEAnZ,KAAAoY,UAAA,CACApY,KAAAsY,UAAAC,GACAY,EAAA,EAEA,OAKAnZ,KAAAkY,OAAAiB,EACAnZ,KAAAmY,QAAAa,IAGApB,EAAAhY,UAAAwZ,OAAA,WACA,IAAAA,EAAA,GACAC,EAAA,EAAArZ,KAAAmY,OAEAnY,KAAAkY,OAAA,GACAlY,KAAA+Y,OAAA/Y,KAAAiY,KAAA,GAAAjY,KAAAkY,QAGAlY,KAAA+Y,OAAA/Y,KAAAiY,KAAAjY,KAAAoY,WAAApY,KAAAkY,OAAA,KAGA,QAAA5R,EAAAtG,KAAAoY,UAAA,EAAwC9R,GAAA,GAASA,IACjDtG,KAAA+X,KAAAzR,GAAA,IAAA+S,EACAA,GAAA,IAEArZ,KAAAsY,UAAAtY,KAAA+X,MACA,IAAAmB,EAAA,EACA,IAAA5S,EAAA,EAAuBA,EAAA,EAAOA,IAC9B,QAAAgT,EAAA,GAA4BA,GAAA,EAAQA,GAAA,EACpCF,EAAAF,GAAAlZ,KAAA8X,OAAAxR,IAAAgT,EAAA,MACAJ,EAGA,OAAAE,GAEAxB,EA9NA,CAnDA,WAQA,OAPA,WAKA5X,KAAAoY,WAAA,GANA,IAoSA,IAAAmB,EAAA,WAMA,SAAAA,EAAAC,EAAAC,GACA,IAAApL,EAAArO,KACAA,KAAA0Z,UAAA,GACA1Z,KAAA2Z,aAAA,GACA3Z,KAAA4Z,cAAA,EAEA5Z,KAAA6Z,KAAAtR,QAAAC,UACAxI,KAAA8Z,WAAA,EACA9Z,KAAAyZ,gBAIAzZ,KAAA6Z,KACA3V,KAAA,WACAsV,EAAAnL,KAEAlH,MAAA,SAAAjH,GACAmO,EAAAzF,MAAA1I,KAyIA,OAtIAqZ,EAAA3Z,UAAAqE,KAAA,SAAAnD,GACAd,KAAA+Z,gBAAA,SAAAC,GACAA,EAAA/V,KAAAnD,MAGAyY,EAAA3Z,UAAAgJ,MAAA,SAAAA,GACA5I,KAAA+Z,gBAAA,SAAAC,GACAA,EAAApR,WAEA5I,KAAAia,MAAArR,IAEA2Q,EAAA3Z,UAAAoH,SAAA,WACAhH,KAAA+Z,gBAAA,SAAAC,GACAA,EAAAhT,aAEAhH,KAAAia,SAQAV,EAAA3Z,UAAAsa,UAAA,SAAAC,EAAAvR,EAAA5B,GACA,IACAgT,EADA3L,EAAArO,KAEA,QAAAe,IAAAoZ,QACApZ,IAAA6H,QACA7H,IAAAiG,EACA,UAAAH,MAAA,0BAaA9F,KANAiZ,EAyHA,SAAA7R,EAAAiS,GACA,oBAAAjS,GAAA,OAAAA,EACA,SAEA,QAAAmJ,EAAA,EAAA+I,EAAAD,EAAyC9I,EAAA+I,EAAA1V,OAAuB2M,IAAA,CAChE,IAAAlM,EAAAiV,EAAA/I,GACA,GAAAlM,KAAA+C,GAAA,mBAAAA,EAAA/C,GACA,SAGA,SAvIAkV,CAAAH,EAAA,6BACAA,EAGA,CACAlW,KAAAkW,EACAvR,QACA5B,aAGA/C,OACA+V,EAAA/V,KAAAyG,QAEA3J,IAAAiZ,EAAApR,QACAoR,EAAApR,MAAA8B,QAEA3J,IAAAiZ,EAAAhT,WACAgT,EAAAhT,SAAA0D,GAEA,IAAA6P,EAAAva,KAAAwa,eAAAtL,KAAAlP,UAAA0Z,UAAA/U,QAqBA,OAjBA3E,KAAA8Z,WACA9Z,KAAA6Z,KAAA3V,KAAA,WACA,IACAmK,EAAAoM,WACAT,EAAApR,MAAAyF,EAAAoM,YAGAT,EAAAhT,WAGA,MAAA9G,OAMAF,KAAA0Z,UAAAjV,KAAAuV,GACAO,GAIAhB,EAAA3Z,UAAA4a,eAAA,SAAAlU,QACAvF,IAAAf,KAAA0Z,gBAAA3Y,IAAAf,KAAA0Z,UAAApT,YAGAtG,KAAA0Z,UAAApT,GACAtG,KAAA4Z,eAAA,EACA,IAAA5Z,KAAA4Z,oBAAA7Y,IAAAf,KAAAyZ,eACAzZ,KAAAyZ,cAAAzZ,QAGAuZ,EAAA3Z,UAAAma,gBAAA,SAAA7R,GACA,IAAAlI,KAAA8Z,UAMA,QAAAxT,EAAA,EAAuBA,EAAAtG,KAAA0Z,UAAA/U,OAA2B2B,IAClDtG,KAAA0a,QAAApU,EAAA4B,IAMAqR,EAAA3Z,UAAA8a,QAAA,SAAApU,EAAA4B,GACA,IAAAmG,EAAArO,KAEAA,KAAA6Z,KAAA3V,KAAA,WACA,QAAAnD,IAAAsN,EAAAqL,gBAAA3Y,IAAAsN,EAAAqL,UAAApT,GACA,IACA4B,EAAAmG,EAAAqL,UAAApT,IAEA,MAAApG,GAIA,oBAAAqP,iBAAA3G,OACA2G,QAAA3G,MAAA1I,OAMAqZ,EAAA3Z,UAAAqa,MAAA,SAAA7R,GACA,IAAAiG,EAAArO,KACAA,KAAA8Z,YAGA9Z,KAAA8Z,WAAA,OACA/Y,IAAAqH,IACApI,KAAAya,WAAArS,GAGApI,KAAA6Z,KAAA3V,KAAA,WACAmK,EAAAqL,eAAA3Y,EACAsN,EAAAoL,mBAAA1Y,MAGAwY,EAhKA,GAmMA,SAAA7O,KAwDA,SAAAiQ,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,GACA,OAAAF,GACA,OACAE,EAAAD,EAAA,gBACA,MACA,OACAC,EAAAD,EAAA,kBACA,MACA,OACAC,EAAAD,EAAA,gBACA,MACA,OACAC,EAAAD,EAAA,kBACA,MACA,QACA,UAAAjU,MAAA,mEAEA,IAAA+B,EAAAgS,EAAA,YAEA,OADAhS,GAAAmS,EAAA,aA2IA5a,EAAAiS,SACAjS,EAAAoS,iBACApS,EAAA2S,SACA3S,EAAAqV,eACArV,EAAA6a,aAr2CA,SAAAvI,GACA,IAAAwI,EAAAzI,EAAAC,GACA,OAAAK,EAAAU,gBAAAyH,GAAA,IAo2CA9a,EAAA8R,YACA9R,EAAAoN,SA7zCA,SAAAzM,GACA,OAAAsO,OAAArO,EAAAD,IA6zCAX,EAAAiP,aACAjP,EAAA2R,cAhxCA,SAAA3J,EAAA0N,EAAA/U,GACAqH,EAAA0N,GAAA/U,GAgxCAX,EAAA2V,WACA3V,EAAA8V,QACA9V,EAAA+a,gBAhrCA,WACA,0BAAAC,WACAA,OAAA,SAAAA,OAAA,UAAAA,OAAA,WACA,oDAAAC,KAAAnF,MA8qCA9V,EAAAkb,UA/pCA,WACA,WAAApJ,EAAAC,cAAA,IAAAD,EAAAE,YA+pCAhS,EAAAmb,cAxqCA,WACA,uBAAApF,WAAA,gBAAAA,UAAA,SAwqCA/V,EAAAsP,eACAtP,EAAAkW,gBACAlW,EAAAob,aA3pCA,SAAAC,GACA,IAAArX,EAAAiS,EAEA,OADAA,EAAAoF,EACArX,GAypCAhE,EAAA0W,WACA1W,EAAAsb,UAjjCA,SAAAhF,GACA,OAAAK,KAAA2E,UAAAhF,IAijCAtW,EAAA6W,SACA7W,EAAAub,QA57BA,SAAAzE,GACA,IAAAE,EAAAH,EAAAC,GAAAE,OACA,uBAAAA,IAAA,IAAAA,EAAA,OA27BAhX,EAAAwb,aA59BA,SAAA1E,GACA,IAAAE,EAAAH,EAAAC,GAAAE,OACA,uBAAAA,KAAAhW,eAAA,OACAgW,EAAA,IAEA,MAw9BAhX,EAAAyb,cA58BA,SAAA3E,GACA,IAAAE,EAAAH,EAAAC,GAAAE,OACA,QAAAA,GAAA,iBAAAA,KAAAhW,eAAA,QA28BAhB,EAAA0b,iBA3/BA,SAAA5E,GACA,IAAA6E,EAAAC,EAAA5E,EAAAH,EAAAC,GAAAE,OAAA6E,EAAAC,KAAAC,OAAA,IAAAvG,MAAAC,UAAA,KAgBA,MAfA,iBAAAuB,IACAA,EAAAhW,eAAA,OACA2a,EAAA3E,EAAA,IAEAA,EAAAhW,eAAA,SACA2a,EAAA3E,EAAA,KAGA4E,EADA5E,EAAAhW,eAAA,OACAgW,EAAA,IAIA2E,EAAA,OAGAE,GAAAF,GAAAC,GAAAC,GAAAF,GAAAE,GAAAD,GA2+BA5b,EAAAgc,MAn4BA,SAAAhU,GACA,OAAAoP,EAAA,GAAoBpP,IAm4BpBhI,EAAAuM,SA36BA,SAAAvE,EAAA3D,GACA,OAAAvD,OAAArB,UAAAuB,eAAAqB,KAAA2F,EAAA3D,IA26BArE,EAAAic,MAn0BA,SAAAjU,EAAAD,GACA,QAAA1D,KAAA2D,EACA,GAAAlH,OAAArB,UAAAuB,eAAAqB,KAAA2F,EAAA3D,KACA0D,EAAA1D,EAAA2D,EAAA3D,IACA,SAIA,UA4zBArE,EAAAoX,SACApX,EAAAuX,UACAvX,EAAAkc,UA/1BA,SAAAlU,EAAAD,EAAAyP,GACA,IAAAnT,EAAAkT,EAAAvP,EAAAD,EAAAyP,GACA,OAAAnT,GAAA2D,EAAA3D,IA81BArE,EAAAmF,UACAnF,EAAAmc,UA71BA,SAAAnU,GACA,QAAA3D,KAAA2D,EACA,OAAA3D,GA41BArE,EAAAoc,SAx3BA,SAAApU,GACA,IAAAqU,EAAA,EACA,QAAAhY,KAAA2D,EACAqU,IAEA,OAAAA,GAo3BArc,EAAAsc,UA11BA,SAAAtU,GACA,IAAAuU,EAAA,GACApW,EAAA,EACA,QAAA9B,KAAA2D,EACAuU,EAAApW,KAAA6B,EAAA3D,GAEA,OAAAkY,GAq1BAvc,EAAAwc,QAh4BA,SAAAxU,GACA,QAAA3D,KAAA2D,EACA,SAEA,UA63BAhI,EAAAyc,gBAp4BA,SAAAzU,GACA,uBAAAA,GAAA,OAAAA,GAo4BAhI,EAAAwO,IAr3BA,SAAAxG,EAAA1I,EAAAod,GACA,IAAAH,EAAA,GACA,QAAAlY,KAAA2D,EACAuU,EAAAlY,GAAA/E,EAAA+C,KAAAqa,EAAA1U,EAAA3D,KAAA2D,GAEA,OAAAuU,GAi3BAvc,EAAA2c,QAp7BA,SAAA3U,EAAA3D,GACA,GAAAvD,OAAArB,UAAAuB,eAAAqB,KAAA2F,EAAA3D,GACA,OAAA2D,EAAA3D,IAm7BArE,EAAA4c,YA5yBA,SAAAC,GACA,IAAAC,EAAA,GAWA,OAVA3X,EAAA0X,EAAA,SAAAxY,EAAA1D,GACA+J,MAAA8I,QAAA7S,GACAA,EAAAwE,QAAA,SAAA4X,GACAD,EAAAxY,KAAA0Y,mBAAA3Y,GAAA,IAAA2Y,mBAAAD,MAIAD,EAAAxY,KAAA0Y,mBAAA3Y,GAAA,IAAA2Y,mBAAArc,MAGAmc,EAAAtY,OAAA,IAAAsY,EAAAzI,KAAA,SAiyBArU,EAAAid,kBAzxBA,SAAAL,GACA,IAAA5U,EAAA,GAQA,OAPA4U,EAAAnG,QAAA,UAAAU,MAAA,KACAhS,QAAA,SAAA2R,GACA,GAAAA,EAAA,CACA,IAAAzS,EAAAyS,EAAAK,MAAA,KACAnP,EAAA3D,EAAA,IAAAA,EAAA,MAGA2D,GAixBAhI,EAAAyX,OACAzX,EAAAwD,MA/RA,SAAAuE,EAAAmV,GACA,kBAEA,IADA,IAAAzS,EAAA,GACA0G,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/C1G,EAAA0G,GAAAxG,UAAAwG,GAEA/I,QAAAC,SAAA,GACAtE,KAAA,WACAgE,EAAA6C,WAAA,EAAAH,KAEAzD,MAAA,SAAAyB,GACAyU,GACAA,EAAAzU,OAoRAzI,EAAAqR,gBA3cA,SAAAgI,EAAAC,GACA,IAAA6D,EAAA,IAAA/D,EAAAC,EAAAC,GACA,OAAA6D,EAAApD,UAAAhL,KAAAoO,IA0cAnd,EAAAwa,cACAxa,EAAAod,iBArOA,SAAA3C,EAAA4C,EAAAC,EAAAC,GACA,IAAAC,EAOA,GANAD,EAAAF,EACAG,EAAA,YAAAH,EAEAE,EAAAD,IACAE,EAAA,IAAAF,EAAA,uBAAAA,GAEAE,EAQA,UAAA9W,MAPA+T,EACA,4BACA8C,GACA,IAAAA,EAAA,4BACA,YACAC,EACA,MAuNAxd,EAAAyd,iBAtKA,SAAAhD,EAAAC,EAAAjN,EAAAkN,GACA,KAAAA,GAAAlN,IAEA,mBAAAA,EACA,UAAA/G,MAAA8T,EAAAC,EAAAC,EAAAC,GACA,8BAkKA3a,EAAA0d,sBAhKA,SAAAjD,EAAAC,EAAA5U,EAAA6U,GACA,KAAAA,GAAA7U,KAEA,iBAAAA,GAAA,OAAAA,GACA,UAAAY,MAAA8T,EAAAC,EAAAC,EAAAC,GACA,oCA4JA3a,EAAA2d,kBAjLA,SAAAlD,EAAAC,EAAAxK,EAAAyK,GACA,KAAAA,GAAAzK,IAEA,iBAAAA,EAEA,UAAAxJ,MAAA8T,EAAAC,EAAAC,EAAAC,GACA,wCA4KA3a,EAAA4d,aAvFA,SAAAtL,GAEA,IADA,IAAAE,EAAA,EACArM,EAAA,EAAmBA,EAAAmM,EAAA9N,OAAgB2B,IAAA,CACnC,IAAAsM,EAAAH,EAAAI,WAAAvM,GACAsM,EAAA,IACAD,IAEAC,EAAA,KACAD,GAAA,EAEAC,GAAA,OAAAA,GAAA,OAEAD,GAAA,EACArM,KAGAqM,GAAA,EAGA,OAAAA,GAqEAxS,EAAAqS,kBA9HA,SAAAC,GAEA,IADA,IAAAC,EAAA,GAAAC,EAAA,EACArM,EAAA,EAAmBA,EAAAmM,EAAA9N,OAAgB2B,IAAA,CACnC,IAAAsM,EAAAH,EAAAI,WAAAvM,GAEA,GAAAsM,GAAA,OAAAA,GAAA,OACA,IAAAoL,EAAApL,EAAA,MAEAR,IADA9L,EACAmM,EAAA9N,OAAA,2CAEAiO,EAAA,OAAAoL,GAAA,KADAvL,EAAAI,WAAAvM,GAAA,OAGAsM,EAAA,IACAF,EAAAC,KAAAC,EAEAA,EAAA,MACAF,EAAAC,KAAAC,GAAA,MACAF,EAAAC,KAAA,GAAAC,EAAA,KAEAA,EAAA,OACAF,EAAAC,KAAAC,GAAA,OACAF,EAAAC,KAAAC,GAAA,SACAF,EAAAC,KAAA,GAAAC,EAAA,MAGAF,EAAAC,KAAAC,GAAA,OACAF,EAAAC,KAAAC,GAAA,UACAF,EAAAC,KAAAC,GAAA,SACAF,EAAAC,KAAA,GAAAC,EAAA,KAGA,OAAAF,wBC/pDAjS,EAAAN,QAAiBX,EAAQ,0BCSzB,IAAAye,EAAA,WACA,OAAAje,MAAA,iBAAA8D,WADA,IAECnE,SAAA,cAAAA,GAIDue,EAAAD,EAAArc,oBACAX,OAAAsL,oBAAA0R,GAAAE,QAAA,yBAGAC,EAAAF,GAAAD,EAAArc,mBAOA,GAJAqc,EAAArc,wBAAAb,EAEAN,EAAAN,QAAiBX,EAAQ,KAEzB0e,EAEAD,EAAArc,mBAAAwc,OAGA,WACAH,EAAArc,mBACG,MAAA1B,GACH+d,EAAArc,wBAAAb,sBClCA,SAAAsd,EAAAC,EAAA9V,EAAAC,EAAA8V,EAAAC,EAAAha,EAAAjB,GACA,IACA,IAAAwF,EAAAuV,EAAA9Z,GAAAjB,GACAzC,EAAAiI,EAAAjI,MACG,MAAA8H,GAEH,YADAH,EAAAG,GAIAG,EAAA3E,KACAoE,EAAA1H,GAEAyH,QAAAC,QAAA1H,GAAAoD,KAAAqa,EAAAC,GAwBA/d,EAAAN,QApBA,SAAA+H,GACA,kBACA,IAAApE,EAAA9D,KACA4K,EAAAE,UACA,WAAAvC,QAAA,SAAAC,EAAAC,GACA,IAAA6V,EAAApW,EAAA6C,MAAAjH,EAAA8G,GAEA,SAAA2T,EAAAzd,GACAud,EAAAC,EAAA9V,EAAAC,EAAA8V,EAAAC,EAAA,OAAA1d,GAGA,SAAA0d,EAAApW,GACAiW,EAAAC,EAAA9V,EAAAC,EAAA8V,EAAAC,EAAA,QAAApW,GAGAmW,OAAAxd,yCC3BAvB,EAAQ,KACR,IAHAif,EAGAxO,GAHAwO,EAG+Bjf,EAAQ,OAHR,iBAAAif,GAAA,YAAAA,IAAA,QAAAA,EAsB/Bhe,EAAAN,QAAA8P,oCCxBAzQ,EAAAkf,EAAAC,GAAAnf,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,yBCAA,SAAAsE,GACA,aAEA,IAAAA,EAAA8a,MAAA,CAIA,IAAAC,EAAA,CACAC,aAAA,oBAAAhb,EACAwD,SAAA,WAAAxD,GAAA,aAAAlD,OACAme,KAAA,eAAAjb,GAAA,SAAAA,GAAA,WACA,IAEA,OADA,IAAAkb,MACA,EACO,MAAA9e,GACP,UALA,GAQA+e,SAAA,aAAAnb,EACAob,YAAA,gBAAApb,GAGA,GAAA+a,EAAAK,YACA,IAAAC,EAAA,CACA,qBACA,sBACA,6BACA,sBACA,uBACA,sBACA,uBACA,wBACA,yBAGAC,EAAA,SAAAjX,GACA,OAAAA,GAAAkX,SAAAzf,UAAA0f,cAAAnX,IAGAoX,EAAAC,YAAAC,QAAA,SAAAtX,GACA,OAAAA,GAAAgX,EAAAhB,QAAAld,OAAArB,UAAAyE,SAAA7B,KAAA2F,KAAA,GAyDAuX,EAAA9f,UAAA+f,OAAA,SAAAjf,EAAAI,GACAJ,EAAAkf,EAAAlf,GACAI,EAAA+e,EAAA/e,GACA,IAAAgf,EAAA9f,KAAA2O,IAAAjO,GACAV,KAAA2O,IAAAjO,GAAAof,IAAA,IAAAhf,KAGA4e,EAAA9f,UAAA,gBAAAc,UACAV,KAAA2O,IAAAiR,EAAAlf,KAGAgf,EAAA9f,UAAAG,IAAA,SAAAW,GAEA,OADAA,EAAAkf,EAAAlf,GACAV,KAAA+f,IAAArf,GAAAV,KAAA2O,IAAAjO,GAAA,MAGAgf,EAAA9f,UAAAmgB,IAAA,SAAArf,GACA,OAAAV,KAAA2O,IAAAxN,eAAAye,EAAAlf,KAGAgf,EAAA9f,UAAAqO,IAAA,SAAAvN,EAAAI,GACAd,KAAA2O,IAAAiR,EAAAlf,IAAAmf,EAAA/e,IAGA4e,EAAA9f,UAAA0F,QAAA,SAAAsI,EAAAoS,GACA,QAAAtf,KAAAV,KAAA2O,IACA3O,KAAA2O,IAAAxN,eAAAT,IACAkN,EAAApL,KAAAwd,EAAAhgB,KAAA2O,IAAAjO,KAAAV,OAKA0f,EAAA9f,UAAA0E,KAAA,WACA,IAAA2b,EAAA,GAEA,OADAjgB,KAAAsF,QAAA,SAAAxE,EAAAJ,GAAwCuf,EAAAxb,KAAA/D,KACxCwf,EAAAD,IAGAP,EAAA9f,UAAA2C,OAAA,WACA,IAAA0d,EAAA,GAEA,OADAjgB,KAAAsF,QAAA,SAAAxE,GAAkCmf,EAAAxb,KAAA3D,KAClCof,EAAAD,IAGAP,EAAA9f,UAAAugB,QAAA,WACA,IAAAF,EAAA,GAEA,OADAjgB,KAAAsF,QAAA,SAAAxE,EAAAJ,GAAwCuf,EAAAxb,KAAA,CAAA/D,EAAAI,MACxCof,EAAAD,IAGApB,EAAAvX,WACAoY,EAAA9f,UAAAgB,OAAAS,UAAAqe,EAAA9f,UAAAugB,SAqJA,IAAA/F,EAAA,+CA4CAgG,EAAAxgB,UAAAuc,MAAA,WACA,WAAAiE,EAAApgB,KAAA,CAA8BqgB,KAAArgB,KAAAsgB,aAgC9BC,EAAA/d,KAAA4d,EAAAxgB,WAgBA2gB,EAAA/d,KAAAge,EAAA5gB,WAEA4gB,EAAA5gB,UAAAuc,MAAA,WACA,WAAAqE,EAAAxgB,KAAAsgB,UAAA,CACAG,OAAAzgB,KAAAygB,OACAC,WAAA1gB,KAAA0gB,WACAC,QAAA,IAAAjB,EAAA1f,KAAA2gB,SACAC,IAAA5gB,KAAA4gB,OAIAJ,EAAA5X,MAAA,WACA,IAAAiY,EAAA,IAAAL,EAAA,MAAuCC,OAAA,EAAAC,WAAA,KAEvC,OADAG,EAAAhb,KAAA,QACAgb,GAGA,IAAAC,EAAA,sBAEAN,EAAAO,SAAA,SAAAH,EAAAH,GACA,QAAAK,EAAA3C,QAAAsC,GACA,UAAAO,WAAA,uBAGA,WAAAR,EAAA,MAA+BC,SAAAE,QAAA,CAA0BM,SAAAL,MAGzD9c,EAAA4b,UACA5b,EAAAsc,UACAtc,EAAA0c,WAEA1c,EAAA8a,MAAA,SAAAnL,EAAAyN,GACA,WAAA3Y,QAAA,SAAAC,EAAAC,GACA,IAAA0Y,EAAA,IAAAf,EAAA3M,EAAAyN,GACAE,EAAA,IAAAC,eAEAD,EAAAE,OAAA,WACA,IArEAC,EACAZ,EAoEA7T,EAAA,CACA2T,OAAAW,EAAAX,OACAC,WAAAU,EAAAV,WACAC,SAxEAY,EAwEAH,EAAAI,yBAAA,GAvEAb,EAAA,IAAAjB,EAGA6B,EAAA3K,QAAA,oBACAU,MAAA,SAAAhS,QAAA,SAAAmc,GACA,IAAApK,EAAAoK,EAAAnK,MAAA,KACA9S,EAAA6S,EAAAqK,QAAAC,OACA,GAAAnd,EAAA,CACA,IAAA1D,EAAAuW,EAAA7C,KAAA,KAAAmN,OACAhB,EAAAhB,OAAAnb,EAAA1D,MAGA6f,IA6DA7T,EAAA8T,IAAA,gBAAAQ,IAAAQ,YAAA9U,EAAA6T,QAAA5gB,IAAA,iBACA,IAAAsgB,EAAA,aAAAe,IAAAP,SAAAO,EAAAS,aACArZ,EAAA,IAAAgY,EAAAH,EAAAvT,KAGAsU,EAAAU,QAAA,WACArZ,EAAA,IAAAK,UAAA,4BAGAsY,EAAAW,UAAA,WACAtZ,EAAA,IAAAK,UAAA,4BAGAsY,EAAAY,KAAAb,EAAA/b,OAAA+b,EAAAP,KAAA,GAEA,YAAAO,EAAAc,YACAb,EAAAc,iBAAA,EACO,SAAAf,EAAAc,cACPb,EAAAc,iBAAA,GAGA,iBAAAd,GAAAvC,EAAAE,OACAqC,EAAAe,aAAA,QAGAhB,EAAAR,QAAArb,QAAA,SAAAxE,EAAAJ,GACA0gB,EAAAgB,iBAAA1hB,EAAAI,KAGAsgB,EAAAiB,UAAA,IAAAlB,EAAAb,UAAA,KAAAa,EAAAb,cAGAxc,EAAA8a,MAAA0D,UAAA,EApaA,SAAA1C,EAAAlf,GAIA,GAHA,iBAAAA,IACAA,EAAAqU,OAAArU,IAEA,6BAAA0a,KAAA1a,GACA,UAAAoI,UAAA,0CAEA,OAAApI,EAAA6hB,cAGA,SAAA1C,EAAA/e,GAIA,MAHA,iBAAAA,IACAA,EAAAiU,OAAAjU,IAEAA,EAIA,SAAAof,EAAAD,GACA,IAAA5e,EAAA,CACA4C,KAAA,WACA,IAAAnD,EAAAmf,EAAAyB,QACA,OAAgBtd,UAAArD,IAAAD,aAUhB,OANA+d,EAAAvX,WACAjG,EAAAT,OAAAS,UAAA,WACA,OAAAA,IAIAA,EAGA,SAAAqe,EAAAiB,GACA3gB,KAAA2O,IAAA,GAEAgS,aAAAjB,EACAiB,EAAArb,QAAA,SAAAxE,EAAAJ,GACAV,KAAA2f,OAAAjf,EAAAI,IACOd,MACF6K,MAAA8I,QAAAgN,GACLA,EAAArb,QAAA,SAAA4R,GACAlX,KAAA2f,OAAAzI,EAAA,GAAAA,EAAA,KACOlX,MACF2gB,GACL1f,OAAAsL,oBAAAoU,GAAArb,QAAA,SAAA5E,GACAV,KAAA2f,OAAAjf,EAAAigB,EAAAjgB,KACOV,MA0DP,SAAAwiB,EAAAnC,GACA,GAAAA,EAAAoC,SACA,OAAAla,QAAAE,OAAA,IAAAK,UAAA,iBAEAuX,EAAAoC,UAAA,EAGA,SAAAC,EAAAC,GACA,WAAApa,QAAA,SAAAC,EAAAC,GACAka,EAAArB,OAAA,WACA9Y,EAAAma,EAAAxe,SAEAwe,EAAAb,QAAA,WACArZ,EAAAka,EAAA/Z,UAKA,SAAAga,EAAA7D,GACA,IAAA4D,EAAA,IAAAE,WACA9M,EAAA2M,EAAAC,GAEA,OADAA,EAAAG,kBAAA/D,GACAhJ,EAoBA,SAAAgN,EAAAxK,GACA,GAAAA,EAAA9S,MACA,OAAA8S,EAAA9S,MAAA,GAEA,IAAAud,EAAA,IAAAC,WAAA1K,EAAA2K,YAEA,OADAF,EAAA/U,IAAA,IAAAgV,WAAA1K,IACAyK,EAAAG,OAIA,SAAA5C,IA0FA,OAzFAvgB,KAAAyiB,UAAA,EAEAziB,KAAAojB,UAAA,SAAA/C,GAEA,GADArgB,KAAAsgB,UAAAD,EACAA,EAEO,oBAAAA,EACPrgB,KAAAqjB,UAAAhD,OACO,GAAAxB,EAAAE,MAAAC,KAAApf,UAAA0f,cAAAe,GACPrgB,KAAAsjB,UAAAjD,OACO,GAAAxB,EAAAI,UAAAsE,SAAA3jB,UAAA0f,cAAAe,GACPrgB,KAAAwjB,cAAAnD,OACO,GAAAxB,EAAAC,cAAA2E,gBAAA7jB,UAAA0f,cAAAe,GACPrgB,KAAAqjB,UAAAhD,EAAAhc,gBACO,GAAAwa,EAAAK,aAAAL,EAAAE,MAAAK,EAAAiB,GACPrgB,KAAA0jB,iBAAAX,EAAA1C,EAAA8C,QAEAnjB,KAAAsgB,UAAA,IAAAtB,KAAA,CAAAhf,KAAA0jB,uBACO,KAAA7E,EAAAK,cAAAM,YAAA5f,UAAA0f,cAAAe,KAAAd,EAAAc,GAGP,UAAAxZ,MAAA,6BAFA7G,KAAA0jB,iBAAAX,EAAA1C,QAdArgB,KAAAqjB,UAAA,GAmBArjB,KAAA2gB,QAAA5gB,IAAA,kBACA,iBAAAsgB,EACArgB,KAAA2gB,QAAA1S,IAAA,2CACSjO,KAAAsjB,WAAAtjB,KAAAsjB,UAAAzd,KACT7F,KAAA2gB,QAAA1S,IAAA,eAAAjO,KAAAsjB,UAAAzd,MACSgZ,EAAAC,cAAA2E,gBAAA7jB,UAAA0f,cAAAe,IACTrgB,KAAA2gB,QAAA1S,IAAA,oEAKA4Q,EAAAE,OACA/e,KAAA+e,KAAA,WACA,IAAA4E,EAAAnB,EAAAxiB,MACA,GAAA2jB,EACA,OAAAA,EAGA,GAAA3jB,KAAAsjB,UACA,OAAA/a,QAAAC,QAAAxI,KAAAsjB,WACS,GAAAtjB,KAAA0jB,iBACT,OAAAnb,QAAAC,QAAA,IAAAwW,KAAA,CAAAhf,KAAA0jB,oBACS,GAAA1jB,KAAAwjB,cACT,UAAA3c,MAAA,wCAEA,OAAA0B,QAAAC,QAAA,IAAAwW,KAAA,CAAAhf,KAAAqjB,cAIArjB,KAAAkf,YAAA,WACA,OAAAlf,KAAA0jB,iBACAlB,EAAAxiB,OAAAuI,QAAAC,QAAAxI,KAAA0jB,kBAEA1jB,KAAA+e,OAAA7a,KAAA0e,KAKA5iB,KAAA4jB,KAAA,WACA,IA3FA7E,EACA4D,EACA5M,EAyFA4N,EAAAnB,EAAAxiB,MACA,GAAA2jB,EACA,OAAAA,EAGA,GAAA3jB,KAAAsjB,UACA,OAjGAvE,EAiGA/e,KAAAsjB,UAhGAX,EAAA,IAAAE,WACA9M,EAAA2M,EAAAC,GACAA,EAAAkB,WAAA9E,GACAhJ,EA8FO,GAAA/V,KAAA0jB,iBACP,OAAAnb,QAAAC,QA5FA,SAAA+P,GAIA,IAHA,IAAAyK,EAAA,IAAAC,WAAA1K,GACAuL,EAAA,IAAAjZ,MAAAmY,EAAAre,QAEA2B,EAAA,EAAmBA,EAAA0c,EAAAre,OAAiB2B,IACpCwd,EAAAxd,GAAAyO,OAAAC,aAAAgO,EAAA1c,IAEA,OAAAwd,EAAAtP,KAAA,IAqFAuP,CAAA/jB,KAAA0jB,mBACO,GAAA1jB,KAAAwjB,cACP,UAAA3c,MAAA,wCAEA,OAAA0B,QAAAC,QAAAxI,KAAAqjB,YAIAxE,EAAAI,WACAjf,KAAAif,SAAA,WACA,OAAAjf,KAAA4jB,OAAA1f,KAAA8S,KAIAhX,KAAAgkB,KAAA,WACA,OAAAhkB,KAAA4jB,OAAA1f,KAAA4S,KAAAC,QAGA/W,KAWA,SAAAogB,EAAA3M,EAAA3G,GAEA,IAPA1H,EACA6e,EAMA5D,GADAvT,KAAA,IACAuT,KAEA,GAAA5M,aAAA2M,EAAA,CACA,GAAA3M,EAAAgP,SACA,UAAA3Z,UAAA,gBAEA9I,KAAA4gB,IAAAnN,EAAAmN,IACA5gB,KAAAiiB,YAAAxO,EAAAwO,YACAnV,EAAA6T,UACA3gB,KAAA2gB,QAAA,IAAAjB,EAAAjM,EAAAkN,UAEA3gB,KAAAoF,OAAAqO,EAAArO,OACApF,KAAAkkB,KAAAzQ,EAAAyQ,KACA7D,GAAA,MAAA5M,EAAA6M,YACAD,EAAA5M,EAAA6M,UACA7M,EAAAgP,UAAA,QAGAziB,KAAA4gB,IAAA7L,OAAAtB,GAWA,GARAzT,KAAAiiB,YAAAnV,EAAAmV,aAAAjiB,KAAAiiB,aAAA,QACAnV,EAAA6T,SAAA3gB,KAAA2gB,UACA3gB,KAAA2gB,QAAA,IAAAjB,EAAA5S,EAAA6T,UAEA3gB,KAAAoF,QAhCAA,EAgCA0H,EAAA1H,QAAApF,KAAAoF,QAAA,MA/BA6e,EAAA7e,EAAA+e,cACA/J,EAAA+D,QAAA8F,IAAA,EAAAA,EAAA7e,GA+BApF,KAAAkkB,KAAApX,EAAAoX,MAAAlkB,KAAAkkB,MAAA,KACAlkB,KAAAokB,SAAA,MAEA,QAAApkB,KAAAoF,QAAA,SAAApF,KAAAoF,SAAAib,EACA,UAAAvX,UAAA,6CAEA9I,KAAAojB,UAAA/C,GAOA,SAAArJ,EAAAqJ,GACA,IAAAgE,EAAA,IAAAd,SASA,OARAlD,EAAAsB,OAAArK,MAAA,KAAAhS,QAAA,SAAAsP,GACA,GAAAA,EAAA,CACA,IAAA0C,EAAA1C,EAAA0C,MAAA,KACA5W,EAAA4W,EAAAoK,QAAA9K,QAAA,WACA9V,EAAAwW,EAAA9C,KAAA,KAAAoC,QAAA,WACAyN,EAAA1E,OAAA2E,mBAAA5jB,GAAA4jB,mBAAAxjB,OAGAujB,EAqBA,SAAA7D,EAAA+D,EAAAzX,GACAA,IACAA,EAAA,IAGA9M,KAAA6F,KAAA,UACA7F,KAAAygB,YAAA1f,IAAA+L,EAAA2T,OAAA,IAAA3T,EAAA2T,OACAzgB,KAAAwkB,GAAAxkB,KAAAygB,QAAA,KAAAzgB,KAAAygB,OAAA,IACAzgB,KAAA0gB,WAAA,eAAA5T,IAAA4T,WAAA,KACA1gB,KAAA2gB,QAAA,IAAAjB,EAAA5S,EAAA6T,SACA3gB,KAAA4gB,IAAA9T,EAAA8T,KAAA,GACA5gB,KAAAojB,UAAAmB,IAnYA,CAidC,oBAAAzgB,UAAA9D,yCCjdD,SAAAykB,EAAArkB,GAIA,IAAAskB,EAAAhb,WAEA,SAAAgB,KASA,SAAAnC,EAAAL,GACA,KAAAlI,gBAAAuI,GACA,UAAAO,UAAA,wCACA,sBAAAZ,EAAA,UAAAY,UAAA,kBACA9I,KAAA2kB,OAAA,EACA3kB,KAAA4kB,UAAA,EACA5kB,KAAA6kB,YAAA9jB,EACAf,KAAA8kB,WAAA,GAEAC,EAAA7c,EAAAlI,MAGA,SAAAkG,EAAApC,EAAAkhB,GACA,SAAAlhB,EAAA6gB,QACA7gB,IAAA+gB,OAEA,IAAA/gB,EAAA6gB,QAIA7gB,EAAA8gB,UAAA,EACArc,EAAA0c,aAAA,WACA,IAAAC,EAAA,IAAAphB,EAAA6gB,OAAAK,EAAAG,YAAAH,EAAAI,WACA,UAAAF,EAAA,CAIA,IAAAG,EACA,IACAA,EAAAH,EAAAphB,EAAA+gB,QACK,MAAA3kB,GAEL,YADAuI,EAAAuc,EAAAjP,QAAA7V,GAGAsI,EAAAwc,EAAAjP,QAAAsP,QAVA,IAAAvhB,EAAA6gB,OAAAnc,EAAAC,GAAAuc,EAAAjP,QAAAjS,EAAA+gB,WAPA/gB,EAAAghB,WAAArgB,KAAAugB,GAqBA,SAAAxc,EAAA1E,EAAAwhB,GACA,IAEA,GAAAA,IAAAxhB,EACA,UAAAgF,UAAA,6CACA,GACAwc,IACA,iBAAAA,GAAA,mBAAAA,GACA,CACA,IAAAphB,EAAAohB,EAAAphB,KACA,GAAAohB,aAAA/c,EAIA,OAHAzE,EAAA6gB,OAAA,EACA7gB,EAAA+gB,OAAAS,OACAC,EAAAzhB,GAEO,sBAAAI,EAEP,YADA6gB,GA5DA7c,EA4DAhE,EA5DA8b,EA4DAsF,EA3DA,WACApd,EAAA6C,MAAAiV,EAAAlV,aA0DAhH,GAIAA,EAAA6gB,OAAA,EACA7gB,EAAA+gB,OAAAS,EACAC,EAAAzhB,GACG,MAAA5D,GACHuI,EAAA3E,EAAA5D,GApEA,IAAAgI,EAAA8X,EAwEA,SAAAvX,EAAA3E,EAAAwhB,GACAxhB,EAAA6gB,OAAA,EACA7gB,EAAA+gB,OAAAS,EACAC,EAAAzhB,GAGA,SAAAyhB,EAAAzhB,GACA,IAAAA,EAAA6gB,QAAA,IAAA7gB,EAAAghB,WAAAngB,QACA4D,EAAA0c,aAAA,WACAnhB,EAAA8gB,UACArc,EAAAid,sBAAA1hB,EAAA+gB,UAKA,QAAAve,EAAA,EAAA8D,EAAAtG,EAAAghB,WAAAngB,OAA+C2B,EAAA8D,EAAS9D,IACxDJ,EAAApC,IAAAghB,WAAAxe,IAEAxC,EAAAghB,WAAA,KAGA,SAAAW,EAAAN,EAAAC,EAAArP,GACA/V,KAAAmlB,YAAA,mBAAAA,IAAA,KACAnlB,KAAAolB,WAAA,mBAAAA,IAAA,KACAplB,KAAA+V,UASA,SAAAgP,EAAA7c,EAAApE,GACA,IAAAM,GAAA,EACA,IACA8D,EACA,SAAApH,GACAsD,IACAA,GAAA,EACAoE,EAAA1E,EAAAhD,KAEA,SAAA4kB,GACAthB,IACAA,GAAA,EACAqE,EAAA3E,EAAA4hB,MAGG,MAAAjH,GACH,GAAAra,EAAA,OACAA,GAAA,EACAqE,EAAA3E,EAAA2a,IAIAlW,EAAA3I,UAAA,eAAAwlB,GACA,OAAAplB,KAAAkE,KAAA,KAAAkhB,IAGA7c,EAAA3I,UAAAsE,KAAA,SAAAihB,EAAAC,GACA,IAAAO,EAAA,IAAA3lB,KAAA8C,YAAA4H,GAGA,OADAxE,EAAAlG,KAAA,IAAAylB,EAAAN,EAAAC,EAAAO,IACAA,GAGApd,EAAA3I,UAAA,iBAAAgO,GACA,IAAA9K,EAAA9C,KAAA8C,YACA,OAAA9C,KAAAkE,KACA,SAAApD,GACA,OAAAgC,EAAA0F,QAAAoF,KAAA1J,KAAA,WACA,OAAApD,KAGA,SAAA4kB,GACA,OAAA5iB,EAAA0F,QAAAoF,KAAA1J,KAAA,WACA,OAAApB,EAAA2F,OAAAid,QAMAnd,EAAAmG,IAAA,SAAAkX,GACA,WAAArd,EAAA,SAAAC,EAAAC,GACA,IAAAmd,QAAA,IAAAA,EAAAjhB,OACA,UAAAmE,UAAA,gCACA,IAAA8B,EAAAC,MAAAjL,UAAA6F,MAAAjD,KAAAojB,GACA,OAAAhb,EAAAjG,OAAA,OAAA6D,EAAA,IACA,IAAAqd,EAAAjb,EAAAjG,OAEA,SAAA+X,EAAApW,EAAA4H,GACA,IACA,GAAAA,IAAA,iBAAAA,GAAA,mBAAAA,GAAA,CACA,IAAAhK,EAAAgK,EAAAhK,KACA,sBAAAA,EAQA,YAPAA,EAAA1B,KACA0L,EACA,SAAAA,GACAwO,EAAApW,EAAA4H,IAEAzF,GAKAmC,EAAAtE,GAAA4H,EACA,KAAA2X,GACArd,EAAAoC,GAEO,MAAA6T,GACPhW,EAAAgW,IAIA,QAAAnY,EAAA,EAAmBA,EAAAsE,EAAAjG,OAAiB2B,IACpCoW,EAAApW,EAAAsE,EAAAtE,OAKAiC,EAAAC,QAAA,SAAA1H,GACA,OAAAA,GAAA,iBAAAA,KAAAgC,cAAAyF,EACAzH,EAGA,IAAAyH,EAAA,SAAAC,GACAA,EAAA1H,MAIAyH,EAAAE,OAAA,SAAA3H,GACA,WAAAyH,EAAA,SAAAC,EAAAC,GACAA,EAAA3H,MAIAyH,EAAAud,KAAA,SAAAvjB,GACA,WAAAgG,EAAA,SAAAC,EAAAC,GACA,QAAAnC,EAAA,EAAA8D,EAAA7H,EAAAoC,OAAwC2B,EAAA8D,EAAS9D,IACjD/D,EAAA+D,GAAApC,KAAAsE,EAAAC,MAMAF,EAAA0c,aACA,mBAAAR,GACA,SAAAvc,GACAuc,EAAAvc,KAEA,SAAAA,GACAwc,EAAAxc,EAAA,IAGAK,EAAAid,sBAAA,SAAApd,GACA,oBAAAmH,kBACAA,QAAAwW,KAAA,wCAAA3d,IAIA,IAAA4d,EAAA,WAIA,uBAAAliB,KACA,OAAAA,KAEA,uBAAAqX,OACA,OAAAA,OAEA,YAAA/a,EACA,OAAAA,EAEA,UAAAyG,MAAA,kCAbA,GAgBAmf,EAAAzd,UACAyd,EAAAzd,wEClQA,SAAAnI,GAAA,IAAA6lB,OAAA,IAAA7lB,MACA,oBAAA0D,YACAqX,OACApQ,EAAApL,SAAAC,UAAAmL,MAiBA,SAAAmb,EAAAC,EAAAC,GACApmB,KAAAqmB,IAAAF,EACAnmB,KAAAsmB,SAAAF,EAfAjmB,EAAAuJ,WAAA,WACA,WAAAwc,EAAAnb,EAAAvI,KAAAkH,WAAAuc,EAAAnb,WAAAnB,eAEAxJ,EAAAomB,YAAA,WACA,WAAAL,EAAAnb,EAAAvI,KAAA+jB,YAAAN,EAAAnb,WAAA0b,gBAEArmB,EAAAwJ,aACAxJ,EAAAqmB,cAAA,SAAArc,GACAA,GACAA,EAAA8P,SAQAiM,EAAAtmB,UAAA6mB,MAAAP,EAAAtmB,UAAA8mB,IAAA,aACAR,EAAAtmB,UAAAqa,MAAA,WACAja,KAAAsmB,SAAA9jB,KAAAyjB,EAAAjmB,KAAAqmB,MAIAlmB,EAAAwmB,OAAA,SAAAC,EAAAC,GACAld,aAAAid,EAAAE,gBACAF,EAAAG,aAAAF,GAGA1mB,EAAA6mB,SAAA,SAAAJ,GACAjd,aAAAid,EAAAE,gBACAF,EAAAG,cAAA,GAGA5mB,EAAA8mB,aAAA9mB,EAAA+mB,OAAA,SAAAN,GACAjd,aAAAid,EAAAE,gBAEA,IAAAD,EAAAD,EAAAG,aACAF,GAAA,IACAD,EAAAE,eAAApd,WAAA,WACAkd,EAAAO,YACAP,EAAAO,cACKN,KAKLrnB,EAAQ,KAIRW,EAAAskB,aAAA,oBAAA3gB,WAAA2gB,mBACA,IAAArkB,KAAAqkB,cACAzkB,WAAAykB,aACAtkB,EAAAinB,eAAA,oBAAAtjB,WAAAsjB,qBACA,IAAAhnB,KAAAgnB,gBACApnB,WAAAonB,wDC9DA,SAAAhnB,EAAAiJ,IAAA,SAAAjJ,EAAAW,GACA,aAEA,IAAAX,EAAAqkB,aAAA,CAIA,IAIA4C,EA6HAC,EAZAC,EArBAC,EACAC,EAjGAC,EAAA,EACAC,EAAA,GACAC,GAAA,EACAC,EAAAznB,EAAA0nB,SAoJAC,EAAA9mB,OAAAoB,gBAAApB,OAAAoB,eAAAjC,GACA2nB,OAAAre,WAAAqe,EAAA3nB,EAGU,qBAAV,GAAUiE,SAAA7B,KAAApC,EAAAiJ,SApFVge,EAAA,SAAAnhB,GACAmD,EAAAsB,SAAA,WAA0Cqd,EAAA9hB,OAI1C,WAGA,GAAA9F,EAAA6nB,cAAA7nB,EAAA8nB,cAAA,CACA,IAAAC,GAAA,EACAC,EAAAhoB,EAAAioB,UAMA,OALAjoB,EAAAioB,UAAA,WACAF,GAAA,GAEA/nB,EAAA6nB,YAAA,QACA7nB,EAAAioB,UAAAD,EACAD,GAwEKG,GAIAloB,EAAAmoB,iBA9CLhB,EAAA,IAAAgB,gBACAC,MAAAH,UAAA,SAAAI,GAEAT,EADAS,EAAAhS,OAIA4Q,EAAA,SAAAnhB,GACAqhB,EAAAmB,MAAAT,YAAA/hB,KA2CK2hB,GAAA,uBAAAA,EAAAc,cAAA,WAtCLrB,EAAAO,EAAAe,gBACAvB,EAAA,SAAAnhB,GAGA,IAAA2iB,EAAAhB,EAAAc,cAAA,UACAE,EAAAC,mBAAA,WACAd,EAAA9hB,GACA2iB,EAAAC,mBAAA,KACAxB,EAAAyB,YAAAF,GACAA,EAAA,MAEAvB,EAAA0B,YAAAH,KAKAxB,EAAA,SAAAnhB,GACAwD,WAAAse,EAAA,EAAA9hB,KAlDAshB,EAAA,gBAAAvL,KAAAgN,SAAA,IACAxB,EAAA,SAAAgB,GACAA,EAAA/S,SAAAtV,GACA,iBAAAqoB,EAAAhS,MACA,IAAAgS,EAAAhS,KAAA0H,QAAAqJ,IACAQ,GAAAS,EAAAhS,KAAAhR,MAAA+hB,EAAA7iB,UAIAvE,EAAA8oB,iBACA9oB,EAAA8oB,iBAAA,UAAAzB,GAAA,GAEArnB,EAAA+oB,YAAA,YAAA1B,GAGAJ,EAAA,SAAAnhB,GACA9F,EAAA6nB,YAAAT,EAAAthB,EAAA,OAgEA6hB,EAAAtD,aA1KA,SAAA7W,GAEA,mBAAAA,IACAA,EAAA,IAAAjO,SAAA,GAAAiO,IAIA,IADA,IAAAhD,EAAA,IAAAC,MAAAC,UAAAnG,OAAA,GACA2B,EAAA,EAAqBA,EAAAsE,EAAAjG,OAAiB2B,IACtCsE,EAAAtE,GAAAwE,UAAAxE,EAAA,GAGA,IAAAuT,EAAA,CAAkBjM,WAAAhD,QAGlB,OAFA+c,EAAAD,GAAA7N,EACAwN,EAAAK,GACAA,KA6JAK,EAAAX,iBA1JA,SAAAA,EAAAlhB,UACAyhB,EAAAzhB,GAyBA,SAAA8hB,EAAA9hB,GAGA,GAAA0hB,EAGAle,WAAAse,EAAA,EAAA9hB,OACS,CACT,IAAA2T,EAAA8N,EAAAzhB,GACA,GAAA2T,EAAA,CACA+N,GAAA,EACA,KAjCA,SAAA/N,GACA,IAAAjM,EAAAiM,EAAAjM,SACAhD,EAAAiP,EAAAjP,KACA,OAAAA,EAAAjG,QACA,OACAiJ,IACA,MACA,OACAA,EAAAhD,EAAA,IACA,MACA,OACAgD,EAAAhD,EAAA,GAAAA,EAAA,IACA,MACA,OACAgD,EAAAhD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MACA,QACAgD,EAAA7C,MAAAhK,EAAA6J,IAiBAP,CAAAwP,GACiB,QACjBuN,EAAAlhB,GACA0hB,GAAA,MAvEA,CAyLC,oBAAA9jB,UAAA,IAAA1D,EAAAJ,KAAAI,EAAA0D,qDCzLDtE,EAAQ,IACRiB,EAAAN,QAAiBX,EAAQ,IAAqBqL,MAAAue,0BCD9C5pB,EAAQ,KACRiB,EAAAN,QAAiBX,EAAQ,IAAqBqL,MAAAwe,4CCC9C,IAAAC,EAAc9pB,EAAQ,IACtB+pB,EAAY/pB,EAAQ,GAARA,CAA0B,GACtCgqB,EAAA,YACAC,GAAA,EAEAD,IAAA,IAAA3e,MAAA,GAAA2e,GAAA,WAA0CC,GAAA,IAC1CH,IAAAI,EAAAJ,EAAAK,EAAAF,EAAA,SACAJ,UAAA,SAAAO,GACA,OAAAL,EAAAvpB,KAAA4pB,EAAA9e,UAAAnG,OAAA,EAAAmG,UAAA,QAAA/J,MAGAvB,EAAQ,GAARA,CAA+BgqB,wBCb/BhqB,EAAQ,IACRiB,EAAAN,QAAiBX,EAAQ,IAAqByB,OAAA4oB,4BCD9CrqB,EAAQ,KACRiB,EAAAN,QAAiBX,EAAQ,IAAqBuV,OAAA+U,6CCC9C,IAAAR,EAAc9pB,EAAQ,IACtBuqB,EAAevqB,EAAQ,IACvByG,EAAczG,EAAQ,IAEtBwqB,EAAA,cAEAV,IAAAI,EAAAJ,EAAAK,EAAgCnqB,EAAQ,GAARA,CAHhC,cAG4D,UAC5DsqB,WAAA,SAAAG,GACA,IAAAC,EAAAjkB,EAAAjG,KAAAiqB,EALA,cAMAE,EAAAJ,EAAA9N,KAAAmO,IAAAtf,UAAAnG,OAAA,EAAAmG,UAAA,QAAA/J,EAAAmpB,EAAAvlB,SACA0lB,EAAAtV,OAAAkV,GACA,OAAAD,EACAA,EAAAxnB,KAAA0nB,EAAAG,EAAAF,GACAD,EAAAzkB,MAAA0kB,IAAAE,EAAA1lB,UAAA0lB,0BCfA7qB,EAAQ,KACRiB,EAAAN,QAAiBX,EAAQ,IAAqBuV,OAAAuV,4BCD9C,IAAAhB,EAAc9pB,EAAQ,IAEtB8pB,IAAAI,EAAA,UAEAY,OAAU9qB,EAAQ,yCCHlB,IAAA+qB,EAAgB/qB,EAAQ,IACxBgrB,EAAchrB,EAAQ,IAEtBiB,EAAAN,QAAA,SAAAsqB,GACA,IAAAhY,EAAAsC,OAAAyV,EAAAxqB,OACA0c,EAAA,GACAxD,EAAAqR,EAAAE,GACA,GAAAvR,EAAA,GAAAA,GAAAwR,IAAA,MAAA1J,WAAA,2BACA,KAAQ9H,EAAA,GAAMA,KAAA,KAAAzG,MAAA,EAAAyG,IAAAwD,GAAAjK,GACd,OAAAiK,wBCVAld,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRiB,EAAAN,QAAiBX,EAAQ,IAAqBoB,yCCF9C,IAAAR,EAAaZ,EAAQ,GACrBugB,EAAUvgB,EAAQ,IAClBmrB,EAAkBnrB,EAAQ,IAC1B8pB,EAAc9pB,EAAQ,IACtBorB,EAAeprB,EAAQ,IACvBqrB,EAAWrrB,EAAQ,KAASgqB,IAC5BsB,EAAatrB,EAAQ,IACrBurB,EAAavrB,EAAQ,IACrBwrB,EAAqBxrB,EAAQ,IAC7ByrB,EAAUzrB,EAAQ,IAClB0rB,EAAU1rB,EAAQ,GAClBe,EAAaf,EAAQ,KACrB2rB,EAAgB3rB,EAAQ,KACxB4rB,EAAe5rB,EAAQ,KACvBmU,EAAcnU,EAAQ,IACtB6rB,EAAe7rB,EAAQ,GACvB8rB,EAAe9rB,EAAQ,IACvB+rB,EAAgB/rB,EAAQ,IACxBgsB,EAAkBhsB,EAAQ,IAC1BisB,EAAiBjsB,EAAQ,IACzBksB,EAAclsB,EAAQ,IACtBmsB,EAAcnsB,EAAQ,KACtBosB,EAAYpsB,EAAQ,KACpBqsB,EAAUrsB,EAAQ,IAClB6M,EAAY7M,EAAQ,IACpBssB,EAAAF,EAAAnsB,EACAF,EAAAssB,EAAApsB,EACAssB,EAAAJ,EAAAlsB,EACAkB,EAAAP,EAAAQ,OACAorB,EAAA5rB,EAAA0W,KACAmV,EAAAD,KAAAvQ,UAEAyQ,EAAAhB,EAAA,WACAiB,EAAAjB,EAAA,eACAkB,EAAA,GAAeC,qBACfC,EAAAvB,EAAA,mBACAwB,EAAAxB,EAAA,WACAyB,EAAAzB,EAAA,cACA0B,EAAAxrB,OAAA,UACAyrB,EAAA,mBAAA/rB,EACAgsB,EAAAvsB,EAAAusB,QAEAC,GAAAD,MAAA,YAAAA,EAAA,UAAAE,UAGAC,EAAAnC,GAAAG,EAAA,WACA,OAEG,GAFHY,EAAAnsB,EAAA,GAAsB,KACtBQ,IAAA,WAAsB,OAAAR,EAAAS,KAAA,KAAuBc,MAAA,IAAW8X,MACrDA,IACF,SAAAmU,EAAAvoB,EAAAwoB,GACD,IAAAC,EAAAnB,EAAAW,EAAAjoB,GACAyoB,UAAAR,EAAAjoB,GACAjF,EAAAwtB,EAAAvoB,EAAAwoB,GACAC,GAAAF,IAAAN,GAAAltB,EAAAktB,EAAAjoB,EAAAyoB,IACC1tB,EAEDsC,EAAA,SAAAqrB,GACA,IAAAC,EAAAZ,EAAAW,GAAAxB,EAAA/qB,EAAA,WAEA,OADAwsB,EAAAC,GAAAF,EACAC,GAGAE,EAAAX,GAAA,iBAAA/rB,EAAAU,SAAA,SAAA0rB,GACA,uBAAAA,GACC,SAAAA,GACD,OAAAA,aAAApsB,GAGA2sB,EAAA,SAAAP,EAAAvoB,EAAAwoB,GAKA,OAJAD,IAAAN,GAAAa,EAAAd,EAAAhoB,EAAAwoB,GACA3B,EAAA0B,GACAvoB,EAAAgnB,EAAAhnB,GAAA,GACA6mB,EAAA2B,GACAjN,EAAAwM,EAAA/nB,IACAwoB,EAAA7e,YAIA4R,EAAAgN,EAAAb,IAAAa,EAAAb,GAAA1nB,KAAAuoB,EAAAb,GAAA1nB,IAAA,GACAwoB,EAAAtB,EAAAsB,EAAA,CAAsB7e,WAAAsd,EAAA,UAJtB1L,EAAAgN,EAAAb,IAAA3sB,EAAAwtB,EAAAb,EAAAT,EAAA,OACAsB,EAAAb,GAAA1nB,IAAA,GAIKsoB,EAAAC,EAAAvoB,EAAAwoB,IACFztB,EAAAwtB,EAAAvoB,EAAAwoB,IAEHO,EAAA,SAAAR,EAAArD,GACA2B,EAAA0B,GAKA,IAJA,IAGAvoB,EAHAF,EAAA8mB,EAAA1B,EAAA6B,EAAA7B,IACApjB,EAAA,EACAknB,EAAAlpB,EAAAK,OAEA6oB,EAAAlnB,GAAAgnB,EAAAP,EAAAvoB,EAAAF,EAAAgC,KAAAojB,EAAAllB,IACA,OAAAuoB,GAKAU,EAAA,SAAAjpB,GACA,IAAAkpB,EAAAtB,EAAA5pB,KAAAxC,KAAAwE,EAAAgnB,EAAAhnB,GAAA,IACA,QAAAxE,OAAAysB,GAAA1M,EAAAwM,EAAA/nB,KAAAub,EAAAyM,EAAAhoB,QACAkpB,IAAA3N,EAAA/f,KAAAwE,KAAAub,EAAAwM,EAAA/nB,IAAAub,EAAA/f,KAAAksB,IAAAlsB,KAAAksB,GAAA1nB,KAAAkpB,IAEAC,EAAA,SAAAZ,EAAAvoB,GAGA,GAFAuoB,EAAAxB,EAAAwB,GACAvoB,EAAAgnB,EAAAhnB,GAAA,GACAuoB,IAAAN,IAAA1M,EAAAwM,EAAA/nB,IAAAub,EAAAyM,EAAAhoB,GAAA,CACA,IAAAwoB,EAAAlB,EAAAiB,EAAAvoB,GAEA,OADAwoB,IAAAjN,EAAAwM,EAAA/nB,IAAAub,EAAAgN,EAAAb,IAAAa,EAAAb,GAAA1nB,KAAAwoB,EAAA7e,YAAA,GACA6e,IAEAY,EAAA,SAAAb,GAKA,IAJA,IAGAvoB,EAHAqpB,EAAA9B,EAAAR,EAAAwB,IACA5oB,EAAA,GACAmC,EAAA,EAEAunB,EAAAlpB,OAAA2B,GACAyZ,EAAAwM,EAAA/nB,EAAAqpB,EAAAvnB,OAAA9B,GAAA0nB,GAAA1nB,GAAAqmB,GAAA1mB,EAAAM,KAAAD,GACG,OAAAL,GAEH2pB,EAAA,SAAAf,GAMA,IALA,IAIAvoB,EAJAupB,EAAAhB,IAAAN,EACAoB,EAAA9B,EAAAgC,EAAAvB,EAAAjB,EAAAwB,IACA5oB,EAAA,GACAmC,EAAA,EAEAunB,EAAAlpB,OAAA2B,IACAyZ,EAAAwM,EAAA/nB,EAAAqpB,EAAAvnB,OAAAynB,IAAAhO,EAAA0M,EAAAjoB,IAAAL,EAAAM,KAAA8nB,EAAA/nB,IACG,OAAAL,GAIHuoB,IAYA9B,GAXAjqB,EAAA,WACA,GAAAX,gBAAAW,EAAA,MAAAmI,UAAA,gCACA,IAAAokB,EAAAjC,EAAAngB,UAAAnG,OAAA,EAAAmG,UAAA,QAAA/J,GACAitB,EAAA,SAAAltB,GACAd,OAAAysB,GAAAuB,EAAAxrB,KAAAgqB,EAAA1rB,GACAif,EAAA/f,KAAAksB,IAAAnM,EAAA/f,KAAAksB,GAAAgB,KAAAltB,KAAAksB,GAAAgB,IAAA,GACAJ,EAAA9sB,KAAAktB,EAAAzB,EAAA,EAAA3qB,KAGA,OADA6pB,GAAAiC,GAAAE,EAAAL,EAAAS,EAAA,CAAgEptB,cAAA,EAAAmO,IAAA+f,IAChEnsB,EAAAqrB,KAEA,gCACA,OAAAltB,KAAAotB,KAGAxB,EAAAnsB,EAAAkuB,EACA9B,EAAApsB,EAAA6tB,EACE9tB,EAAQ,KAAgBC,EAAAksB,EAAAlsB,EAAAmuB,EACxBpuB,EAAQ,IAAeC,EAAAguB,EACvBjuB,EAAQ,IAAgBC,EAAAquB,EAE1BnD,IAAsBnrB,EAAQ,KAC9BorB,EAAA6B,EAAA,uBAAAgB,GAAA,GAGAltB,EAAAd,EAAA,SAAAiB,GACA,OAAAmB,EAAAqpB,EAAAxqB,MAIA4oB,IAAA2E,EAAA3E,EAAA7Q,EAAA6Q,EAAAK,GAAA+C,EAAA,CAA0D9rB,OAAAD,IAE1D,QAAAutB,EAAA,iHAGA5W,MAAA,KAAAgC,GAAA,EAAoB4U,EAAAvpB,OAAA2U,IAAuB4R,EAAAgD,EAAA5U,OAE3C,QAAA6U,GAAA9hB,EAAA6e,EAAAkD,OAAAzV,GAAA,EAAoDwV,GAAAxpB,OAAAgU,IAA6BwS,EAAAgD,GAAAxV,OAEjF2Q,IAAA+E,EAAA/E,EAAAK,GAAA+C,EAAA,UAEA4B,IAAA,SAAA9pB,GACA,OAAAub,EAAAuM,EAAA9nB,GAAA,IACA8nB,EAAA9nB,GACA8nB,EAAA9nB,GAAA7D,EAAA6D,IAGA+pB,OAAA,SAAApB,GACA,IAAAE,EAAAF,GAAA,MAAArkB,UAAAqkB,EAAA,qBACA,QAAA3oB,KAAA8nB,EAAA,GAAAA,EAAA9nB,KAAA2oB,EAAA,OAAA3oB,GAEAgqB,UAAA,WAA0B5B,GAAA,GAC1B6B,UAAA,WAA0B7B,GAAA,KAG1BtD,IAAA+E,EAAA/E,EAAAK,GAAA+C,EAAA,UAEA9pB,OA/FA,SAAAmqB,EAAArD,GACA,YAAA3oB,IAAA2oB,EAAAgC,EAAAqB,GAAAQ,EAAA7B,EAAAqB,GAAArD,IAgGAlpB,eAAA8sB,EAEAoB,iBAAAnB,EAEAoB,yBAAAhB,EAEAphB,oBAAAqhB,EAEAgB,sBAAAd,IAIA9B,GAAA1C,IAAA+E,EAAA/E,EAAAK,IAAA+C,GAAA5B,EAAA,WACA,IAAAuD,EAAA1tB,IAIA,gBAAAsrB,EAAA,CAAAoC,KAA2D,MAA3DpC,EAAA,CAAoDrT,EAAAyV,KAAe,MAAApC,EAAAhrB,OAAAotB,OAClE,QACD5S,UAAA,SAAAsR,GAIA,IAHA,IAEA8B,EAAAC,EAFAlkB,EAAA,CAAAmiB,GACAzmB,EAAA,EAEAwE,UAAAnG,OAAA2B,GAAAsE,EAAAnG,KAAAqG,UAAAxE,MAEA,GADAwoB,EAAAD,EAAAjkB,EAAA,IACA0gB,EAAAuD,SAAA9tB,IAAAgsB,KAAAM,EAAAN,GAMA,OALApZ,EAAAkb,OAAA,SAAArqB,EAAA1D,GAEA,GADA,mBAAAguB,IAAAhuB,EAAAguB,EAAAtsB,KAAAxC,KAAAwE,EAAA1D,KACAusB,EAAAvsB,GAAA,OAAAA,IAEA8J,EAAA,GAAAikB,EACA5C,EAAAlhB,MAAAihB,EAAAphB,MAKAjK,EAAA,UAAAwrB,IAAoC3sB,EAAQ,GAARA,CAAiBmB,EAAA,UAAAwrB,EAAAxrB,EAAA,UAAAouB,SAErD/D,EAAArqB,EAAA,UAEAqqB,EAAA/O,KAAA,WAEA+O,EAAA5qB,EAAA0W,KAAA,gCCzOA,IAAA+T,EAAWrrB,EAAQ,GAARA,CAAgB,QAC3B8rB,EAAe9rB,EAAQ,IACvBugB,EAAUvgB,EAAQ,IAClBwvB,EAAcxvB,EAAQ,IAAcC,EACpC0mB,EAAA,EACA8I,EAAAhuB,OAAAguB,cAAA,WACA,UAEAC,GAAc1vB,EAAQ,GAARA,CAAkB,WAChC,OAAAyvB,EAAAhuB,OAAAkuB,kBAAA,OAEAC,EAAA,SAAArC,GACAiC,EAAAjC,EAAAlC,EAAA,CAAqB/pB,MAAA,CACrBwF,EAAA,OAAA6f,EACAkJ,EAAA,OAgCAC,EAAA7uB,EAAAN,QAAA,CACAqpB,IAAAqB,EACA0E,MAAA,EACAC,QAhCA,SAAAzC,EAAAnqB,GAEA,IAAA0oB,EAAAyB,GAAA,uBAAAA,KAAA,iBAAAA,EAAA,SAAAA,EACA,IAAAhN,EAAAgN,EAAAlC,GAAA,CAEA,IAAAoE,EAAAlC,GAAA,UAEA,IAAAnqB,EAAA,UAEAwsB,EAAArC,GAEG,OAAAA,EAAAlC,GAAAvkB,GAsBHmpB,QApBA,SAAA1C,EAAAnqB,GACA,IAAAmd,EAAAgN,EAAAlC,GAAA,CAEA,IAAAoE,EAAAlC,GAAA,SAEA,IAAAnqB,EAAA,SAEAwsB,EAAArC,GAEG,OAAAA,EAAAlC,GAAAwE,GAYHK,SATA,SAAA3C,GAEA,OADAmC,GAAAI,EAAAC,MAAAN,EAAAlC,KAAAhN,EAAAgN,EAAAlC,IAAAuE,EAAArC,GACAA,yBC3CA,IAAA4C,EAAcnwB,EAAQ,IACtBowB,EAAWpwB,EAAQ,IACnBqwB,EAAUrwB,EAAQ,IAClBiB,EAAAN,QAAA,SAAA4sB,GACA,IAAA5oB,EAAAwrB,EAAA5C,GACA+C,EAAAF,EAAAnwB,EACA,GAAAqwB,EAKA,IAJA,IAGAtrB,EAHAurB,EAAAD,EAAA/C,GACAX,EAAAyD,EAAApwB,EACA6G,EAAA,EAEAypB,EAAAprB,OAAA2B,GAAA8lB,EAAA5pB,KAAAuqB,EAAAvoB,EAAAurB,EAAAzpB,OAAAnC,EAAAM,KAAAD,GACG,OAAAL,wBCZH,IAAAonB,EAAgB/rB,EAAQ,IACxBusB,EAAWvsB,EAAQ,KAAgBC,EACnC4E,EAAA,GAAiBA,SAEjB2rB,EAAA,iBAAA7U,gBAAAla,OAAAsL,oBACAtL,OAAAsL,oBAAA4O,QAAA,GAUA1a,EAAAN,QAAAV,EAAA,SAAAstB,GACA,OAAAiD,GAAA,mBAAA3rB,EAAA7B,KAAAuqB,GATA,SAAAA,GACA,IACA,OAAAhB,EAAAgB,GACG,MAAA7sB,GACH,OAAA8vB,EAAAvqB,SAKAwqB,CAAAlD,GAAAhB,EAAAR,EAAAwB,0BCjBA,IAAA8C,EAAUrwB,EAAQ,IAClBisB,EAAiBjsB,EAAQ,IACzB+rB,EAAgB/rB,EAAQ,IACxBgsB,EAAkBhsB,EAAQ,IAC1BugB,EAAUvgB,EAAQ,IAClB0wB,EAAqB1wB,EAAQ,IAC7BssB,EAAA7qB,OAAA0tB,yBAEAxuB,EAAAV,EAAYD,EAAQ,IAAgBssB,EAAA,SAAAtf,EAAAkd,GAGpC,GAFAld,EAAA+e,EAAA/e,GACAkd,EAAA8B,EAAA9B,GAAA,GACAwG,EAAA,IACA,OAAApE,EAAAtf,EAAAkd,GACG,MAAAxpB,IACH,GAAA6f,EAAAvT,EAAAkd,GAAA,OAAA+B,GAAAoE,EAAApwB,EAAA+C,KAAAgK,EAAAkd,GAAAld,EAAAkd,uCCZA,IAAAyG,EAAc3wB,EAAQ,IACtB4b,EAAA,GACAA,EAAK5b,EAAQ,EAARA,CAAgB,oBACrB4b,EAAA,kBACE5b,EAAQ,GAARA,CAAqByB,OAAArB,UAAA,sBACvB,iBAAAuwB,EAAAnwB,MAAA,MACG,wBCRHR,EAAQ,IAARA,CAAuB,sCCAvBA,EAAQ,IAARA,CAAuB,mCCAvBA,EAAQ,IACRA,EAAQ,IACRiB,EAAAN,QAAiBX,EAAQ,KAAwBC,EAAA,8CCFjDD,EAAAkf,EAAAC,GAAAnf,EAAAsZ,EAAA6F,EAAA,8BAAAtG,IAAA7Y,EAAAsZ,EAAA6F,EAAA,6BAAAyR,IAAA5wB,EAAAsZ,EAAA6F,EAAA,2BAAA0R,IAAA7wB,EAAAsZ,EAAA6F,EAAA,+BAAA2R,IAAA9wB,EAAAsZ,EAAA6F,EAAA,4BAAA4R,IAAA/wB,EAAAsZ,EAAA6F,EAAA,+BAAA6R,IAAAhxB,EAAAsZ,EAAA6F,EAAA,8BAAA8R,IAAAjxB,EAAAsZ,EAAA6F,EAAA,gCAAA+R,IAAAlxB,EAAAsZ,EAAA6F,EAAA,iCAAAgS,IAAAnxB,EAAAsZ,EAAA6F,EAAA,6BAAAiS,IAAApxB,EAAAsZ,EAAA6F,EAAA,2BAAAkS,IAAArxB,EAAAsZ,EAAA6F,EAAA,6BAAAmS,IAAAtxB,EAAAsZ,EAAA6F,EAAA,4BAAAnb,IAAAhE,EAAAsZ,EAAA6F,EAAA,qCAAAoS,IAAAvxB,EAAAsZ,EAAA6F,EAAA,qCAAAqS,IAAAxxB,EAAAsZ,EAAA6F,EAAA,kCAAAsS,IAAAzxB,EAAAsZ,EAAA6F,EAAA,yCAAAuS,IAAA1xB,EAAAsZ,EAAA6F,EAAA,iCAAAwS,IAAA3xB,EAAAsZ,EAAA6F,EAAA,oCAAAyS,IAgBA,IAAAC,EAAApwB,OAAAmC,gBACA,CAAMC,UAAA,cAAgBwH,OAAA,SAAAiO,EAAAD,GAAsCC,EAAAzV,UAAAwV,IAC5D,SAAAC,EAAAD,GAAqB,QAAAlG,KAAAkG,IAAA1X,eAAAwR,KAAAmG,EAAAnG,GAAAkG,EAAAlG,KAEd,SAAA0F,EAAAS,EAAAD,GAEP,SAAAyY,IAAmBtxB,KAAA8C,YAAAgW,EADnBuY,EAAAvY,EAAAD,GAEAC,EAAAlZ,UAAA,OAAAiZ,EAAA5X,OAAA2B,OAAAiW,IAAAyY,EAAA1xB,UAAAiZ,EAAAjZ,UAAA,IAAA0xB,GAGO,IAAAlB,EAAAnvB,OAAA4oB,QAAA,SAAAnR,GACP,QAAA6Y,EAAAjrB,EAAA,EAAA4S,EAAApO,UAAAnG,OAA4C2B,EAAA4S,EAAO5S,IAEnD,QAAAqM,KADA4e,EAAAzmB,UAAAxE,GACArF,OAAArB,UAAAuB,eAAAqB,KAAA+uB,EAAA5e,KAAA+F,EAAA/F,GAAA4e,EAAA5e,IAEA,OAAA+F,GAGO,SAAA2X,EAAAkB,EAAArxB,GACP,IAAAwY,EAAA,GACA,QAAA/F,KAAA4e,EAAAtwB,OAAArB,UAAAuB,eAAAqB,KAAA+uB,EAAA5e,IAAAzS,EAAAie,QAAAxL,GAAA,IACA+F,EAAA/F,GAAA4e,EAAA5e,IACA,SAAA4e,GAAA,mBAAAtwB,OAAA2tB,sBACA,KAAAtoB,EAAA,MAAAqM,EAAA1R,OAAA2tB,sBAAA2C,GAA4DjrB,EAAAqM,EAAAhO,OAAc2B,IAAApG,EAAAie,QAAAxL,EAAArM,IAAA,IAC1EoS,EAAA/F,EAAArM,IAAAirB,EAAA5e,EAAArM,KACA,OAAAoS,EAGO,SAAA4X,EAAAkB,EAAA/b,EAAAjR,EAAAitB,GACP,IAAA3Y,EAAAlG,EAAA9H,UAAAnG,OAAA+Z,EAAA9L,EAAA,EAAA6C,EAAA,OAAAgc,IAAAxwB,OAAA0tB,yBAAAlZ,EAAAjR,GAAAitB,EACA,oBAAAC,SAAA,mBAAAA,QAAAC,SAAAjT,EAAAgT,QAAAC,SAAAH,EAAA/b,EAAAjR,EAAAitB,QACA,QAAAnrB,EAAAkrB,EAAA7sB,OAAA,EAA4C2B,GAAA,EAAQA,KAAAwS,EAAA0Y,EAAAlrB,MAAAoY,GAAA9L,EAAA,EAAAkG,EAAA4F,GAAA9L,EAAA,EAAAkG,EAAArD,EAAAjR,EAAAka,GAAA5F,EAAArD,EAAAjR,KAAAka,GACpD,OAAA9L,EAAA,GAAA8L,GAAAzd,OAAAT,eAAAiV,EAAAjR,EAAAka,KAGO,SAAA6R,EAAAqB,EAAAC,GACP,gBAAApc,EAAAjR,GAAmCqtB,EAAApc,EAAAjR,EAAAotB,IAG5B,SAAApB,EAAAsB,EAAAC,GACP,oBAAAL,SAAA,mBAAAA,QAAAM,SAAA,OAAAN,QAAAM,SAAAF,EAAAC,GAGO,SAAAtB,EAAAzQ,EAAAiS,EAAAvI,EAAAhiB,GACP,WAAAgiB,MAAAnhB,UAAA,SAAAC,EAAAC,GACA,SAAAypB,EAAApxB,GAAmC,IAAMqxB,EAAAzqB,EAAAzD,KAAAnD,IAA+B,MAAAZ,GAAYuI,EAAAvI,IACpF,SAAAyjB,EAAA7iB,GAAkC,IAAMqxB,EAAAzqB,EAAA,MAAA5G,IAAmC,MAAAZ,GAAYuI,EAAAvI,IACvF,SAAAiyB,EAAAhuB,GAA+BA,EAAAC,KAAAoE,EAAArE,EAAArD,OAAA,IAAA4oB,EAAA,SAAAlhB,GAAiEA,EAAArE,EAAArD,SAAyBoD,KAAAguB,EAAAvO,GACzHwO,GAAAzqB,IAAAqD,MAAAiV,EAAAiS,GAAA,KAAAhuB,UAIO,SAAAysB,EAAA1Q,EAAAK,GACP,IAAwG5gB,EAAA2yB,EAAA1Z,EAAAuF,EAAxGoU,EAAA,CAAaC,MAAA,EAAArtB,KAAA,WAA6B,KAAAyT,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAe6Z,KAAA,GAAAC,IAAA,IACnF,OAAAvU,EAAA,CAAgBha,KAAAwuB,EAAA,GAAAC,MAAAD,EAAA,GAAA5pB,OAAA4pB,EAAA,IAAqD,mBAAA7xB,SAAAqd,EAAArd,OAAAS,UAAA,WAAoE,OAAArB,OAAeie,EACxJ,SAAAwU,EAAAvZ,GAAsB,gBAAAyZ,GAAsB,OAC5C,SAAAC,GACA,GAAAnzB,EAAA,UAAAqJ,UAAA,mCACA,KAAAupB,GAAA,IACA,GAAA5yB,EAAA,EAAA2yB,IAAA1Z,EAAA0Z,EAAA,EAAAQ,EAAA,YAAAA,EAAA,uBAAAla,IAAAlW,KAAA4vB,EAAAQ,EAAA,KAAAxuB,KAAA,OAAAsU,EAEA,OADA0Z,EAAA,EAAA1Z,IAAAka,EAAA,GAAAla,EAAA5X,QACA8xB,EAAA,IACA,cAAAla,EAAAka,EAAuC,MACvC,OAAkC,OAAlCP,EAAAC,QAAkC,CAASxxB,MAAA8xB,EAAA,GAAAxuB,MAAA,GAC3C,OAAAiuB,EAAAC,QAAkCF,EAAAQ,EAAA,GAAWA,EAAA,IAAU,SACvD,OAAAA,EAAAP,EAAAG,IAAA5tB,MAAyCytB,EAAAE,KAAA3tB,MAAc,SACvD,QACA,KAAA8T,KAAA2Z,EAAAE,MAAA5tB,OAAA,GAAA+T,IAAA/T,OAAA,UAAAiuB,EAAA,QAAAA,EAAA,KAA6GP,EAAA,EAAO,SACpH,OAAAO,EAAA,MAAAla,GAAAka,EAAA,GAAAla,EAAA,IAAAka,EAAA,GAAAla,EAAA,KAAgF2Z,EAAAC,MAAAM,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAP,EAAAC,MAAA5Z,EAAA,IAAwD2Z,EAAAC,MAAA5Z,EAAA,GAAgBA,EAAAka,EAAQ,MAChF,GAAAla,GAAA2Z,EAAAC,MAAA5Z,EAAA,IAA8C2Z,EAAAC,MAAA5Z,EAAA,GAAgB2Z,EAAAG,IAAA/tB,KAAAmuB,GAAgB,MAC9Ela,EAAA,IAAA2Z,EAAAG,IAAA5tB,MACAytB,EAAAE,KAAA3tB,MAAiC,SAEjCguB,EAAAvS,EAAA7d,KAAAwd,EAAAqS,GACS,MAAAnyB,GAAY0yB,EAAA,GAAA1yB,GAAakyB,EAAA,EAAS,QAAU3yB,EAAAiZ,EAAA,EACrD,KAAAka,EAAA,SAAAA,EAAA,GAAmC,OAAS9xB,MAAA8xB,EAAA,GAAAA,EAAA,UAAAxuB,MAAA,GArBA+tB,CAAA,CAAAjZ,EAAAyZ,MAyBrC,SAAAhC,EAAAkC,EAAA1yB,GACP,QAAAwS,KAAAkgB,EAAA1yB,EAAAgB,eAAAwR,KAAAxS,EAAAwS,GAAAkgB,EAAAlgB,IAGO,SAAAie,EAAAkC,GACP,IAAAD,EAAA,mBAAAjyB,QAAAkyB,EAAAlyB,OAAAS,UAAAiF,EAAA,EACA,OAAAusB,IAAArwB,KAAAswB,GACA,CACA7uB,KAAA,WAEA,OADA6uB,GAAAxsB,GAAAwsB,EAAAnuB,SAAAmuB,OAAA,GACA,CAAoBhyB,MAAAgyB,KAAAxsB,KAAAlC,MAAA0uB,KAKb,SAAAjC,EAAAiC,EAAA5Z,GACP,IAAA2Z,EAAA,mBAAAjyB,QAAAkyB,EAAAlyB,OAAAS,UACA,IAAAwxB,EAAA,OAAAC,EACA,IAAApU,EAAAxe,EAAAoG,EAAAusB,EAAArwB,KAAAswB,GAAAC,EAAA,GACA,IACA,eAAA7Z,QAAA,MAAAwF,EAAApY,EAAArC,QAAAG,MAAA2uB,EAAAtuB,KAAAia,EAAA5d,OAEA,MAAA8H,GAAmB1I,EAAA,CAAM0I,SACzB,QACA,IACA8V,MAAAta,OAAAyuB,EAAAvsB,EAAA,SAAAusB,EAAArwB,KAAA8D,GAEA,QAAiB,GAAApG,EAAA,MAAAA,EAAA0I,OAEjB,OAAAmqB,EAGO,SAAAjC,IACP,QAAAiC,EAAA,GAAAzsB,EAAA,EAA4BA,EAAAwE,UAAAnG,OAAsB2B,IAClDysB,IAAA9oB,OAAA4mB,EAAA/lB,UAAAxE,KACA,OAAAysB,EAGO,SAAAvvB,EAAAmvB,GACP,OAAA3yB,gBAAAwD,GAAAxD,KAAA2yB,IAAA3yB,MAAA,IAAAwD,EAAAmvB,GAGO,SAAA5B,EAAA/Q,EAAAiS,EAAAvqB,GACP,IAAA9G,OAAAW,cAAA,UAAAuH,UAAA,wCACA,IAAAxC,EAAA2X,EAAAvW,EAAAqD,MAAAiV,EAAAiS,GAAA,IAAAe,EAAA,GACA,OAAA1sB,EAAA,GAAiBmsB,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAAnsB,EAAA1F,OAAAW,eAAA,WAAsF,OAAAvB,MAAesG,EACtH,SAAAmsB,EAAAvZ,GAAsB+E,EAAA/E,KAAA5S,EAAA4S,GAAA,SAAAyZ,GAAgC,WAAApqB,QAAA,SAAAqQ,EAAAC,GAAqCma,EAAAvuB,KAAA,CAAAyU,EAAAyZ,EAAA/Z,EAAAC,IAAA,GAAAoa,EAAA/Z,EAAAyZ,OAC3F,SAAAM,EAAA/Z,EAAAyZ,GAA2B,KAC3BjU,EADiCT,EAAA/E,GAAAyZ,IACX7xB,iBAAA0C,EAAA+E,QAAAC,QAAAkW,EAAA5d,MAAA6xB,GAAAzuB,KAAAgvB,EAAAzqB,GAAA0qB,EAAAH,EAAA,MAAAtU,GAD4B,MAAAxe,GAAYizB,EAAAH,EAAA,MAAA9yB,GAC9D,IAAAwe,EACA,SAAAwU,EAAApyB,GAA6BmyB,EAAA,OAAAnyB,GAC7B,SAAA2H,EAAA3H,GAA4BmyB,EAAA,QAAAnyB,GAC5B,SAAAqyB,EAAA1zB,EAAAkzB,GAA2BlzB,EAAAkzB,GAAAK,EAAAtR,QAAAsR,EAAAruB,QAAAsuB,EAAAD,EAAA,MAAAA,EAAA,QAGpB,SAAAhC,EAAA8B,GACP,IAAAxsB,EAAAqM,EACA,OAAArM,EAAA,GAAiBmsB,EAAA,QAAAA,EAAA,iBAAAvyB,GAA4C,MAAAA,IAAWuyB,EAAA,UAAAnsB,EAAA1F,OAAAS,UAAA,WAAqD,OAAArB,MAAesG,EAC5I,SAAAmsB,EAAAvZ,EAAAzZ,GAAyBqzB,EAAA5Z,KAAA5S,EAAA4S,GAAA,SAAAyZ,GAAgC,OAAAhgB,MAAA,CAAoB7R,MAAA0C,EAAAsvB,EAAA5Z,GAAAyZ,IAAAvuB,KAAA,WAAA8U,GAAgDzZ,IAAAkzB,QAGtH,SAAA1B,EAAA6B,GACP,IAAAlyB,OAAAW,cAAA,UAAAuH,UAAA,wCACA,IAAA+pB,EAAAC,EAAAlyB,OAAAW,eACA,OAAAsxB,IAAArwB,KAAAswB,GAAAlC,EAAAkC,GAGO,SAAA5B,EAAAkC,EAAAC,GAEP,OADApyB,OAAAT,eAAgCS,OAAAT,eAAA4yB,EAAA,OAAuCtyB,MAAAuyB,IAAwBD,EAAAC,MAC/FD,EAGO,SAAAjC,EAAAmC,GACP,GAAAA,KAAAhjB,WAAA,OAAAgjB,EACA,IAAAnvB,EAAA,GACA,SAAAmvB,EAAA,QAAA3a,KAAA2a,EAAAryB,OAAAE,eAAAqB,KAAA8wB,EAAA3a,KAAAxU,EAAAwU,GAAA2a,EAAA3a,IAEA,OADAxU,EAAA4N,QAAAuhB,EACAnvB,EAGO,SAAAitB,EAAAkC,GACP,OAAAA,KAAAhjB,WAAAgjB,EAAA,CAA4CvhB,QAAAuhB,sCChL5C9zB,EAAA,wCCAA,SAAA6J,GAEApI,OAAAT,eAAAL,EAAA,cAA8CW,OAAA,IAI9C,IAFA2d,EA2MA0H,EAzMA1Z,EAAWjN,EAAQ,KACnB+zB,EAAa/zB,EAAQ,KACrBwS,EAAcxS,EAAQ,KACtByQ,GALAwO,EAK+Bjf,EAAQ,OALR,iBAAAif,GAAA,YAAAA,IAAA,QAAAA,EAiC/B+U,EAAA,WAIA,SAAAA,EAAAC,GACAzzB,KAAAyzB,cAEAzzB,KAAA0zB,QAAA,YA2CA,OArCAF,EAAA5zB,UAAAqO,IAAA,SAAAzJ,EAAA1D,GACA,MAAAA,EACAd,KAAAyzB,YAAAE,WAAA3zB,KAAA4zB,cAAApvB,IAGAxE,KAAAyzB,YAAAI,QAAA7zB,KAAA4zB,cAAApvB,GAAAiI,EAAAgP,UAAA3a,KAOA0yB,EAAA5zB,UAAAG,IAAA,SAAAyE,GACA,IAAAsvB,EAAA9zB,KAAAyzB,YAAAM,QAAA/zB,KAAA4zB,cAAApvB,IACA,aAAAsvB,EACA,KAGArnB,EAAAoK,SAAAid,IAMAN,EAAA5zB,UAAAo0B,OAAA,SAAAxvB,GACAxE,KAAAyzB,YAAAE,WAAA3zB,KAAA4zB,cAAApvB,KAMAgvB,EAAA5zB,UAAAg0B,cAAA,SAAAlzB,GACA,OAAAV,KAAA0zB,QAAAhzB,GAEA8yB,EAAA5zB,UAAAyE,SAAA,WACA,OAAArE,KAAAyzB,YAAApvB,YAEAmvB,EAlDA,GA2EAS,EAAA,WACA,SAAAA,IACAj0B,KAAAk0B,OAAA,GACAl0B,KAAAm0B,mBAAA,EAmBA,OAjBAF,EAAAr0B,UAAAqO,IAAA,SAAAzJ,EAAA1D,GACA,MAAAA,SACAd,KAAAk0B,OAAA1vB,GAGAxE,KAAAk0B,OAAA1vB,GAAA1D,GAGAmzB,EAAAr0B,UAAAG,IAAA,SAAAyE,GACA,OAAAiI,EAAAC,SAAA1M,KAAAk0B,OAAA1vB,GACAxE,KAAAk0B,OAAA1vB,GAEA,MAEAyvB,EAAAr0B,UAAAo0B,OAAA,SAAAxvB,UACAxE,KAAAk0B,OAAA1vB,IAEAyvB,EAtBA,GAkDAG,EAAA,SAAAC,GACA,IAGA,uBAAAlZ,aACA,IAAAA,OAAAkZ,GAAA,CAEA,IAAAC,EAAAnZ,OAAAkZ,GAGA,OAFAC,EAAAT,QAAA,6BACAS,EAAAX,WAAA,qBACA,IAAAH,EAAAc,IAGA,MAAAp0B,IAGA,WAAA+zB,GAGAM,EAAAH,EAAA,gBAEAI,EAAAJ,EAAA,kBAkBAK,EAAA,IAAAlB,EAAAmB,OAAA,sBAKAC,GACAxO,EAAA,EACA,WACA,OAAAA,MAQAyO,EAAA,SAAAniB,GACA,IAAAwI,EAAAxO,EAAA+F,kBAAAC,GACAmiB,EAAA,IAAAnoB,EAAAmL,KACAgd,EAAA7b,OAAAkC,GACA,IAAA4Z,EAAAD,EAAAxb,SACA,OAAA3M,EAAAqG,OAAAU,gBAAAqhB,IAOAC,EAAA,WAEA,IADA,IAAAC,EAAA,GACAzjB,EAAA,EAAoBA,EAAAxG,UAAAnG,OAAuB2M,IAC3CyjB,EAAAzjB,GAAAxG,UAAAwG,GAGA,IADA,IAAAgB,EAAA,GACAhM,EAAA,EAAmBA,EAAAyuB,EAAApwB,OAAqB2B,IACxCuE,MAAA8I,QAAAohB,EAAAzuB,KACAyuB,EAAAzuB,IACA,iBAAAyuB,EAAAzuB,IACA,iBAAAyuB,EAAAzuB,GAAA3B,OACA2N,GAAAwiB,EAAA/pB,MAAA,KAAAgqB,EAAAzuB,IAEA,iBAAAyuB,EAAAzuB,GACAgM,GAAA7F,EAAAgP,UAAAsZ,EAAAzuB,IAGAgM,GAAAyiB,EAAAzuB,GAEAgM,GAAA,IAEA,OAAAA,GAMA0iB,EAAA,KAMAC,GAAA,EAMAC,EAAA,SAAAC,EAAAC,GACA3oB,EAAA2F,QAAAgjB,IAAA,IAAAD,IAAA,IAAAA,EAAA,+CACA,IAAAA,GACAV,EAAAY,SAAA9B,EAAA+B,SAAAC,QACAP,EAAAP,EAAAjlB,IAAAN,KAAAulB,GACAW,GACAZ,EAAAvmB,IAAA,uBAEA,mBAAAknB,EACAH,EAAAG,GAGAH,EAAA,KACAR,EAAAR,OAAA,qBAOAxkB,EAAA,WAEA,IADA,IAAAulB,EAAA,GACAzjB,EAAA,EAAoBA,EAAAxG,UAAAnG,OAAuB2M,IAC3CyjB,EAAAzjB,GAAAxG,UAAAwG,GAOA,IALA,IAAA2jB,IACAA,GAAA,EACA,OAAAD,IAAA,IAAAR,EAAAz0B,IAAA,oBACAm1B,GAAA,IAEAF,EAAA,CACA,IAAA1iB,EAAAwiB,EAAA/pB,MAAA,KAAAgqB,GACAC,EAAA1iB,KAOAkjB,EAAA,SAAAC,GACA,kBAEA,IADA,IAAAV,EAAA,GACAzjB,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/CyjB,EAAAzjB,GAAAxG,UAAAwG,GAEA9B,EAAAzE,WAAA,GAAA0qB,GAAAxrB,OAAA8qB,MAMAnsB,EAAA,WAEA,IADA,IAAAmsB,EAAA,GACAzjB,EAAA,EAAoBA,EAAAxG,UAAAnG,OAAuB2M,IAC3CyjB,EAAAzjB,GAAAxG,UAAAwG,GAEA,IAAAgB,EAAA,4BAAAwiB,EAAA/pB,WAAA,EAAAgqB,GACAN,EAAA7rB,MAAA0J,IAKAojB,EAAA,WAEA,IADA,IAAAX,EAAA,GACAzjB,EAAA,EAAoBA,EAAAxG,UAAAnG,OAAuB2M,IAC3CyjB,EAAAzjB,GAAAxG,UAAAwG,GAEA,IAAAgB,EAAA,yBAAAwiB,EAAA/pB,WAAA,EAAAgqB,GAEA,MADAN,EAAA7rB,MAAA0J,GACA,IAAAzL,MAAAyL,IAKAyT,EAAA,WAEA,IADA,IAAAgP,EAAA,GACAzjB,EAAA,EAAoBA,EAAAxG,UAAAnG,OAAuB2M,IAC3CyjB,EAAAzjB,GAAAxG,UAAAwG,GAEA,IAAAgB,EAAA,qBAAAwiB,EAAA/pB,WAAA,EAAAgqB,GACAN,EAAA1O,KAAAzT,IAqBAqjB,EAAA,SAAAlf,GACA,uBAAAA,IACAA,MACAA,GAAAmf,OAAAC,mBACApf,GAAAmf,OAAAE,oBA8CAC,EAAA,aAKAC,EAAA,aAOAC,EAAA,SAAArd,EAAAC,GACA,GAAAD,IAAAC,EACA,SAEA,GAAAD,IAAAmd,GAAAld,IAAAmd,EACA,SAEA,GAAAnd,IAAAkd,GAAAnd,IAAAod,EACA,SAGA,IAAAE,EAAAC,EAAAvd,GAAAwd,EAAAD,EAAAtd,GACA,cAAAqd,EACA,OAAAE,EACAF,EAAAE,GAAA,EAAAxd,EAAAjU,OAAAkU,EAAAlU,OAAAuxB,EAAAE,GAGA,EAGA,OAAAA,EACA,EAGAxd,EAAAC,GAAA,KASAwd,EAAA,SAAAzd,EAAAC,GACA,OAAAD,IAAAC,EACA,EAEAD,EAAAC,GACA,EAGA,GAQAyd,EAAA,SAAA9xB,EAAA2D,GACA,GAAAA,GAAA3D,KAAA2D,EACA,OAAAA,EAAA3D,GAGA,UAAAqC,MAAA,yBAAArC,EAAA,gBAAAiI,EAAAgP,UAAAtT,KAOAouB,EAAA,SAAApuB,GACA,oBAAAA,GAAA,OAAAA,EACA,OAAAsE,EAAAgP,UAAAtT,GACA,IAAA7D,EAAA,GACA,QAAAqU,KAAAxQ,EACA7D,EAAAG,KAAAkU,GAGArU,EAAAkyB,OAEA,IADA,IAAAhyB,EAAA,IACA8B,EAAA,EAAmBA,EAAAhC,EAAAK,OAAiB2B,IACpC,IAAAA,IACA9B,GAAA,KACAA,GAAAiI,EAAAgP,UAAAnX,EAAAgC,IACA9B,GAAA,IACAA,GAAA+xB,EAAApuB,EAAA7D,EAAAgC,KAGA,OADA9B,GAAA,KASAiyB,EAAA,SAAAhkB,EAAAikB,GACA,IAAAtsB,EAAAqI,EAAA9N,OACA,GAAAyF,GAAAssB,EACA,OAAAjkB,GAGA,IADA,IAAAkkB,EAAA,GACA/jB,EAAA,EAAmBA,EAAAxI,EAASwI,GAAA8jB,EAC5B9jB,EAAA8jB,EAAAtsB,EACAusB,EAAAlyB,KAAAgO,EAAAmkB,UAAAhkB,EAAAxI,IAGAusB,EAAAlyB,KAAAgO,EAAAmkB,UAAAhkB,IAAA8jB,IAGA,OAAAC,GAQAE,EAAA,SAAA1uB,EAAAD,GACA,GAAA2C,MAAA8I,QAAAxL,GACA,QAAA7B,EAAA,EAAuBA,EAAA6B,EAAAxD,SAAgB2B,EACvC4B,EAAA5B,EAAA6B,EAAA7B,SAUAmG,EAAAnH,QAAA6C,EAAA,SAAA3D,EAAA0J,GAA+C,OAAAhG,EAAAgG,EAAA1J,MAU/CsyB,EAAA,SAAAnE,GACAlmB,EAAA2F,QAAAujB,EAAAhD,GAAA,uBACA,IACApB,EAAArxB,EAAAT,EAAAs3B,EAAAzwB,EAAA0wB,EAAAvkB,EAyBA,IAtBA,IAAAkgB,GACAzyB,EAAA,EACAT,EAAA,EACA8xB,EAAA,EAAAoB,IAAAjI,IAAA,MAGA6G,EAAAoB,EAAA,GACAA,EAAA1W,KAAAgb,IAAAtE,KACA1W,KAAAib,IAAA,UAGAh3B,GADA62B,EAAA9a,KAAAmO,IAAAnO,KAAAC,MAAAD,KAAAzM,IAAAmjB,GAAA1W,KAAAkb,KAbA,YAeA13B,EAAAwc,KAAAmb,MAAAzE,EAAA1W,KAAAib,IAAA,EAhBA,GAgBAH,GAAA9a,KAAAib,IAAA,EAhBA,OAoBAh3B,EAAA,EACAT,EAAAwc,KAAAmb,MAAAzE,EAAA1W,KAAAib,IAAA,YAIAF,EAAA,GACA1wB,EA1BA,GA0BmBA,EAAGA,GAAA,EACtB0wB,EAAAvyB,KAAAhF,EAAA,OACAA,EAAAwc,KAAAC,MAAAzc,EAAA,GAEA,IAAA6G,EA9BA,GA8BmBA,EAAGA,GAAA,EACtB0wB,EAAAvyB,KAAAvE,EAAA,OACAA,EAAA+b,KAAAC,MAAAhc,EAAA,GAEA82B,EAAAvyB,KAAA8sB,EAAA,KACAyF,EAAAtyB,UACA+N,EAAAukB,EAAAxiB,KAAA,IAEA,IAAA6iB,EAAA,GACA,IAAA/wB,EAAA,EAAeA,EAAA,GAAQA,GAAA,GACvB,IAAAgxB,EAAAC,SAAA9kB,EAAA+kB,OAAAlxB,EAAA,MAAAjC,SAAA,IACA,IAAAizB,EAAA3yB,SACA2yB,EAAA,IAAAA,GACAD,GAAAC,EAEA,OAAAD,EAAA9U,eAiDAkV,EAAA,IAAAC,OAAA,iBAMAvB,EAAA,SAAA1jB,GACA,GAAAglB,EAAArc,KAAA3I,GAAA,CACA,IAAAklB,EAAA/B,OAAAnjB,GACA,GAAAklB,IAAA,YAAAA,GAAA,WACA,OAAAA,EAGA,aAmBAC,EAAA,SAAA1vB,GACA,IACAA,IAEA,MAAAhI,GAEAwJ,WAAA,WAKA,IAAA4M,EAAApW,EAAAoW,OAAA,GAEA,MADAyP,EAAA,yCAAAzP,GACApW,GACS+b,KAAAC,MAAA,MAMT2b,EAAA,WASA,OARA,iBAAA1c,QACAA,OAAA,WACAA,OAAA,qBACA,IAKAkP,OAAA,gGAWAyN,EAAA,SAAA5vB,EAAA6vB,GACA,IAAA5tB,EAAAT,WAAAxB,EAAA6vB,GAIA,MAHA,iBAAA5tB,KAAA,OACAA,EAAA,QAEAA,GAwBA6tB,EAAA,WAMA,SAAAA,EAAAC,EAAAC,GACA,YAAAA,EAAA,CACAl4B,KAAAm4B,QAAAF,EAAA3gB,MAAA,KAGA,IADA,IAAA8gB,EAAA,EACA9xB,EAAA,EAA2BA,EAAAtG,KAAAm4B,QAAAxzB,OAAyB2B,IACpDtG,KAAAm4B,QAAA7xB,GAAA3B,OAAA,IACA3E,KAAAm4B,QAAAC,GAAAp4B,KAAAm4B,QAAA7xB,GACA8xB,KAGAp4B,KAAAm4B,QAAAxzB,OAAAyzB,EACAp4B,KAAAq4B,UAAA,OAGAr4B,KAAAm4B,QAAAF,EACAj4B,KAAAq4B,UAAAH,EAwLA,OArLAj3B,OAAAT,eAAAw3B,EAAA,SAMAj4B,IAAA,WACA,WAAAi4B,EAAA,KAEA7pB,YAAA,EACArO,cAAA,IAEAk4B,EAAAp4B,UAAA04B,SAAA,WACA,OAAAt4B,KAAAq4B,WAAAr4B,KAAAm4B,QAAAxzB,OACA,KACA3E,KAAAm4B,QAAAn4B,KAAAq4B,YAKAL,EAAAp4B,UAAA24B,UAAA,WACA,OAAAv4B,KAAAm4B,QAAAxzB,OAAA3E,KAAAq4B,WAKAL,EAAAp4B,UAAA44B,SAAA,WACA,IAAAN,EAAAl4B,KAAAq4B,UAIA,OAHAH,EAAAl4B,KAAAm4B,QAAAxzB,QACAuzB,IAEA,IAAAF,EAAAh4B,KAAAm4B,QAAAD,IAKAF,EAAAp4B,UAAA64B,QAAA,WACA,OAAAz4B,KAAAq4B,UAAAr4B,KAAAm4B,QAAAxzB,OACA3E,KAAAm4B,QAAAn4B,KAAAm4B,QAAAxzB,OAAA,GACA,MAEAqzB,EAAAp4B,UAAAyE,SAAA,WAEA,IADA,IAAAq0B,EAAA,GACApyB,EAAAtG,KAAAq4B,UAAoC/xB,EAAAtG,KAAAm4B,QAAAxzB,OAAyB2B,IAC7D,KAAAtG,KAAAm4B,QAAA7xB,KACAoyB,GAAA,IAAA14B,KAAAm4B,QAAA7xB,IAEA,OAAAoyB,GAAA,KAEAV,EAAAp4B,UAAA+4B,mBAAA,WAEA,IADA,IAAAD,EAAA,GACApyB,EAAAtG,KAAAq4B,UAAoC/xB,EAAAtG,KAAAm4B,QAAAxzB,OAAyB2B,IAC7D,KAAAtG,KAAAm4B,QAAA7xB,KACAoyB,GAAA,IAAAvb,mBAAApI,OAAA/U,KAAAm4B,QAAA7xB,MAEA,OAAAoyB,GAAA,KAQAV,EAAAp4B,UAAA6F,MAAA,SAAAmzB,GAEA,YADA,IAAAA,IAA+BA,EAAA,GAC/B54B,KAAAm4B,QAAA1yB,MAAAzF,KAAAq4B,UAAAO,IAKAZ,EAAAp4B,UAAAi5B,OAAA,WACA,GAAA74B,KAAAq4B,WAAAr4B,KAAAm4B,QAAAxzB,OACA,YAEA,IADA,IAAAm0B,EAAA,GACAxyB,EAAAtG,KAAAq4B,UAAoC/xB,EAAAtG,KAAAm4B,QAAAxzB,OAAA,EAA6B2B,IACjEwyB,EAAAr0B,KAAAzE,KAAAm4B,QAAA7xB,IACA,WAAA0xB,EAAAc,EAAA,IAMAd,EAAAp4B,UAAAm5B,MAAA,SAAAC,GAEA,IADA,IAAAF,EAAA,GACAxyB,EAAAtG,KAAAq4B,UAAoC/xB,EAAAtG,KAAAm4B,QAAAxzB,OAAyB2B,IAC7DwyB,EAAAr0B,KAAAzE,KAAAm4B,QAAA7xB,IACA,GAAA0yB,aAAAhB,EACA,IAAA1xB,EAAA0yB,EAAAX,UAAgD/xB,EAAA0yB,EAAAb,QAAAxzB,OAAiC2B,IACjFwyB,EAAAr0B,KAAAu0B,EAAAb,QAAA7xB,QAIA,KAAA2yB,EAAAD,EAAA1hB,MAAA,KACA,IAAAhR,EAAA,EAA2BA,EAAA2yB,EAAAt0B,OAAwB2B,IACnD2yB,EAAA3yB,GAAA3B,OAAA,GACAm0B,EAAAr0B,KAAAw0B,EAAA3yB,IAGA,WAAA0xB,EAAAc,EAAA,IAKAd,EAAAp4B,UAAA+c,QAAA,WACA,OAAA3c,KAAAq4B,WAAAr4B,KAAAm4B,QAAAxzB,QAOAqzB,EAAAkB,aAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAb,WAAAgB,EAAAF,EAAAd,WACA,UAAAe,EACA,OAAAD,EAEA,GAAAC,IAAAC,EACA,OAAAtB,EAAAkB,aAAAC,EAAAX,WAAAY,EAAAZ,YAGA,UAAA3xB,MAAA,8BACAuyB,EACA,8BAEAD,EACA,MAQAnB,EAAAuB,aAAA,SAAAC,EAAAC,GAGA,IAFA,IAAAC,EAAAF,EAAA/zB,QACAk0B,EAAAF,EAAAh0B,QACAa,EAAA,EAAuBA,EAAAozB,EAAA/0B,QAAA2B,EAAAqzB,EAAAh1B,OAA6C2B,IAAA,CACpE,IAAAszB,EAAA3D,EAAAyD,EAAApzB,GAAAqzB,EAAArzB,IACA,OAAAszB,EACA,OAAAA,EAEA,OAAAF,EAAA/0B,SAAAg1B,EAAAh1B,OACA,EACA+0B,EAAA/0B,OAAAg1B,EAAAh1B,QAAA,KAOAqzB,EAAAp4B,UAAAi6B,OAAA,SAAAC,GACA,GAAA95B,KAAAu4B,cAAAuB,EAAAvB,YACA,SAEA,QAAAjyB,EAAAtG,KAAAq4B,UAAA/e,EAAAwgB,EAAAzB,UAAyD/xB,GAAAtG,KAAAm4B,QAAAxzB,OAA0B2B,IAAAgT,IACnF,GAAAtZ,KAAAm4B,QAAA7xB,KAAAwzB,EAAA3B,QAAA7e,GACA,SAGA,UAOA0e,EAAAp4B,UAAA8M,SAAA,SAAAotB,GACA,IAAAxzB,EAAAtG,KAAAq4B,UACA/e,EAAAwgB,EAAAzB,UACA,GAAAr4B,KAAAu4B,YAAAuB,EAAAvB,YACA,SAEA,KAAAjyB,EAAAtG,KAAAm4B,QAAAxzB,QAAA,CACA,GAAA3E,KAAAm4B,QAAA7xB,KAAAwzB,EAAA3B,QAAA7e,GACA,WAEAhT,IACAgT,EAEA,UAEA0e,EA9MA,GA0NA+B,EAAA,WAKA,SAAAA,EAAAC,EAAAC,GACAj6B,KAAAi6B,eAEAj6B,KAAAk6B,OAAAF,EAAAv0B,QAEAzF,KAAAm6B,YAAAle,KAAAme,IAAA,EAAAp6B,KAAAk6B,OAAAv1B,QACA,QAAA2B,EAAA,EAAuBA,EAAAtG,KAAAk6B,OAAAv1B,OAAwB2B,IAC/CtG,KAAAm6B,aAAA1tB,EAAAsR,aAAA/d,KAAAk6B,OAAA5zB,IAEAtG,KAAAq6B,cAgEA,OA9DAp5B,OAAAT,eAAAu5B,EAAA,kBAEAh6B,IAAA,WACA,WAEAoO,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAAu5B,EAAA,yBAEAh6B,IAAA,WACA,YAEAoO,YAAA,EACArO,cAAA,IAGAi6B,EAAAn6B,UAAA6E,KAAA,SAAAs0B,GAEA/4B,KAAAk6B,OAAAv1B,OAAA,IACA3E,KAAAm6B,aAAA,GAEAn6B,KAAAk6B,OAAAz1B,KAAAs0B,GACA/4B,KAAAm6B,aAAA1tB,EAAAsR,aAAAgb,GACA/4B,KAAAq6B,eAEAN,EAAAn6B,UAAAgF,IAAA,WACA,IAAA01B,EAAAt6B,KAAAk6B,OAAAt1B,MACA5E,KAAAm6B,aAAA1tB,EAAAsR,aAAAuc,GAEAt6B,KAAAk6B,OAAAv1B,OAAA,IACA3E,KAAAm6B,aAAA,IAGAJ,EAAAn6B,UAAAy6B,YAAA,WACA,GAAAr6B,KAAAm6B,YAAAJ,EAAAQ,sBACA,UAAA1zB,MAAA7G,KAAAi6B,aACA,8BACAF,EAAAQ,sBACA,WACAv6B,KAAAm6B,YACA,MAEA,GAAAn6B,KAAAk6B,OAAAv1B,OAAAo1B,EAAAS,eACA,UAAA3zB,MAAA7G,KAAAi6B,aACA,iEACAF,EAAAS,eACA,gCACAx6B,KAAAy6B,kBAQAV,EAAAn6B,UAAA66B,cAAA,WACA,UAAAz6B,KAAAk6B,OAAAv1B,OACA,GAEA,gBAAA3E,KAAAk6B,OAAA1lB,KAAA,UAEAulB,EA9EA,GAyGAW,EAAA,eAuBAC,EAAA,WAQA,SAAAA,EAAAC,EAAAC,EAAAxqB,EAAAyqB,EAAAC,QACA,IAAAA,IAAwCA,EAAA,IACxC/6B,KAAA66B,SACA76B,KAAAqQ,YACArQ,KAAA86B,gBACA96B,KAAA+6B,iBACA/6B,KAAA46B,OAAArY,cACAviB,KAAAg7B,OAAAh7B,KAAA46B,KAAApD,OAAAx3B,KAAA46B,KAAAzc,QAAA,QACAne,KAAAi7B,aAAA1G,EAAAx0B,IAAA,QAAA66B,IAAA56B,KAAA46B,KAgEA,OA9DAD,EAAA/6B,UAAAs7B,gBAAA,WACA,OAAAl7B,KAAA46B,OAAA56B,KAAAi7B,cAAAj7B,KAAAm7B,gBAEAR,EAAA/6B,UAAAw7B,gBAAA,WACA,aAAAp7B,KAAAi7B,aAAAzD,OAAA,MAEAmD,EAAA/6B,UAAAy7B,WAAA,WACA,8BAAAr7B,KAAAg7B,QAEAL,EAAA/6B,UAAAu7B,aAAA,WACA,yBAAAn7B,KAAAg7B,QAAA,wBAAAh7B,KAAAg7B,QAEAL,EAAA/6B,UAAA07B,WAAA,SAAAC,GACAA,IAAAv7B,KAAAi7B,eACAj7B,KAAAi7B,aAAAM,EACAv7B,KAAAo7B,mBACA7G,EAAAtmB,IAAA,QAAAjO,KAAA46B,KAAA56B,KAAAi7B,gBAUAN,EAAA/6B,UAAA47B,cAAA,SAAA31B,EAAAoX,GAGA,IAAAwe,EACA,GAHAhvB,EAAA2F,OAAA,iBAAAvM,EAAA,8BACA4G,EAAA2F,OAAA,iBAAA6K,EAAA,gCAtEA,cAwEApX,EACA41B,GACAz7B,KAAA66B,OAAA,kBAAA76B,KAAAi7B,aAAA,YAEA,IAAAp1B,IAAA60B,EAKA,UAAA7zB,MAAA,4BAAAhB,GAJA41B,GACAz7B,KAAA66B,OAAA,sBAAA76B,KAAAi7B,aAAA,QAKAj7B,KAAAk7B,oBACAje,EAAA,GAAAjd,KAAAqQ,WAEA,IAAAqrB,EAAA,GAIA,OAHAjvB,EAAAnH,QAAA2X,EAAA,SAAAzY,EAAA1D,GACA46B,EAAAj3B,KAAAD,EAAA,IAAA1D,KAEA26B,EAAAC,EAAAlnB,KAAA,MAGAmmB,EAAA/6B,UAAAyE,SAAA,WACA,IAAAoO,EAAAzS,KAAA27B,cAIA,OAHA37B,KAAA+6B,iBACAtoB,GAAA,IAAAzS,KAAA+6B,eAAA,KAEAtoB,GAGAkoB,EAAA/6B,UAAA+7B,YAAA,WACA,OAAA37B,KAAA66B,OAAA,sBAAA76B,KAAA46B,MAEAD,EAhFA,GAmJA,IAokBAiB,EAGAC,EAKAC,EAgJAC,EAsFAC,EAlzBAC,EAAA,SAAAC,GACA,IAAAC,EAAAC,EAAAF,GAAA7rB,EAAA8rB,EAAAE,UACA,aAAAF,EAAAnB,QACAtF,EAAAyG,EAAAvB,KACA,8EAIAvqB,GAAA,aAAAA,GACA,cAAA8rB,EAAAnB,QACAtF,EAAA,gFAEAyG,EAAAtB,QA74BA,oBAAA1f,QACAA,OAAA8F,UACA9F,OAAA8F,SAAAqb,WACA,IAAAnhB,OAAA8F,SAAAqb,SAAAne,QAAA,WACA4H,EAAA,6FA44BA,IAAA+U,EAAA,OAAAqB,EAAAI,QAAA,QAAAJ,EAAAI,OACA,OACAC,SAAA,IAAA7B,EAAAwB,EAAAvB,KAAAuB,EAAAtB,OAAAxqB,EAAAyqB,GACAd,KAAA,IAAAhC,EAAAmE,EAAAzD,cAQA0D,EAAA,SAAAF,GAEA,IAAAtB,EAAA,GAAAI,EAAA,GAAAqB,EAAA,GAAA3D,EAAA,GAEAmC,GAAA,EAAA0B,EAAA,QAAAE,EAAA,IAEA,oBAAAP,EAAA,CAEA,IAAAQ,EAAAR,EAAA/d,QAAA,MACAue,GAAA,IACAH,EAAAL,EAAAtF,UAAA,EAAA8F,EAAA,GACAR,IAAAtF,UAAA8F,EAAA,IAGA,IAAAC,EAAAT,EAAA/d,QAAA,MACA,IAAAwe,IACAA,EAAAT,EAAAv3B,QAEA,IAAAi4B,EAAAV,EAAA/d,QAAA,MACA,IAAAye,IACAA,EAAAV,EAAAv3B,QAEAi2B,EAAAsB,EAAAtF,UAAA,EAAA3a,KAAAmO,IAAAuS,EAAAC,IACAD,EAAAC,IAEAlE,EA/FA,SAAAA,GAGA,IAFA,IAAAmE,EAAA,GACA/D,EAAAJ,EAAAphB,MAAA,KACAhR,EAAA,EAAmBA,EAAAwyB,EAAAn0B,OAAmB2B,IACtC,GAAAwyB,EAAAxyB,GAAA3B,OAAA,GACA,IAAAm4B,EAAAhE,EAAAxyB,GACA,IACAw2B,EAAAxY,mBAAAwY,EAAAlmB,QAAA,YAEA,MAAA1W,IACA28B,GAAA,IAAAC,EAGA,OAAAD,EAkFAE,CAAAb,EAAAtF,UAAA+F,EAAAC,KAEA,IAAAI,EA9EA,SAAAC,GACA,IAAAC,EAAA,GACA,MAAAD,EAAAp8B,OAAA,KACAo8B,IAAArG,UAAA,IAEA,QAAAtlB,EAAA,EAAA6rB,EAAAF,EAAA3lB,MAAA,KAAiDhG,EAAA6rB,EAAAx4B,OAAgB2M,IAAA,CACjE,IAAA8rB,EAAAD,EAAA7rB,GACA,OAAA8rB,EAAAz4B,OAAA,CAGA,IAAA04B,EAAAD,EAAA9lB,MAAA,KACA,IAAA+lB,EAAA14B,OACAu4B,EAAA5Y,mBAAA+Y,EAAA,KAAA/Y,mBAAA+Y,EAAA,IAGAtX,EAAA,0BAAAqX,EAAA,eAAAH,EAAA,MAGA,OAAAC,EA4DAI,CAAApB,EAAAtF,UAAA3a,KAAAmO,IAAA8R,EAAAv3B,OAAAi4B,MAEAF,EAAA9B,EAAAzc,QAAA,OACA,GACA0c,EAAA,UAAA0B,GAAA,QAAAA,EACAE,EAAAlF,SAAAqD,EAAAhE,UAAA8F,EAAA,QAGAA,EAAAR,EAAAv3B,OAEA,IAAA0S,EAAAujB,EAAAtjB,MAAA,KACA,IAAAD,EAAA1S,QAEAq2B,EAAA3jB,EAAA,GACAglB,EAAAhlB,EAAA,GAAAkL,eAEA,IAAAlL,EAAA1S,OACAq2B,EAAA3jB,EAAA,GAEA,cAAAA,EAAA,GAAA5R,MAAA,EAAAi3B,GAAAna,gBACAyY,EAAA,aAGA,KAAAqB,GAAA,OAAAW,IACAX,EAAAW,EAAA,IAGA,OACApC,OACA6B,OACAzB,SACAqB,YACAxB,SACA0B,SACA7D,eAyBA6E,EAAA,iCAOAC,GAAA,+BAWAC,GAAA,SAAAj5B,GACA,uBAAAA,GAAA,IAAAA,EAAAG,SAAA44B,EAAAniB,KAAA5W,IAMAk5B,GAAA,SAAAhF,GACA,uBAAAA,GACA,IAAAA,EAAA/zB,SACA64B,GAAApiB,KAAAsd,IAiBAiF,GAAA,SAAAC,GACA,cAAAA,GACA,iBAAAA,GACA,iBAAAA,IAAAjI,EAAAiI,IACAA,GAAA,iBAAAA,GAAAnxB,EAAAC,SAAAkxB,EAAA,QAWAC,GAAA,SAAAjjB,EAAAC,EAAApE,EAAAujB,EAAAlf,GACAA,QAAA/Z,IAAA0V,GAEAqnB,GAAArxB,EAAAkO,YAAAC,EAAAC,EAAAC,GAAArE,EAAAujB,IASA8D,GAAA,SAAAnjB,EAAAlE,EAAAsnB,GACA,IAAA/D,EAAA+D,aAAA/F,EAAA,IAAA+B,EAAAgE,EAAApjB,GAAAojB,EACA,QAAAh9B,IAAA0V,EACA,UAAA5P,MAAA8T,EAAA,sBAAAqf,EAAAS,iBAEA,sBAAAhkB,EACA,UAAA5P,MAAA8T,EACA,uBACAqf,EAAAS,gBACA,oBACAhkB,EAAApS,YAEA,GAAAsxB,EAAAlf,GACA,UAAA5P,MAAA8T,EAAA,YAAAlE,EAAApS,WAAA,IAAA21B,EAAAS,iBAGA,oBAAAhkB,GACAA,EAAA9R,OA5EA,SA4EA,GACA8H,EAAAsR,aAAAtH,GA7EA,SA8EA,UAAA5P,MAAA8T,EACA,sDAGAqf,EAAAS,gBACA,MACAhkB,EAAAmgB,UAAA,MACA,SAIA,GAAAngB,GAAA,iBAAAA,EAAA,CACA,IAAAunB,GAAA,EAAAC,GAAA,EAqBA,GApBAxxB,EAAAnH,QAAAmR,EAAA,SAAAjS,EAAA1D,GACA,cAAA0D,EACAw5B,GAAA,OAEA,iBAAAx5B,GAAA,QAAAA,IACAy5B,GAAA,GACAR,GAAAj5B,IACA,UAAAqC,MAAA8T,EACA,6BACAnW,EACA,KACAw1B,EAAAS,gBACA,wFAIAT,EAAAv1B,KAAAD,GACAs5B,GAAAnjB,EAAA7Z,EAAAk5B,GACAA,EAAAp1B,QAEAo5B,GAAAC,EACA,UAAAp3B,MAAA8T,EACA,4BACAqf,EAAAS,gBACA,sCAyDAyD,GAAA,SAAAtjB,EAAAC,EAAApE,EAAAujB,EAAAlf,GACA,IAAAA,QAAA/Z,IAAA0V,EAAA,CAEA,IAAAkE,EAAAlO,EAAAkO,YAAAC,EAAAC,EAAAC,GACA,IAAArE,GAAA,iBAAAA,GAAA5L,MAAA8I,QAAA8C,GACA,UAAA5P,MAAA8T,EAAA,0DAEA,IAAAwjB,EAAA,GACA1xB,EAAAnH,QAAAmR,EAAA,SAAAjS,EAAA1D,GACA,IAAAs9B,EAAA,IAAApG,EAAAxzB,GAEA,GADAs5B,GAAAnjB,EAAA7Z,EAAAk5B,EAAAjB,MAAAqF,IACA,cAAAA,EAAA3F,YACAkF,GAAA78B,GACA,UAAA+F,MAAA8T,EACA,kCACAyjB,EAAA/5B,WACA,gGAIA85B,EAAA15B,KAAA25B,KAnEA,SAAAzjB,EAAAwjB,GACA,IAAA73B,EAAA83B,EACA,IAAA93B,EAAA,EAAeA,EAAA63B,EAAAx5B,OAAuB2B,IAGtC,IADA,IAAAhC,GADA85B,EAAAD,EAAA73B,IACAb,QACA6T,EAAA,EAAuBA,EAAAhV,EAAAK,OAAiB2U,IACxC,iBAAAhV,EAAAgV,QAAAhV,EAAAK,OAAA,QAGA,IAAA84B,GAAAn5B,EAAAgV,IACA,UAAAzS,MAAA8T,EACA,4BACArW,EAAAgV,GACA,aACA8kB,EAAA/5B,WACA,uFAQA85B,EAAA3H,KAAAwB,EAAAuB,cACA,IAAA8E,EAAA,KACA,IAAA/3B,EAAA,EAAeA,EAAA63B,EAAAx5B,OAAuB2B,IAAA,CAEtC,GADA83B,EAAAD,EAAA73B,GACA,OAAA+3B,KAAA3xB,SAAA0xB,GACA,UAAAv3B,MAAA8T,EACA,mBACA0jB,EAAAh6B,WACA,qCACA+5B,EAAA/5B,YAEAg6B,EAAAD,GAmCAE,CAAA3jB,EAAAwjB,KAEAI,GAAA,SAAA3jB,EAAAC,EAAA+iB,EAAA9iB,GACA,IAAAA,QAAA/Z,IAAA68B,EAAA,CAEA,GAAAjI,EAAAiI,GACA,UAAA/2B,MAAA4F,EAAAkO,YAAAC,EAAAC,EAAAC,GACA,MACA8iB,EAAAv5B,WACA,6FAGA,IAAAs5B,GAAAC,GACA,UAAA/2B,MAAA4F,EAAAkO,YAAAC,EAAAC,EAAAC,GACA,yFAGA0jB,GAAA,SAAA5jB,EAAAC,EAAA4jB,EAAA3jB,GACA,IAAAA,QAAA/Z,IAAA09B,EAEA,OAAAA,GACA,YACA,kBACA,oBACA,oBACA,kBACA,MACA,QACA,UAAA53B,MAAA4F,EAAAkO,YAAAC,EAAAC,EAAAC,GACA,8GAIA4jB,GAAA,SAAA9jB,EAAAC,EAAArW,EAAAsW,GACA,KAAAA,QAAA/Z,IAAAyD,GAEAi5B,GAAAj5B,IACA,UAAAqC,MAAA4F,EAAAkO,YAAAC,EAAAC,EAAAC,GACA,yBACAtW,EACA,qGAGAm6B,GAAA,SAAA/jB,EAAAC,EAAA6d,EAAA5d,GACA,KAAAA,QAAA/Z,IAAA23B,GAEAgF,GAAAhF,IACA,UAAA7xB,MAAA4F,EAAAkO,YAAAC,EAAAC,EAAAC,GACA,0BACA4d,EACA,qFAUAkG,GAAA,SAAAhkB,EAAAof,GACA,aAAAA,EAAA1B,WACA,UAAAzxB,MAAA+T,EAAA,8CAGAikB,GAAA,SAAAjkB,EAAAC,EAAAshB,GAEA,IAAAzD,EAAAyD,EAAAnC,KAAA31B,WACA,oBAAA83B,EAAAK,SAAA5B,MACA,IAAAuB,EAAAK,SAAA5B,KAAAj2B,SACA84B,GAAAtB,EAAAK,SAAAnsB,YACA,cAAA8rB,EAAAK,SAAA5B,KAAAtjB,MAAA,SACA,IAAAohB,EAAA/zB,SArPA,SAAA+zB,GAKA,OAJAA,IAEAA,IAAA9hB,QAAA,yBAEA8mB,GAAAhF,GAgPAoG,CAAApG,GACA,UAAA7xB,MAAA4F,EAAAkO,YAAAC,EAAAC,GAAA,GACA,yFA8BAkkB,GAAA,WAKA,SAAAA,EAAAC,EAAAjB,GACA/9B,KAAAg/B,QACAh/B,KAAA+9B,QA8EA,OAxEAgB,EAAAn/B,UAAAq/B,OAAA,SAAAC,GACAzyB,EAAA8Q,iBAAA,0BAAAzS,UAAAnG,QACA8H,EAAAmR,iBAAA,wBAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAg/B,MAAAG,mBAAAn/B,KAAA+9B,MAAA/Y,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAMAgpB,EAAAn/B,UAAAo0B,OAAA,SAAAkL,GACAzyB,EAAA8Q,iBAAA,0BAAAzS,UAAAnG,QACAi6B,GAAA,sBAAA5+B,KAAA+9B,OACAtxB,EAAAmR,iBAAA,wBAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAg/B,MAAAI,gBAAAp/B,KAAA+9B,MAAA,KAAA/Y,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAOAgpB,EAAAn/B,UAAAqO,IAAA,SAAAnN,EAAAo+B,GACAzyB,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACAi6B,GAAA,mBAAA5+B,KAAA+9B,OACAF,GAAA,qBAAA/8B,EAAAd,KAAA+9B,OAAA,GACAtxB,EAAAmR,iBAAA,qBAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAg/B,MAAAI,gBAAAp/B,KAAA+9B,MAAAj9B,EAAAkkB,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAQAgpB,EAAAn/B,UAAAy/B,gBAAA,SAAAv+B,EAAA88B,EAAAsB,GACAzyB,EAAA8Q,iBAAA,mCAAAzS,UAAAnG,QACAi6B,GAAA,+BAAA5+B,KAAA+9B,OACAF,GAAA,iCAAA/8B,EAAAd,KAAA+9B,OAAA,GACAQ,GAAA,iCAAAX,GAAA,GACAnxB,EAAAmR,iBAAA,iCAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAg/B,MAAAM,4BAAAt/B,KAAA+9B,MAAAj9B,EAAA88B,EAAA5Y,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAOAgpB,EAAAn/B,UAAAmZ,OAAA,SAAAwmB,EAAAL,GAGA,GAFAzyB,EAAA8Q,iBAAA,0BAAAzS,UAAAnG,QACAi6B,GAAA,sBAAA5+B,KAAA+9B,OACAlzB,MAAA8I,QAAA4rB,GAAA,CAEA,IADA,IAAAC,EAAA,GACAl5B,EAAA,EAA2BA,EAAAi5B,EAAA56B,SAA0B2B,EACrDk5B,EAAA,GAAAl5B,GAAAi5B,EAAAj5B,GAEAi5B,EAAAC,EACAzZ,EAAA,gOAGAmY,GAAA,wBAAAqB,EAAAv/B,KAAA+9B,OAAA,GACAtxB,EAAAmR,iBAAA,wBAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAg/B,MAAAS,mBAAAz/B,KAAA+9B,MAAAwB,EAAAva,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAEAgpB,EArFA,GAwGAW,GAAA,WAQA,SAAAA,EAAAC,EAAAC,GACA5/B,KAAA2/B,YACA3/B,KAAA4/B,WAQA,OAJAF,EAAA9/B,UAAAigC,OAAA,WAEA,OADApzB,EAAA8Q,iBAAA,+BAAAzS,UAAAnG,QACA,CAAgBg7B,UAAA3/B,KAAA2/B,UAAAC,SAAA5/B,KAAA4/B,SAAAC,WAEhBH,EAlBA,GAmDAI,IAEAlE,EAAA,mEAGAC,EAAA,EAKAC,EAAA,GACA,SAAA9f,GACA,IAEA1V,EAFAy5B,EAAA/jB,IAAA6f,EACAA,EAAA7f,EAEA,IAAAgkB,EAAA,IAAAn1B,MAAA,GACA,IAAAvE,EAAA,EAAmBA,GAAA,EAAQA,IAC3B05B,EAAA15B,GAAAs1B,EAAA/6B,OAAAmb,EAAA,IAGAA,EAAAC,KAAAC,MAAAF,EAAA,IAEAvP,EAAA2F,OAAA,IAAA4J,EAAA,4BACA,IAAAmK,EAAA6Z,EAAAxrB,KAAA,IACA,GAAAurB,EAKA,CAGA,IAAAz5B,EAAA,GAAwBA,GAAA,QAAAw1B,EAAAx1B,GAAmCA,IAC3Dw1B,EAAAx1B,GAAA,EAEAw1B,EAAAx1B,UAVA,IAAAA,EAAA,EAAuBA,EAAA,GAAQA,IAC/Bw1B,EAAAx1B,GAAA2V,KAAAC,MAAA,GAAAD,KAAAgN,UAWA,IAAA3iB,EAAA,EAAmBA,EAAA,GAAQA,IAC3B6f,GAAAyV,EAAA/6B,OAAAi7B,EAAAx1B,IAGA,OADAmG,EAAA2F,OAAA,KAAA+T,EAAAxhB,OAAA,oCACAwhB,IA2BA8Z,GAAA,WACA,SAAAA,EAAAv/B,EAAAw/B,GACAlgC,KAAAU,OACAV,KAAAkgC,OAWA,OAHAD,EAAAE,KAAA,SAAAz/B,EAAAw/B,GACA,WAAAD,EAAAv/B,EAAAw/B,IAEAD,EAdA,GAqCAG,GAAA,WACA,SAAAA,KA6BA,OAvBAA,EAAAxgC,UAAAygC,WAAA,WACA,OAAArgC,KAAAsgC,QAAApxB,KAAAlP,OAUAogC,EAAAxgC,UAAA2gC,oBAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAT,GAAAlK,EAAAyK,GACAG,EAAA,IAAAV,GAAAlK,EAAA0K,GACA,WAAAzgC,KAAAsgC,QAAAI,EAAAC,IAMAP,EAAAxgC,UAAAghC,QAAA,WACA,OAAAX,GAAAY,KAEAT,EA9BA,GAkDAU,GAAA,SAAAjpB,GAEA,SAAAipB,IACA,cAAAjpB,KAAA9M,MAAA/K,KAAA8K,YAAA9K,KA8DA,OAhEAgS,EAAAqG,UAAAyoB,EAAAjpB,GAIA5W,OAAAT,eAAAsgC,EAAA,gBACA/gC,IAAA,WACA,OAAAg8B,GAEA9tB,IAAA,SAAAC,GACA6tB,EAAA7tB,GAEAC,YAAA,EACArO,cAAA,IAKAghC,EAAAlhC,UAAA0gC,QAAA,SAAA1nB,EAAAC,GACA,OAAAod,EAAArd,EAAAlY,KAAAmY,EAAAnY,OAKAogC,EAAAlhC,UAAAmhC,YAAA,SAAAb,GAGA,MAAAzzB,EAAA8F,eAAA,oDAKAuuB,EAAAlhC,UAAA2gC,oBAAA,SAAAC,EAAAC,GACA,UAKAK,EAAAlhC,UAAAghC,QAAA,WACA,OAAAX,GAAAY,KAKAC,EAAAlhC,UAAAohC,QAAA,WAGA,WAAAf,GAAAjK,EAAA+F,IAOA+E,EAAAlhC,UAAAqhC,SAAA,SAAAC,EAAAxgC,GAGA,OAFA+L,EAAA2F,OAAA,iBAAA8uB,EAAA,gDAEA,IAAAjB,GAAAiB,EAAAnF,IAKA+E,EAAAlhC,UAAAyE,SAAA,WACA,cAEAy8B,EAjEA,CAkECV,IACDe,GAAA,IAAAL,GA0BA,IAyCAM,GAqQAC,GACAC,GA/SAC,GAAA,SAAA3D,GACA,uBAAAA,EACA,UAAA9G,EAAA8G,GAEA,UAAAA,GAOA4D,GAAA,SAAAC,GACA,GAAAA,EAAAC,aAAA,CACA,IAAAxzB,EAAAuzB,EAAAvzB,MACAzB,EAAA2F,OAAA,iBAAAlE,GACA,iBAAAA,GACA,iBAAAA,GAAAzB,EAAAC,SAAAwB,EAAA,oDAGAzB,EAAA2F,OAAAqvB,IAAAzF,GAAAyF,EAAA9kB,UAAA,gCAGAlQ,EAAA2F,OAAAqvB,IAAAzF,GAAAyF,EAAAE,cAAAhlB,UAAA,uDAyBAilB,GAAA,WAOA,SAAAA,EAAAC,EAAAC,QACA,IAAAA,IAAuCA,EAAAF,EAAAR,0BAAAW,YACvC/hC,KAAA6hC,SACA7hC,KAAA8hC,gBACA9hC,KAAAgiC,UAAA,KACAv1B,EAAA2F,YAAArR,IAAAf,KAAA6hC,QAAA,OAAA7hC,KAAA6hC,OAAA,4DACAL,GAAAxhC,KAAA8hC,eA+NA,OA7NA7gC,OAAAT,eAAAohC,EAAA,6BACA7hC,IAAA,WACA,OAAAqhC,IAEAnzB,IAAA,SAAAC,GACAkzB,GAAAlzB,GAEAC,YAAA,EACArO,cAAA,IAGA8hC,EAAAhiC,UAAA8hC,WAAA,WACA,UAGAE,EAAAhiC,UAAA+hC,YAAA,WACA,OAAA3hC,KAAA8hC,eAGAF,EAAAhiC,UAAAqiC,eAAA,SAAAC,GACA,WAAAN,EAAA5hC,KAAA6hC,OAAAK,IAGAN,EAAAhiC,UAAAuiC,kBAAA,SAAAC,GAEA,oBAAAA,EACApiC,KAAA8hC,cAGAF,EAAAR,0BAAAW,YAIAH,EAAAhiC,UAAAyiC,SAAA,SAAArI,GACA,OAAAA,EAAArd,UACA3c,KAEA,cAAAg6B,EAAA1B,WACAt4B,KAAA8hC,cAGAF,EAAAR,0BAAAW,YAMAH,EAAAhiC,UAAA0iC,SAAA,WACA,UAGAV,EAAAhiC,UAAA2iC,wBAAA,SAAAH,EAAAI,GACA,aAGAZ,EAAAhiC,UAAA6iC,qBAAA,SAAAL,EAAAM,GACA,oBAAAN,EACApiC,KAAAiiC,eAAAS,GAEAA,EAAA/lB,WAAA,cAAAylB,EACApiC,KAGA4hC,EAAAR,0BAAAW,WAAAU,qBAAAL,EAAAM,GAAAT,eAAAjiC,KAAA8hC,gBAIAF,EAAAhiC,UAAA+iC,YAAA,SAAA3I,EAAA0I,GACA,IAAAE,EAAA5I,EAAA1B,WACA,cAAAsK,EACAF,EAEAA,EAAA/lB,WAAA,cAAAimB,EACA5iC,MAGAyM,EAAA2F,OAAA,cAAAwwB,GAAA,IAAA5I,EAAAzB,YAAA,8CACAv4B,KAAAyiC,qBAAAG,EAAAhB,EAAAR,0BAAAW,WAAAY,YAAA3I,EAAAxB,WAAAkK,MAIAd,EAAAhiC,UAAA+c,QAAA,WACA,UAGAilB,EAAAhiC,UAAAijC,YAAA,WACA,UAGAjB,EAAAhiC,UAAAkjC,aAAA,SAAA3Y,EAAA4Y,GACA,UAKAnB,EAAAhiC,UAAAsO,IAAA,SAAA80B,GACA,OAAAA,IAAAhjC,KAAA2hC,cAAAhlB,UACA,CACAsmB,SAAAjjC,KAAAkjC,WACAC,YAAAnjC,KAAA2hC,cAAAzzB,OAGAlO,KAAAkjC,YAGAtB,EAAAhiC,UAAAwjC,KAAA,WACA,UAAApjC,KAAAgiC,UAAA,CACA,IAAAqB,EAAA,GACArjC,KAAA8hC,cAAAnlB,YACA0mB,GACA,YACA9B,GAAAvhC,KAAA8hC,cAAA5zB,OACA,KACA,IAAArI,SAAA7F,KAAA6hC,OACAwB,GAAAx9B,EAAA,IAEAw9B,GADA,WAAAx9B,EACAixB,EAAA92B,KAAA6hC,QAGA7hC,KAAA6hC,OAEA7hC,KAAAgiC,UAAApN,EAAAyO,GAEA,OAAArjC,KAAAgiC,WAMAJ,EAAAhiC,UAAAsjC,SAAA,WACA,OAAAljC,KAAA6hC,QAKAD,EAAAhiC,UAAA0jC,UAAA,SAAAxJ,GACA,OAAAA,IAAA8H,EAAAR,0BAAAW,WACA,EAEAjI,aAAA8H,EAAAR,2BACA,GAGA30B,EAAA2F,OAAA0nB,EAAA4H,aAAA,qBACA1hC,KAAAujC,mBAAAzJ,KASA8H,EAAAhiC,UAAA2jC,mBAAA,SAAAC,GACA,IAAAC,SAAAD,EAAA3B,OACA6B,SAAA1jC,KAAA6hC,OACA8B,EAAA/B,EAAAgC,iBAAAzlB,QAAAslB,GACAI,EAAAjC,EAAAgC,iBAAAzlB,QAAAulB,GAGA,OAFAj3B,EAAA2F,OAAAuxB,GAAA,wBAAAF,GACAh3B,EAAA2F,OAAAyxB,GAAA,wBAAAH,GACAC,IAAAE,EAEA,WAAAH,EAEA,EAIA1jC,KAAA6hC,OAAA2B,EAAA3B,QACA,EAEA7hC,KAAA6hC,SAAA2B,EAAA3B,OACA,EAGA,EAKAgC,EAAAF,GAMA/B,EAAAhiC,UAAAkkC,UAAA,WACA,OAAA9jC,MAKA4hC,EAAAhiC,UAAAmkC,UAAA,WACA,UAKAnC,EAAAhiC,UAAAi6B,OAAA,SAAAC,GAIA,GAAAA,IAAA95B,KACA,SAEA,GAAA85B,EAAA4H,aAAA,CACA,IAAA8B,EAAA1J,EACA,OAAA95B,KAAA6hC,SAAA2B,EAAA3B,QACA7hC,KAAA8hC,cAAAjI,OAAA2J,EAAA1B,eAGA,UASAF,EAAAgC,iBAAA,uCACAhC,EA5OA,GA4QA,IAw1BAoC,GAoMAjC,GAh+BAkC,GAAA,IA5DA,SAAApsB,GAEA,SAAAqsB,IACA,cAAArsB,KAAA9M,MAAA/K,KAAA8K,YAAA9K,KAuDA,OAzDAgS,EAAAqG,UAAA6rB,EAAArsB,GAOAqsB,EAAAtkC,UAAA0gC,QAAA,SAAA1nB,EAAAC,GACA,IAAAsrB,EAAAvrB,EAAAsnB,KAAAyB,cACAyC,EAAAvrB,EAAAqnB,KAAAyB,cACA0C,EAAAF,EAAAb,UAAAc,GACA,WAAAC,EACApO,EAAArd,EAAAlY,KAAAmY,EAAAnY,MAGA2jC,GAMAH,EAAAtkC,UAAAmhC,YAAA,SAAAb,GACA,OAAAA,EAAAyB,cAAAhlB,WAKAunB,EAAAtkC,UAAA2gC,oBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAmB,cAAA9H,OAAA4G,EAAAkB,gBAKAuC,EAAAtkC,UAAAghC,QAAA,WACA,OAAAX,GAAAY,KAKAqD,EAAAtkC,UAAAohC,QAAA,WACA,WAAAf,GAAAjK,EAAA,IAAA4L,GAAA,kBAAAN,MAOA4C,EAAAtkC,UAAAqhC,SAAA,SAAAC,EAAAxgC,GACA,IAAA+gC,EAAAJ,GAAAH,GACA,WAAAjB,GAAAv/B,EAAA,IAAAkhC,GAAA,kBAAAH,KAKAyC,EAAAtkC,UAAAyE,SAAA,WACA,mBAEA6/B,EA1DA,CA2DC9D,KAsBDkE,GAAA,WASA,SAAAA,EAAApE,EAAAqE,EAAAC,EAAAC,EAAAC,QACA,IAAAA,IAA0CA,EAAA,MAC1C1kC,KAAAykC,aACAzkC,KAAA0kC,mBAIA1kC,KAAA2kC,WAAA,GAEA,IADA,IAAA/K,EAAA,GACAsG,EAAAvjB,WAMA,GALAujB,IACAtG,EAAA2K,EAAAC,EAAAtE,EAAA17B,IAAA+/B,GAAA,EAEAE,IACA7K,IAAA,GACAA,EAAA,EAGAsG,EADAlgC,KAAAykC,WACAvE,EAAA1G,KAGA0G,EAAAzG,UAGA,QAAAG,EAAA,CAEA55B,KAAA2kC,WAAAlgC,KAAAy7B,GACA,MAIAlgC,KAAA2kC,WAAAlgC,KAAAy7B,GAEAA,EADAlgC,KAAAykC,WACAvE,EAAAzG,MAGAyG,EAAA1G,MA4CA,OAvCA8K,EAAA1kC,UAAAglC,QAAA,WACA,OAAA5kC,KAAA2kC,WAAAhgC,OACA,YACA,IACAR,EADA+7B,EAAAlgC,KAAA2kC,WAAA//B,MAMA,GAHAT,EADAnE,KAAA0kC,iBACA1kC,KAAA0kC,iBAAAxE,EAAA17B,IAAA07B,EAAAp/B,OAEA,CAAsB0D,IAAA07B,EAAA17B,IAAA1D,MAAAo/B,EAAAp/B,OACtBd,KAAAykC,WAEA,IADAvE,IAAA1G,MACA0G,EAAAvjB,WACA3c,KAAA2kC,WAAAlgC,KAAAy7B,GACAA,IAAAzG,WAKA,IADAyG,IAAAzG,OACAyG,EAAAvjB,WACA3c,KAAA2kC,WAAAlgC,KAAAy7B,GACAA,IAAA1G,KAGA,OAAAr1B,GAEAmgC,EAAA1kC,UAAAilC,QAAA,WACA,OAAA7kC,KAAA2kC,WAAAhgC,OAAA,GAEA2/B,EAAA1kC,UAAAklC,KAAA,WACA,OAAA9kC,KAAA2kC,WAAAhgC,OACA,YACA,IAAAu7B,EAAAlgC,KAAA2kC,WAAA3kC,KAAA2kC,WAAAhgC,OAAA,GACA,OAAA3E,KAAA0kC,iBACA1kC,KAAA0kC,iBAAAxE,EAAA17B,IAAA07B,EAAAp/B,OAGA,CAAoB0D,IAAA07B,EAAA17B,IAAA1D,MAAAo/B,EAAAp/B,QAGpBwjC,EAzFA,GA8FAS,GAAA,WASA,SAAAA,EAAAvgC,EAAA1D,EAAAkkC,EAAAxL,EAAAC,GACAz5B,KAAAwE,MACAxE,KAAAc,QACAd,KAAAglC,MAAA,MAAAA,IAAAD,EAAAE,IACAjlC,KAAAw5B,KACA,MAAAA,IAAA0L,GAAAnD,WACA/hC,KAAAy5B,MACA,MAAAA,IAAAyL,GAAAnD,WA+PA,OAnPAgD,EAAAnlC,UAAAulC,KAAA,SAAA3gC,EAAA1D,EAAAkkC,EAAAxL,EAAAC,GACA,WAAAsL,EAAA,MAAAvgC,IAAAxE,KAAAwE,IAAA,MAAA1D,IAAAd,KAAAc,MAAA,MAAAkkC,IAAAhlC,KAAAglC,MAAA,MAAAxL,IAAAx5B,KAAAw5B,KAAA,MAAAC,IAAAz5B,KAAAy5B,QAKAsL,EAAAnlC,UAAA6qB,MAAA,WACA,OAAAzqB,KAAAw5B,KAAA/O,QAAA,EAAAzqB,KAAAy5B,MAAAhP,SAKAsa,EAAAnlC,UAAA+c,QAAA,WACA,UAWAooB,EAAAnlC,UAAAwlC,iBAAA,SAAArC,GACA,OAAA/iC,KAAAw5B,KAAA4L,iBAAArC,IACAA,EAAA/iC,KAAAwE,IAAAxE,KAAAc,QACAd,KAAAy5B,MAAA2L,iBAAArC,IAUAgC,EAAAnlC,UAAAylC,iBAAA,SAAAtC,GACA,OAAA/iC,KAAAy5B,MAAA4L,iBAAAtC,IACAA,EAAA/iC,KAAAwE,IAAAxE,KAAAc,QACAd,KAAAw5B,KAAA6L,iBAAAtC,IAMAgC,EAAAnlC,UAAA0lC,KAAA,WACA,OAAAtlC,KAAAw5B,KAAA7c,UACA3c,KAGAA,KAAAw5B,KAAA8L,QAMAP,EAAAnlC,UAAA2lC,OAAA,WACA,OAAAvlC,KAAAslC,OAAA9gC,KAKAugC,EAAAnlC,UAAA4lC,OAAA,WACA,OAAAxlC,KAAAy5B,MAAA9c,UACA3c,KAAAwE,IAGAxE,KAAAy5B,MAAA+L,UAUAT,EAAAnlC,UAAA6lC,OAAA,SAAAjhC,EAAA1D,EAAA0jC,GACA,IAAA5K,EAAA1gB,EAYA,OARAA,GAFA0gB,EAAA4K,EAAAhgC,GADA0U,EAAAlZ,MACAwE,MACA,EACA0U,EAAAisB,KAAA,eAAAjsB,EAAAsgB,KAAAiM,OAAAjhC,EAAA1D,EAAA0jC,GAAA,MAEA,IAAA5K,EACA1gB,EAAAisB,KAAA,KAAArkC,EAAA,gBAGAoY,EAAAisB,KAAA,oBAAAjsB,EAAAugB,MAAAgM,OAAAjhC,EAAA1D,EAAA0jC,KAEAkB,UAMAX,EAAAnlC,UAAA+lC,WAAA,WACA,GAAA3lC,KAAAw5B,KAAA7c,UACA,OAAAuoB,GAAAnD,WAEA,IAAA7oB,EAAAlZ,KAIA,OAHAkZ,EAAAsgB,KAAAoM,UAAA1sB,EAAAsgB,UAAAoM,WACA1sB,IAAA2sB,iBACA3sB,IAAAisB,KAAA,eAAAjsB,EAAAsgB,KAAAmM,aAAA,OACAD,UAOAX,EAAAnlC,UAAAo0B,OAAA,SAAAxvB,EAAAggC,GACA,IAAAtrB,EAAA4sB,EAEA,GAAAtB,EAAAhgC,GADA0U,EAAAlZ,MACAwE,KAAA,EACA0U,EAAAsgB,KAAA7c,WAAAzD,EAAAsgB,KAAAoM,UAAA1sB,EAAAsgB,UAAAoM,WACA1sB,IAAA2sB,gBAEA3sB,IAAAisB,KAAA,eAAAjsB,EAAAsgB,KAAAxF,OAAAxvB,EAAAggC,GAAA,UAEA,CAMA,GALAtrB,EAAAsgB,KAAAoM,WACA1sB,IAAA6sB,gBACA7sB,EAAAugB,MAAA9c,WAAAzD,EAAAugB,MAAAmM,UAAA1sB,EAAAugB,MAAAD,KAAAoM,WACA1sB,IAAA8sB,iBAEA,IAAAxB,EAAAhgC,EAAA0U,EAAA1U,KAAA,CACA,GAAA0U,EAAAugB,MAAA9c,UACA,OAAAuoB,GAAAnD,WAGA+D,EAAA5sB,EAAAugB,MAAA6L,OACApsB,IAAAisB,KAAAW,EAAAthC,IAAAshC,EAAAhlC,MAAA,UAAAoY,EAAAugB,MAAAkM,cAGAzsB,IAAAisB,KAAA,oBAAAjsB,EAAAugB,MAAAzF,OAAAxvB,EAAAggC,IAEA,OAAAtrB,EAAAwsB,UAMAX,EAAAnlC,UAAAgmC,OAAA,WACA,OAAA5lC,KAAAglC,OAMAD,EAAAnlC,UAAA8lC,OAAA,WACA,IAAAxsB,EAAAlZ,KAOA,OANAkZ,EAAAugB,MAAAmM,WAAA1sB,EAAAsgB,KAAAoM,WACA1sB,IAAA+sB,eACA/sB,EAAAsgB,KAAAoM,UAAA1sB,EAAAsgB,UAAAoM,WACA1sB,IAAA6sB,gBACA7sB,EAAAsgB,KAAAoM,UAAA1sB,EAAAugB,MAAAmM,WACA1sB,IAAAgtB,cACAhtB,GAMA6rB,EAAAnlC,UAAAimC,aAAA,WACA,IAAA3sB,EAAAlZ,KAAAkmC,aAMA,OALAhtB,EAAAugB,MAAAD,KAAAoM,WAGA1sB,GADAA,GADAA,IAAAisB,KAAA,oBAAAjsB,EAAAugB,MAAAsM,iBACAE,eACAC,cAEAhtB,GAMA6rB,EAAAnlC,UAAAomC,cAAA,WACA,IAAA9sB,EAAAlZ,KAAAkmC,aAKA,OAJAhtB,EAAAsgB,UAAAoM,WAEA1sB,GADAA,IAAA6sB,gBACAG,cAEAhtB,GAMA6rB,EAAAnlC,UAAAqmC,YAAA,WACA,IAAAE,EAAAnmC,KAAAmlC,KAAA,UAAAJ,EAAAE,IAAA,KAAAjlC,KAAAy5B,MAAAD,MACA,OAAAx5B,KAAAy5B,MAAA0L,KAAA,UAAAnlC,KAAAglC,MAAAmB,EAAA,OAMApB,EAAAnlC,UAAAmmC,aAAA,WACA,IAAAK,EAAApmC,KAAAmlC,KAAA,UAAAJ,EAAAE,IAAAjlC,KAAAw5B,KAAAC,MAAA,MACA,OAAAz5B,KAAAw5B,KAAA2L,KAAA,UAAAnlC,KAAAglC,MAAA,KAAAoB,IAMArB,EAAAnlC,UAAAsmC,WAAA,WACA,IAAA1M,EAAAx5B,KAAAw5B,KAAA2L,KAAA,WAAAnlC,KAAAw5B,KAAAwL,MAAA,WACAvL,EAAAz5B,KAAAy5B,MAAA0L,KAAA,WAAAnlC,KAAAy5B,MAAAuL,MAAA,WACA,OAAAhlC,KAAAmlC,KAAA,WAAAnlC,KAAAglC,MAAAxL,EAAAC,IAQAsL,EAAAnlC,UAAAymC,eAAA,WACA,IAAAC,EAAAtmC,KAAAumC,SACA,OAAAtqB,KAAAib,IAAA,EAAAoP,IAAAtmC,KAAAyqB,QAAA,GAMAsa,EAAAnlC,UAAA2mC,OAAA,WACA,IAAAD,EACA,GAAAtmC,KAAA4lC,UAAA5lC,KAAAw5B,KAAAoM,SACA,UAAA/+B,MAAA,0BAAA7G,KAAAwE,IAAA,IAAAxE,KAAAc,MAAA,KAEA,GAAAd,KAAAy5B,MAAAmM,SACA,UAAA/+B,MAAA,mBAAA7G,KAAAwE,IAAA,IAAAxE,KAAAc,MAAA,YAGA,IADAwlC,EAAAtmC,KAAAw5B,KAAA+M,YACAvmC,KAAAy5B,MAAA8M,SACA,UAAA1/B,MAAA,uBAGA,OAAAy/B,GAAAtmC,KAAA4lC,SAAA,MAGAb,EAAAE,KAAA,EACAF,EAAAyB,OAAA,EACAzB,EA/QA,GAoRA0B,GAAA,WACA,SAAAA,KA2FA,OApFAA,EAAA7mC,UAAAulC,KAAA,SAAA3gC,EAAA1D,EAAAkkC,EAAAxL,EAAAC,GACA,OAAAz5B,MAUAymC,EAAA7mC,UAAA6lC,OAAA,SAAAjhC,EAAA1D,EAAA0jC,GACA,WAAAO,GAAAvgC,EAAA1D,EAAA,OASA2lC,EAAA7mC,UAAAo0B,OAAA,SAAAxvB,EAAAggC,GACA,OAAAxkC,MAKAymC,EAAA7mC,UAAA6qB,MAAA,WACA,UAKAgc,EAAA7mC,UAAA+c,QAAA,WACA,UAUA8pB,EAAA7mC,UAAAwlC,iBAAA,SAAArC,GACA,UAUA0D,EAAA7mC,UAAAylC,iBAAA,SAAAtC,GACA,UAKA0D,EAAA7mC,UAAA2lC,OAAA,WACA,aAKAkB,EAAA7mC,UAAA4lC,OAAA,WACA,aAMAiB,EAAA7mC,UAAA2mC,OAAA,WACA,UAMAE,EAAA7mC,UAAAgmC,OAAA,WACA,UAEAa,EA5FA,GAkGAvB,GAAA,WAMA,SAAAA,EAAAwB,EAAAC,QACA,IAAAA,IAA+BA,EAAAzB,EAAAnD,YAC/B/hC,KAAA0mC,cACA1mC,KAAA2mC,QAyJA,OA/IAzB,EAAAtlC,UAAA6lC,OAAA,SAAAjhC,EAAA1D,GACA,WAAAokC,EAAAllC,KAAA0mC,YAAA1mC,KAAA2mC,MACAlB,OAAAjhC,EAAA1D,EAAAd,KAAA0mC,aACAvB,KAAA,UAAAJ,GAAAyB,MAAA,aAQAtB,EAAAtlC,UAAAo0B,OAAA,SAAAxvB,GACA,WAAA0gC,EAAAllC,KAAA0mC,YAAA1mC,KAAA2mC,MACA3S,OAAAxvB,EAAAxE,KAAA0mC,aACAvB,KAAA,UAAAJ,GAAAyB,MAAA,aASAtB,EAAAtlC,UAAAG,IAAA,SAAAyE,GAGA,IAFA,IAAAo1B,EACAsG,EAAAlgC,KAAA2mC,OACAzG,EAAAvjB,WAAA,CAEA,QADAid,EAAA55B,KAAA0mC,YAAAliC,EAAA07B,EAAA17B,MAEA,OAAA07B,EAAAp/B,MAEA84B,EAAA,EACAsG,IAAA1G,KAEAI,EAAA,IACAsG,IAAAzG,OAGA,aAOAyL,EAAAtlC,UAAAgnC,kBAAA,SAAApiC,GAEA,IADA,IAAAo1B,EAAAsG,EAAAlgC,KAAA2mC,MAAAE,EAAA,MACA3G,EAAAvjB,WAAA,CAEA,QADAid,EAAA55B,KAAA0mC,YAAAliC,EAAA07B,EAAA17B,MACA,CACA,GAAA07B,EAAA1G,KAAA7c,UAMA,OAAAkqB,EACAA,EAAAriC,IAGA,KARA,IADA07B,IAAA1G,MACA0G,EAAAzG,MAAA9c,WACAujB,IAAAzG,MACA,OAAAyG,EAAA17B,IASAo1B,EAAA,EACAsG,IAAA1G,KAEAI,EAAA,IACAiN,EAAA3G,EACAA,IAAAzG,OAGA,UAAA5yB,MAAA,0EAKAq+B,EAAAtlC,UAAA+c,QAAA,WACA,OAAA3c,KAAA2mC,MAAAhqB,WAKAuoB,EAAAtlC,UAAA6qB,MAAA,WACA,OAAAzqB,KAAA2mC,MAAAlc,SAKAya,EAAAtlC,UAAA2lC,OAAA,WACA,OAAAvlC,KAAA2mC,MAAApB,UAKAL,EAAAtlC,UAAA4lC,OAAA,WACA,OAAAxlC,KAAA2mC,MAAAnB,UAWAN,EAAAtlC,UAAAwlC,iBAAA,SAAArC,GACA,OAAA/iC,KAAA2mC,MAAAvB,iBAAArC,IAUAmC,EAAAtlC,UAAAylC,iBAAA,SAAAtC,GACA,OAAA/iC,KAAA2mC,MAAAtB,iBAAAtC,IAQAmC,EAAAtlC,UAAAknC,YAAA,SAAAC,GACA,WAAAzC,GAAAtkC,KAAA2mC,MAAA,KAAA3mC,KAAA0mC,aAAA,EAAAK,IAEA7B,EAAAtlC,UAAAonC,gBAAA,SAAAxiC,EAAAuiC,GACA,WAAAzC,GAAAtkC,KAAA2mC,MAAAniC,EAAAxE,KAAA0mC,aAAA,EAAAK,IAEA7B,EAAAtlC,UAAAqnC,uBAAA,SAAAziC,EAAAuiC,GACA,WAAAzC,GAAAtkC,KAAA2mC,MAAAniC,EAAAxE,KAAA0mC,aAAA,EAAAK,IAEA7B,EAAAtlC,UAAAsnC,mBAAA,SAAAH,GACA,WAAAzC,GAAAtkC,KAAA2mC,MAAA,KAAA3mC,KAAA0mC,aAAA,EAAAK,IAMA7B,EAAAnD,WAAA,IAAA0E,GACAvB,EAlKA,GAqLAiC,GAAAlrB,KAAAzM,IAAA,GAIA43B,GAAA,WAIA,SAAAA,EAAAziC,GACA,IAAA0iC,EAIArnC,KAAAyqB,OAJA4c,EAIA1iC,EAAA,EAHA4yB,SAAAtb,KAAAzM,IAAA63B,GAAAF,GAAA,KAIAnnC,KAAAsnC,SAAAtnC,KAAAyqB,MAAA,EACA,IAHAuM,EAGAuQ,GAHAvQ,EAGAh3B,KAAAyqB,MAHuC8M,SAAA1sB,MAAAmsB,EAAA,GAAAxiB,KAAA,SAIvCxU,KAAAwnC,MAAA7iC,EAAA,EAAA4iC,EAWA,OANAH,EAAAxnC,UAAA6nC,aAAA,WAEA,IAAAtjC,IAAAnE,KAAAwnC,MAAA,GAAAxnC,KAAAsnC,UAEA,OADAtnC,KAAAsnC,WACAnjC,GAEAijC,EAvBA,GAwCAM,GAAA,SAAAC,EAAA/N,EAAAgO,EAAAC,GACAF,EAAAnR,KAAAoD,GACA,IAAAkO,EAAA,SAAAC,EAAA/pB,GACA,IACAgqB,EACAxjC,EAFAG,EAAAqZ,EAAA+pB,EAGA,MAAApjC,EACA,YAEA,MAAAA,EAGA,OAFAqjC,EAAAL,EAAAI,GACAvjC,EAAAojC,IAAAI,KACA,IAAAjD,GAAAvgC,EAAAwjC,EAAA9H,KAAA6E,GAAAyB,MAAA,WAGA,IAAAyB,EAAA1Q,SAAA5yB,EAAA,MAAAojC,EACAvO,EAAAsO,EAAAC,EAAAE,GACAxO,EAAAqO,EAAAG,EAAA,EAAAjqB,GAGA,OAFAgqB,EAAAL,EAAAM,GACAzjC,EAAAojC,IAAAI,KACA,IAAAjD,GAAAvgC,EAAAwjC,EAAA9H,KAAA6E,GAAAyB,MAAAhN,EAAAC,IA0CAyO,EAvCA,SAAAC,GAuBA,IAtBA,IAAAjI,EAAA,KACAgI,EAAA,KACA/d,EAAAwd,EAAAhjC,OACAyjC,EAAA,SAAAC,EAAArD,GACA,IAAA+C,EAAA5d,EAAAke,EACArqB,EAAAmM,EACAA,GAAAke,EACA,IAAAC,EAAAR,EAAAC,EAAA,EAAA/pB,GACAgqB,EAAAL,EAAAI,GACAvjC,EAAAojC,IAAAI,KACAO,EAAA,IAAAxD,GAAAvgC,EAAAwjC,EAAA9H,KAAA8E,EAAA,KAAAsD,KAEAC,EAAA,SAAAC,GACAtI,GACAA,EAAA1G,KAAAgP,EACAtI,EAAAsI,IAGAN,EAAAM,EACAtI,EAAAsI,IAGAliC,EAAA,EAAuBA,EAAA6hC,EAAA1d,QAAkBnkB,EAAA,CACzC,IAAAmiC,EAAAN,EAAAV,eAEAY,EAAApsB,KAAAib,IAAA,EAAAiR,EAAA1d,OAAAnkB,EAAA,IACAmiC,EACAL,EAAAC,EAAAtD,GAAAyB,QAIA4B,EAAAC,EAAAtD,GAAAyB,OACA4B,EAAAC,EAAAtD,GAAAE,MAGA,OAAAiD,EAGAQ,CADA,IAAAtB,GAAAO,EAAAhjC,SAEA,WAAAugC,GAAA2C,GAAAjO,EAAAsO,IAoBAS,GAAA,GAOAC,GAAA,WACA,SAAAA,EAAAC,EAAAC,GACA9oC,KAAA6oC,WACA7oC,KAAA8oC,YA8IA,OA5IA7nC,OAAAT,eAAAooC,EAAA,WAMA7oC,IAAA,WAKA,OAJA0M,EAAA2F,OAAAu2B,IAAA1E,GAAA,uCACAD,GACAA,IACA,IAAA4E,EAAA,CAAkCzF,YAAAwF,IAA8B,CAAGxF,YAAAc,MAGnE91B,YAAA,EACArO,cAAA,IAOA8oC,EAAAhpC,UAAAG,IAAA,SAAAgpC,GACA,IAAAC,EAAAv8B,EAAAqQ,QAAA9c,KAAA6oC,SAAAE,GACA,IAAAC,EACA,UAAAniC,MAAA,wBAAAkiC,GACA,OAAAC,IAAAL,GAGA,KAGAK,GAOAJ,EAAAhpC,UAAAqpC,SAAA,SAAAC,GACA,OAAAz8B,EAAAC,SAAA1M,KAAA8oC,UAAAI,EAAA7kC,aAOAukC,EAAAhpC,UAAAupC,SAAA,SAAAD,EAAAE,GACA38B,EAAA2F,OAAA82B,IAAA/H,GAAA,uEAKA,IAJA,IAUAkI,EAVA1B,EAAA,GACA2B,GAAA,EACAtlC,EAAAolC,EAAAtC,YAAA7G,GAAAE,MACAl8B,EAAAD,EAAA4gC,UACA3gC,GACAqlC,EACAA,GAAAJ,EAAAnI,YAAA98B,EAAAi8B,MACAyH,EAAAljC,KAAAR,GACAA,EAAAD,EAAA4gC,UAIAyE,EADAC,EACA5B,GAAAC,EAAAuB,EAAA7I,cAGAsI,GAEA,IAAAY,EAAAL,EAAA7kC,WACAmlC,EAAA/8B,EAAA0P,MAAAnc,KAAA8oC,WACAU,EAAAD,GAAAL,EACA,IAAAO,EAAAh9B,EAAA0P,MAAAnc,KAAA6oC,UAEA,OADAY,EAAAF,GAAAF,EACA,IAAAT,EAAAa,EAAAD,IAQAZ,EAAAhpC,UAAA8pC,aAAA,SAAA1B,EAAAoB,GACA,IAAA/6B,EAAArO,KAkCA,WAAA4oC,EAjCAn8B,EAAAkC,IAAA3O,KAAA6oC,SAAA,SAAAc,EAAAJ,GACA,IAAApf,EAAA1d,EAAAqQ,QAAAzO,EAAAy6B,UAAAS,GAEA,GADA98B,EAAA2F,OAAA+X,EAAA,oCAAAof,GACAI,IAAAhB,GAAA,CAEA,GAAAxe,EAAA4W,YAAAiH,EAAA9H,MAAA,CAKA,IAHA,IAAAyH,EAAA,GACA3jC,EAAAolC,EAAAtC,YAAA7G,GAAAE,MACAl8B,EAAAD,EAAA4gC,UACA3gC,GACAA,EAAAvD,MAAAsnC,EAAAtnC,MACAinC,EAAAljC,KAAAR,GAEAA,EAAAD,EAAA4gC,UAGA,OADA+C,EAAAljC,KAAAujC,GACAN,GAAAC,EAAAxd,EAAAkW,cAIA,OAAAsI,GAIA,IAAAiB,EAAAR,EAAArpC,IAAAioC,EAAAtnC,MACAmpC,EAAAF,EAIA,OAHAC,IACAC,IAAA7V,OAAA,IAAAiM,GAAA+H,EAAAtnC,KAAAkpC,KAEAC,EAAApE,OAAAuC,IAAA9H,QAGAlgC,KAAA8oC,YAQAF,EAAAhpC,UAAAkqC,kBAAA,SAAA9B,EAAAoB,GAiBA,WAAAR,EAhBAn8B,EAAAkC,IAAA3O,KAAA6oC,SAAA,SAAAc,GACA,GAAAA,IAAAhB,GAEA,OAAAgB,EAGA,IAAAC,EAAAR,EAAArpC,IAAAioC,EAAAtnC,MACA,OAAAkpC,EACAD,EAAA3V,OAAA,IAAAiM,GAAA+H,EAAAtnC,KAAAkpC,IAIAD,IAIA3pC,KAAA8oC,YAEAF,EAjJA,GAoKA,SAAAmB,GAAAvQ,EAAAC,GACA,OAAAxD,EAAAuD,EAAA94B,KAAA+4B,EAAA/4B,MAEA,SAAAspC,GAAAxQ,EAAAC,GACA,OAAAxD,EAAAuD,EAAAC,GA6BA,IAAAwQ,GAAA,WAQA,SAAAA,EAAAC,EAAApI,EAAAqI,GACAnqC,KAAAkqC,YACAlqC,KAAA8hC,gBACA9hC,KAAAmqC,YACAnqC,KAAAgiC,UAAA,KAMAhiC,KAAA8hC,eACAN,GAAAxhC,KAAA8hC,eAEA9hC,KAAAkqC,UAAAvtB,WACAlQ,EAAA2F,QAAApS,KAAA8hC,eAAA9hC,KAAA8hC,cAAAnlB,UAAA,wCAuXA,OApXA1b,OAAAT,eAAAypC,EAAA,cACAlqC,IAAA,WACA,OAAAgiC,KACAA,GAAA,IAAAkI,EAAA,IAAA/E,GAAA8E,IAAA,KAAApB,GAAAwB,WAEAj8B,YAAA,EACArO,cAAA,IAGAmqC,EAAArqC,UAAA8hC,WAAA,WACA,UAGAuI,EAAArqC,UAAA+hC,YAAA,WACA,OAAA3hC,KAAA8hC,eAAAC,IAGAkI,EAAArqC,UAAAqiC,eAAA,SAAAC,GACA,OAAAliC,KAAAkqC,UAAAvtB,UAEA3c,KAGA,IAAAiqC,EAAAjqC,KAAAkqC,UAAAhI,EAAAliC,KAAAmqC,YAIAF,EAAArqC,UAAAuiC,kBAAA,SAAAC,GAEA,iBAAAA,EACA,OAAApiC,KAAA2hC,cAGA,IAAA5I,EAAA/4B,KAAAkqC,UAAAnqC,IAAAqiC,GACA,cAAArJ,EAAAgJ,GAAAhJ,GAIAkR,EAAArqC,UAAAyiC,SAAA,SAAArI,GACA,IAAA4I,EAAA5I,EAAA1B,WACA,cAAAsK,EACA5iC,KACAA,KAAAmiC,kBAAAS,GAAAP,SAAArI,EAAAxB,aAGAyR,EAAArqC,UAAA0iC,SAAA,SAAAF,GACA,cAAApiC,KAAAkqC,UAAAnqC,IAAAqiC,IAGA6H,EAAArqC,UAAA6iC,qBAAA,SAAAL,EAAAM,GAEA,GADAj2B,EAAA2F,OAAAswB,EAAA,8CACA,cAAAN,EACA,OAAApiC,KAAAiiC,eAAAS,GAGA,IACA2H,EADArC,EAAA,IAAA/H,GAAAmC,EAAAM,GACAmH,OAAA,EAAAS,OAAA,EAUA,OATA5H,EAAA/lB,WACAktB,EAAA7pC,KAAAkqC,UAAAlW,OAAAoO,GACAkI,EAAAtqC,KAAAmqC,UAAAL,kBAAA9B,EAAAhoC,KAAAkqC,aAGAL,EAAA7pC,KAAAkqC,UAAAzE,OAAArD,EAAAM,GACA4H,EAAAtqC,KAAAmqC,UAAAT,aAAA1B,EAAAhoC,KAAAkqC,YAEAG,EAAAR,EAAAltB,UAAAolB,GAAA/hC,KAAA8hC,cACA,IAAAmI,EAAAJ,EAAAQ,EAAAC,IAIAL,EAAArqC,UAAA+iC,YAAA,SAAA3I,EAAA0I,GACA,IAAAE,EAAA5I,EAAA1B,WACA,UAAAsK,EACA,OAAAF,EAGAj2B,EAAA2F,OAAA,cAAA4nB,EAAA1B,YAAA,IAAA0B,EAAAzB,YAAA,8CACA,IAAAgS,EAAAvqC,KAAAmiC,kBAAAS,GAAAD,YAAA3I,EAAAxB,WAAAkK,GACA,OAAA1iC,KAAAyiC,qBAAAG,EAAA2H,IAIAN,EAAArqC,UAAA+c,QAAA,WACA,OAAA3c,KAAAkqC,UAAAvtB,WAGAstB,EAAArqC,UAAAijC,YAAA,WACA,OAAA7iC,KAAAkqC,UAAAzf,SAGAwf,EAAArqC,UAAAsO,IAAA,SAAA80B,GACA,GAAAhjC,KAAA2c,UACA,YACA,IAAAxU,EAAA,GACAqiC,EAAA,EAAAhF,EAAA,EAAAiF,GAAA,EAWA,GAVAzqC,KAAA8iC,aAAAmB,GAAA,SAAAz/B,EAAAg+B,GACAr6B,EAAA3D,GAAAg+B,EAAAt0B,IAAA80B,GACAwH,IACAC,GAAAR,EAAAxS,gBAAArc,KAAA5W,GACAghC,EAAAvpB,KAAAme,IAAAoL,EAAA5P,OAAApxB,IAGAimC,GAAA,KAGAzH,GAAAyH,GAAAjF,EAAA,EAAAgF,EAAA,CAEA,IAAA//B,EAAA,GACA,QAAAjG,KAAA2D,EACAsC,EAAAjG,GAAA2D,EAAA3D,GACA,OAAAiG,EAMA,OAHAu4B,IAAAhjC,KAAA2hC,cAAAhlB,YACAxU,EAAA,aAAAnI,KAAA2hC,cAAAzzB,OAEA/F,GAIA8hC,EAAArqC,UAAAwjC,KAAA,WACA,UAAApjC,KAAAgiC,UAAA,CACA,IAAA0I,EAAA,GACA1qC,KAAA2hC,cAAAhlB,YACA+tB,GACA,YACAnJ,GAAAvhC,KAAA2hC,cAAAzzB,OACA,KACAlO,KAAA8iC,aAAAmB,GAAA,SAAAz/B,EAAAg+B,GACA,IAAAmI,EAAAnI,EAAAY,OACA,KAAAuH,IACAD,GAAA,IAAAlmC,EAAA,IAAAmmC,KAEA3qC,KAAAgiC,UAAA,KAAA0I,EAAA,GAAA9V,EAAA8V,GAEA,OAAA1qC,KAAAgiC,WAGAiI,EAAArqC,UAAA2iC,wBAAA,SAAAH,EAAAI,EAAArY,GACA,IAAAygB,EAAA5qC,KAAA6qC,cAAA1gB,GACA,GAAAygB,EAAA,CACA,IAAAE,EAAAF,EAAAhE,kBAAA,IAAA3G,GAAAmC,EAAAI,IACA,OAAAsI,IAAApqC,KAAA,KAGA,OAAAV,KAAAkqC,UAAAtD,kBAAAxE,IAOA6H,EAAArqC,UAAAmrC,kBAAA,SAAA7B,GACA,IAAA0B,EAAA5qC,KAAA6qC,cAAA3B,GACA,GAAA0B,EAAA,CACA,IAAArF,EAAAqF,EAAArF,SACA,OAAAA,KAAA7kC,KAGA,OAAAV,KAAAkqC,UAAA3E,UAOA0E,EAAArqC,UAAAorC,cAAA,SAAA9B,GACA,IAAA3D,EAAAvlC,KAAA+qC,kBAAA7B,GACA,OAAA3D,EACA,IAAAtF,GAAAsF,EAAAvlC,KAAAkqC,UAAAnqC,IAAAwlC,IAGA,MAQA0E,EAAArqC,UAAAqrC,iBAAA,SAAA/B,GACA,IAAA0B,EAAA5qC,KAAA6qC,cAAA3B,GACA,GAAA0B,EAAA,CACA,IAAApF,EAAAoF,EAAApF,SACA,OAAAA,KAAA9kC,KAGA,OAAAV,KAAAkqC,UAAA1E,UAOAyE,EAAArqC,UAAAsrC,aAAA,SAAAhC,GACA,IAAA1D,EAAAxlC,KAAAirC,iBAAA/B,GACA,OAAA1D,EACA,IAAAvF,GAAAuF,EAAAxlC,KAAAkqC,UAAAnqC,IAAAylC,IAGA,MAMAyE,EAAArqC,UAAAkjC,aAAA,SAAA3Y,EAAA4Y,GACA,IAAA6H,EAAA5qC,KAAA6qC,cAAA1gB,GACA,OAAAygB,EACAA,EAAAxF,iBAAA,SAAA+F,GACA,OAAApI,EAAAoI,EAAAzqC,KAAAyqC,EAAAjL,QAIAlgC,KAAAkqC,UAAA9E,iBAAArC,IAOAkH,EAAArqC,UAAAknC,YAAA,SAAAoC,GACA,OAAAlpC,KAAAgnC,gBAAAkC,EAAAtI,UAAAsI,IAQAe,EAAArqC,UAAAonC,gBAAA,SAAAoE,EAAAlC,GACA,IAAA0B,EAAA5qC,KAAA6qC,cAAA3B,GACA,GAAA0B,EACA,OAAAA,EAAA5D,gBAAAoE,EAAA,SAAA5mC,GAAkE,OAAAA,IAKlE,IAFA,IAAAnD,EAAArB,KAAAkqC,UAAAlD,gBAAAoE,EAAA1qC,KAAAu/B,GAAAE,MACAl8B,EAAA5C,EAAAyjC,OACA,MAAA7gC,GAAAilC,EAAA5I,QAAAr8B,EAAAmnC,GAAA,GACA/pC,EAAAujC,UACA3gC,EAAA5C,EAAAyjC,OAEA,OAAAzjC,GAOA4oC,EAAArqC,UAAAsnC,mBAAA,SAAAgC,GACA,OAAAlpC,KAAAinC,uBAAAiC,EAAAlI,UAAAkI,IAOAe,EAAArqC,UAAAqnC,uBAAA,SAAAoE,EAAAnC,GACA,IAAA0B,EAAA5qC,KAAA6qC,cAAA3B,GACA,GAAA0B,EACA,OAAAA,EAAA3D,uBAAAoE,EAAA,SAAA7mC,GACA,OAAAA,IAMA,IAFA,IAAAnD,EAAArB,KAAAkqC,UAAAjD,uBAAAoE,EAAA3qC,KAAAu/B,GAAAE,MACAl8B,EAAA5C,EAAAyjC,OACA,MAAA7gC,GAAAilC,EAAA5I,QAAAr8B,EAAAonC,GAAA,GACAhqC,EAAAujC,UACA3gC,EAAA5C,EAAAyjC,OAEA,OAAAzjC,GAMA4oC,EAAArqC,UAAA0jC,UAAA,SAAAxJ,GACA,OAAA95B,KAAA2c,UACAmd,EAAAnd,UACA,GAGA,EAGAmd,EAAA4H,cAAA5H,EAAAnd,UACA,EAEAmd,IAAAwR,IACA,EAIA,GAMArB,EAAArqC,UAAAkkC,UAAA,SAAAoF,GACA,GAAAA,IAAA/H,IACAnhC,KAAAmqC,UAAAlB,SAAAC,GACA,OAAAlpC,KAGA,IAAAsqC,EAAAtqC,KAAAmqC,UAAAhB,SAAAD,EAAAlpC,KAAAkqC,WACA,WAAAD,EAAAjqC,KAAAkqC,UAAAlqC,KAAA8hC,cAAAwI,IAMAL,EAAArqC,UAAAmkC,UAAA,SAAA5Z,GACA,OAAAA,IAAAgX,IAAAnhC,KAAAmqC,UAAAlB,SAAA9e,IAKA8f,EAAArqC,UAAAi6B,OAAA,SAAAC,GACA,GAAAA,IAAA95B,KACA,SAEA,GAAA85B,EAAA4H,aACA,SAGA,IAAA6J,EAAAzR,EACA,GAAA95B,KAAA2hC,cAAA9H,OAAA0R,EAAA5J,eAGA,IAAA3hC,KAAAkqC,UAAAzf,UAAA8gB,EAAArB,UAAAzf,QAAA,CAKA,IAJA,IAAA+gB,EAAAxrC,KAAA8mC,YAAA7C,IACAwH,EAAAF,EAAAzE,YAAA7C,IACAyH,EAAAF,EAAA5G,UACA+G,EAAAF,EAAA7G,UACA8G,GAAAC,GAAA,CACA,GAAAD,EAAAhrC,OAAAirC,EAAAjrC,OACAgrC,EAAAxL,KAAArG,OAAA8R,EAAAzL,MACA,SAEAwL,EAAAF,EAAA5G,UACA+G,EAAAF,EAAA7G,UAEA,cAAA8G,GAAA,OAAAC,EAGA,SAlBA,UA8BA1B,EAAArqC,UAAAirC,cAAA,SAAA3B,GACA,OAAAA,IAAA/H,GACA,KAGAnhC,KAAAmqC,UAAApqC,IAAAmpC,EAAA7kC,aAOA4lC,EAAAxS,gBAAA,iBACAwS,EA7YA,GAqbAqB,GAAA,IAjCA,SAAAzzB,GAEA,SAAA+zB,IACA,OAAA/zB,EAAArV,KAAAxC,KAAA,IAAAklC,GAAA8E,IAAAC,GAAAlI,WAAA6G,GAAAwB,UAAApqC,KAuBA,OAzBAgS,EAAAqG,UAAAuzB,EAAA/zB,GAIA+zB,EAAAhsC,UAAA0jC,UAAA,SAAAxJ,GACA,OAAAA,IAAA95B,KACA,EAGA,GAGA4rC,EAAAhsC,UAAAi6B,OAAA,SAAAC,GAEA,OAAAA,IAAA95B,MAEA4rC,EAAAhsC,UAAA+hC,YAAA,WACA,OAAA3hC,MAEA4rC,EAAAhsC,UAAAuiC,kBAAA,SAAAC,GACA,OAAA6H,GAAAlI,YAEA6J,EAAAhsC,UAAA+c,QAAA,WACA,UAEAivB,EA1BA,CA2BC3B,KAODhpC,OAAAytB,iBAAAuR,GAAA,CACAY,IAAA,CACA//B,MAAA,IAAAm/B,GAAAlK,EAAAkU,GAAAlI,aAEA8J,IAAA,CACA/qC,MAAA,IAAAm/B,GAAAjK,EAAAsV,OAMAxK,GAAA/E,aAAAkO,GAAAlI,WACAH,GAAAR,0BAAA6I,GAxyDAjO,EAyyDAsP,GAh/CA,SAAAp9B,GACAozB,GAAApzB,EAg/CA49B,CAAAR,IAkBA,IAAAS,IAAA,EAQA,SAAAC,GAAAhoB,EAAA4Z,GAEA,QADA,IAAAA,IAA8BA,EAAA,MAC9B,OAAA5Z,EACA,OAAAimB,GAAAlI,WAaA,GAXA,iBAAA/d,GAAA,cAAAA,IACA4Z,EAAA5Z,EAAA,cAEAvX,EAAA2F,OAAA,OAAAwrB,GACA,iBAAAA,GACA,iBAAAA,GACA,iBAAAA,GAAA,QAAAA,EAAA,uCAAAA,GACA,iBAAA5Z,GAAA,WAAAA,GAAA,OAAAA,EAAA,YACAA,IAAA,WAGA,iBAAAA,GAAA,QAAAA,EAEA,WAAA4d,GADA5d,EACAgoB,GAAApO,IAEA,GAAA5Z,aAAAnZ,QAAAkhC,GA2BA,CACA,IAAAE,EAAAhC,GAAAlI,WACAmK,EAAAloB,EAWA,OAVAvX,EAAAnH,QAAA4mC,EAAA,SAAA1nC,EAAA2nC,GACA,GAAA1/B,EAAAC,SAAAw/B,EAAA1nC,IACA,MAAAA,EAAAoyB,UAAA,MAEA,IAAA4L,EAAAwJ,GAAAG,IACA3J,EAAAd,cAAAc,EAAA7lB,YACAsvB,IAAAxJ,qBAAAj+B,EAAAg+B,OAIAyJ,EAAAhK,eAAA+J,GAAApO,IAvCA,IAAAwO,EAAA,GACAC,GAAA,EACAC,EAAAtoB,EAYA,GAXAvX,EAAAnH,QAAAgnC,EAAA,SAAA9nC,EAAAu0B,GACA,oBAAAv0B,GAAA,MAAAA,EAAAoyB,UAAA,MAEA,IAAA4L,EAAAwJ,GAAAM,EAAA9nC,IACAg+B,EAAA7lB,YACA0vB,EACAA,IAAA7J,EAAAb,cAAAhlB,UACAyvB,EAAA3nC,KAAA,IAAAw7B,GAAAz7B,EAAAg+B,QAIA,GAAA4J,EAAAznC,OACA,OAAAslC,GAAAlI,WAEA,IAAAwK,EAAA7E,GAAA0E,EAAArC,GAAA,SAAA/B,GAA6F,OAAAA,EAAAtnC,MAAyBspC,IACtH,GAAAqC,EAAA,CACA,IAAAG,EAAA9E,GAAA0E,EAAAnI,GAAA5D,cACA,WAAA4J,GAAAsC,EAAAP,GAAApO,GAAA,IAAAgL,GAAA,CAAsFzF,YAAAqJ,GAA8B,CAAGrJ,YAAAc,MAGvH,WAAAgG,GAAAsC,EAAAP,GAAApO,GAAAgL,GAAAwB,UA1jDA,SAAAl8B,GACAmzB,GAAAnzB,EA4kDAu+B,CAAAT,IAuBA,IA6nBAU,GAq1BAC,GAx5CAC,GAAA,IA1DA,SAAA/0B,GAEA,SAAAg1B,IACA,cAAAh1B,KAAA9M,MAAA/K,KAAA8K,YAAA9K,KAqDA,OAvDAgS,EAAAqG,UAAAw0B,EAAAh1B,GAOAg1B,EAAAjtC,UAAA0gC,QAAA,SAAA1nB,EAAAC,GACA,IAAAwrB,EAAAzrB,EAAAsnB,KAAAoD,UAAAzqB,EAAAqnB,MACA,WAAAmE,EACApO,EAAArd,EAAAlY,KAAAmY,EAAAnY,MAGA2jC,GAMAwI,EAAAjtC,UAAAmhC,YAAA,SAAAb,GACA,UAKA2M,EAAAjtC,UAAA2gC,oBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA3G,OAAA4G,IAKAoM,EAAAjtC,UAAAghC,QAAA,WACA,OAAAX,GAAAY,KAKAgM,EAAAjtC,UAAAohC,QAAA,WACA,OAAAf,GAAA4L,KAOAgB,EAAAjtC,UAAAqhC,SAAA,SAAAC,EAAAxgC,GACA,IAAAosC,EAAAd,GAAA9K,GACA,WAAAjB,GAAAv/B,EAAAosC,IAKAD,EAAAjtC,UAAAyE,SAAA,WACA,gBAEAwoC,EAxDA,CAyDCzM,KAwBD2M,GAAA,SAAAl1B,GAEA,SAAAk1B,EAAAC,GACA,IAAA3+B,EAAAwJ,EAAArV,KAAAxC,YAGA,OAFAqO,EAAA2+B,aACAvgC,EAAA2F,QAAA46B,EAAArwB,WAAA,cAAAqwB,EAAA1U,WAAA,2DACAjqB,EAmDA,OAxDA2D,EAAAqG,UAAA00B,EAAAl1B,GAYAk1B,EAAAntC,UAAAqtC,aAAA,SAAAC,GACA,OAAAA,EAAA7K,SAAAriC,KAAAgtC,aAKAD,EAAAntC,UAAAmhC,YAAA,SAAAb,GACA,OAAAA,EAAAmC,SAAAriC,KAAAgtC,YAAArwB,WAKAowB,EAAAntC,UAAA0gC,QAAA,SAAA1nB,EAAAC,GACA,IAAAs0B,EAAAntC,KAAAitC,aAAAr0B,EAAAsnB,MACAkN,EAAAptC,KAAAitC,aAAAp0B,EAAAqnB,MACAmE,EAAA8I,EAAA7J,UAAA8J,GACA,WAAA/I,EACApO,EAAArd,EAAAlY,KAAAmY,EAAAnY,MAGA2jC,GAMA0I,EAAAntC,UAAAqhC,SAAA,SAAAC,EAAAxgC,GACA,IAAAosC,EAAAd,GAAA9K,GACAhB,EAAA+J,GAAAlI,WAAAY,YAAA3iC,KAAAgtC,WAAAF,GACA,WAAA7M,GAAAv/B,EAAAw/B,IAKA6M,EAAAntC,UAAAohC,QAAA,WACA,IAAAd,EAAA+J,GAAAlI,WAAAY,YAAA3iC,KAAAgtC,WAAA1B,IACA,WAAArL,GAAAjK,EAAAkK,IAKA6M,EAAAntC,UAAAyE,SAAA,WACA,OAAArE,KAAAgtC,WAAAvnC,QAAA+O,KAAA,MAEAu4B,EAzDA,CA0DC3M,IAsBDiN,GAAA,WAMA,SAAAA,EAAAC,EAAAC,EAAAC,GACAxtC,KAAAstC,QACAttC,KAAAutC,OACAvtC,KAAAwtC,SAsIA,OA9HAH,EAAAztC,UAAAsO,IAAA,WAEA,OADAzB,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACA3E,KAAAstC,MAAAp/B,OAOAm/B,EAAAztC,UAAA6tC,UAAA,WAEA,OADAhhC,EAAA8Q,iBAAA,6BAAAzS,UAAAnG,QACA3E,KAAAstC,MAAAp/B,KAAA,IAIAm/B,EAAAztC,UAAAigC,OAAA,WAGA,OADApzB,EAAA8Q,iBAAA,0BAAAzS,UAAAnG,QACA3E,KAAAytC,aAOAJ,EAAAztC,UAAA8tC,OAAA,WAEA,OADAjhC,EAAA8Q,iBAAA,0BAAAzS,UAAAnG,SACA3E,KAAAstC,MAAA3wB,WAQA0wB,EAAAztC,UAAAm5B,MAAA,SAAA4U,GACAlhC,EAAA8Q,iBAAA,yBAAAzS,UAAAnG,QAEAgpC,EAAA54B,OAAA44B,GACAhP,GAAA,uBAAAgP,GAAA,GACA,IAAAC,EAAA,IAAA5V,EAAA2V,GACAE,EAAA7tC,KAAAutC,KAAAxU,MAAA6U,GACA,WAAAP,EAAArtC,KAAAstC,MAAAjL,SAAAuL,GAAAC,EAAA5J,KAQAoJ,EAAAztC,UAAA0iC,SAAA,SAAAqL,GACAlhC,EAAA8Q,iBAAA,4BAAAzS,UAAAnG,QACAg6B,GAAA,0BAAAgP,GAAA,GACA,IAAAC,EAAA,IAAA5V,EAAA2V,GACA,OAAA3tC,KAAAstC,MAAAjL,SAAAuL,GAAAjxB,WAOA0wB,EAAAztC,UAAA+hC,YAAA,WAGA,OAFAl1B,EAAA8Q,iBAAA,+BAAAzS,UAAAnG,QAEA3E,KAAAstC,MAAA3L,cAAAzzB,OAUAm/B,EAAAztC,UAAA0F,QAAA,SAAAy9B,GACA,IAAA10B,EAAArO,KAGA,OAFAyM,EAAA8Q,iBAAA,2BAAAzS,UAAAnG,QACA8H,EAAAmR,iBAAA,yBAAAmlB,GAAA,IACA/iC,KAAAstC,MAAA5L,gBAEA1hC,KAAAstC,MAEAxK,aAAA9iC,KAAAwtC,OAAA,SAAAhpC,EAAA07B,GACA,OAAA6C,EAAA,IAAAsK,EAAAnN,EAAA7xB,EAAAk/B,KAAAxU,MAAAv0B,GAAAy/B,QAOAoJ,EAAAztC,UAAAkuC,YAAA,WAEA,OADArhC,EAAA8Q,iBAAA,+BAAAzS,UAAAnG,SACA3E,KAAAstC,MAAA5L,eAGA1hC,KAAAstC,MAAA3wB,WAEA1b,OAAAT,eAAA6sC,EAAAztC,UAAA,OACAG,IAAA,WACA,OAAAC,KAAAutC,KAAAQ,UAEA5/B,YAAA,EACArO,cAAA,IAMAutC,EAAAztC,UAAAijC,YAAA,WAEA,OADAp2B,EAAA8Q,iBAAA,+BAAAzS,UAAAnG,QACA3E,KAAAstC,MAAAzK,eAKAwK,EAAAztC,UAAAouC,OAAA,WAEA,OADAvhC,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACA3E,KAAAutC,MAEAtsC,OAAAT,eAAA6sC,EAAAztC,UAAA,OACAG,IAAA,WACA,OAAAC,KAAAguC,UAEA7/B,YAAA,EACArO,cAAA,IAEAutC,EA/IA,GAsKAY,GAAA,WAOA,SAAAA,EAAAxP,EAAAyP,EAAAtO,EAAAuO,GACAnuC,KAAAy+B,YACAz+B,KAAAkuC,oBACAluC,KAAA4/B,WACA5/B,KAAAmuC,WAoCA,OA/BAF,EAAAruC,UAAAwuC,QAAA,WACA,IAAA1nB,EAAA1mB,KAAA4/B,SAAAoO,SACA,gBAAAhuC,KAAAy+B,UACA/X,EAAAsT,KAGAtT,EAAA2nB,YAAArU,MAMAiU,EAAAruC,UAAA0uC,aAAA,WACA,OAAAtuC,KAAAy+B,WAKAwP,EAAAruC,UAAA2uC,eAAA,WACA,OAAAvuC,KAAAkuC,kBAAAK,eAAAvuC,OAKAiuC,EAAAruC,UAAAyE,SAAA,WACA,OAAArE,KAAAouC,UAAA/pC,WACA,IACArE,KAAAy+B,UACA,IACAhyB,EAAAgP,UAAAzb,KAAA4/B,SAAA6N,cAEAQ,EA/CA,GAiDAO,GAAA,WAMA,SAAAA,EAAAN,EAAAtlC,EAAAoxB,GACAh6B,KAAAkuC,oBACAluC,KAAA4I,QACA5I,KAAAg6B,OA0BA,OArBAwU,EAAA5uC,UAAAwuC,QAAA,WACA,OAAApuC,KAAAg6B,MAKAwU,EAAA5uC,UAAA0uC,aAAA,WACA,gBAKAE,EAAA5uC,UAAA2uC,eAAA,WACA,OAAAvuC,KAAAkuC,kBAAAK,eAAAvuC,OAKAwuC,EAAA5uC,UAAAyE,SAAA,WACA,OAAArE,KAAAg6B,KAAA31B,WAAA,WAEAmqC,EAnCA,GAyDAC,GAAA,WAMA,SAAAA,EAAAC,EAAAC,EAAAC,GACA5uC,KAAA0uC,YACA1uC,KAAA2uC,kBACA3uC,KAAA4uC,WAmEA,OA9DAH,EAAA7uC,UAAAivC,WAAA,SAAApQ,GACA,gBAAAA,GAKAgQ,EAAA7uC,UAAAkvC,YAAA,SAAAC,EAAAC,GACA,IAAA7kB,EAAA6kB,EAAAC,iBAAAC,WACA,WAAAjB,GAAA,QAAAjuC,KAAA,IAAAqtC,GAAA0B,EAAAI,aAAAH,EAAAhB,SAAA7jB,KAKAskB,EAAA7uC,UAAA2uC,eAAA,SAAAa,GACA,IAAAC,EAAArvC,KAAA4uC,SACA,cAAAQ,EAAAd,eAAA,CACA7hC,EAAA2F,OAAApS,KAAA2uC,gBAAA,gEACA,IAAAW,EAAAtvC,KAAA2uC,gBACA,kBAEAW,EAAA9sC,KAAA6sC,EAAAD,EAAAxmC,QAIA,IAAA2mC,EAAAvvC,KAAA0uC,UACA,kBACAa,EAAA/sC,KAAA6sC,EAAAD,EAAAxP,YAOA6O,EAAA7uC,UAAA4vC,kBAAA,SAAA5mC,EAAAoxB,GACA,OAAAh6B,KAAA2uC,gBACA,IAAAH,GAAAxuC,KAAA4I,EAAAoxB,GAGA,MAMAyU,EAAA7uC,UAAA6vC,QAAA,SAAA3V,GACA,OAAAA,aAAA2U,KAGA3U,EAAA4U,YAAA1uC,KAAA0uC,WAKA5U,EAAA4U,YAAA1uC,KAAA0uC,WAAA5U,EAAA8U,WAAA5uC,KAAA4uC,WAMAH,EAAA7uC,UAAA8vC,eAAA,WACA,cAAA1vC,KAAA0uC,WAEAD,EA5EA,GAuFAkB,GAAA,WAMA,SAAAA,EAAAC,EAAAjB,EAAAC,GACA5uC,KAAA4vC,aACA5vC,KAAA2uC,kBACA3uC,KAAA4uC,WAyFA,OApFAe,EAAA/vC,UAAAivC,WAAA,SAAApQ,GACA,IAAAoR,EAAA,mBAAApR,EAAA,cAAAA,EAGA,OAFAoR,EACA,qBAAAA,EAAA,gBAAAA,EACApjC,EAAAC,SAAA1M,KAAA4vC,WAAAC,IAKAF,EAAA/vC,UAAA4vC,kBAAA,SAAA5mC,EAAAoxB,GACA,OAAAh6B,KAAA2uC,gBACA,IAAAH,GAAAxuC,KAAA4I,EAAAoxB,GAGA,MAMA2V,EAAA/vC,UAAAkvC,YAAA,SAAAC,EAAAC,GACAviC,EAAA2F,OAAA,MAAA28B,EAAA3M,UAAA,yCACA,IAAA1b,EAAAsoB,EAAAhB,SAAAjV,MAA0DgW,EAAA,WAC1D5kB,EAAA6kB,EAAAC,iBAAAC,WACA,WAAAjB,GAAAc,EAAAlpC,KAAA7F,KAAA,IAAAqtC,GAAA0B,EAAAI,aAAAzoB,EAAAyD,GAAA4kB,EAAAZ,WAKAwB,EAAA/vC,UAAA2uC,eAAA,SAAAa,GACA,IAAAC,EAAArvC,KAAA4uC,SACA,cAAAQ,EAAAd,eAAA,CACA7hC,EAAA2F,OAAApS,KAAA2uC,gBAAA,gEACA,IAAAmB,EAAA9vC,KAAA2uC,gBACA,kBAEAmB,EAAAttC,KAAA6sC,EAAAD,EAAAxmC,QAIA,IAAAmnC,EAAA/vC,KAAA4vC,WAAAR,EAAA3Q,WACA,kBACAsR,EAAAvtC,KAAA6sC,EAAAD,EAAAxP,SAAAwP,EAAAjB,YAOAwB,EAAA/vC,UAAA6vC,QAAA,SAAA3V,GACA,GAAAA,aAAA6V,EAAA,CACA,IAAA3vC,KAAA4vC,aAAA9V,EAAA8V,WACA,SAEA,GAAA5vC,KAAA4uC,WAAA9U,EAAA8U,SAAA,CACA,IAAAoB,EAAAvjC,EAAA8P,SAAAud,EAAA8V,YAEA,GAAAI,IADAvjC,EAAA8P,SAAAvc,KAAA4vC,YACA,CAIA,OAAAI,EAAA,CACA,IAAAC,EAAwDxjC,EAAA6P,UAAAwd,EAAA8V,YACxDM,EAAuDzjC,EAAA6P,UAAAtc,KAAA4vC,YACvD,QAAAM,IAAAD,GACAnW,EAAA8V,WAAAK,IACAjwC,KAAA4vC,WAAAM,IACApW,EAAA8V,WAAAK,KAAAjwC,KAAA4vC,WAAAM,IAIA,OAAAzjC,EAAA2P,MAAApc,KAAA4vC,WAAA,SAAAnR,EAAAvZ,GAAqF,OAAA4U,EAAA8V,WAAAnR,KAAAvZ,MAKrF,UAKAyqB,EAAA/vC,UAAA8vC,eAAA,WACA,cAAA1vC,KAAA4vC,YAEAD,EAlGA,GA4HAQ,GAAA,WACA,SAAAA,EAAAC,EAAApW,EAAAqW,EAAAC,GACAtwC,KAAAowC,OACApwC,KAAAg6B,OACAh6B,KAAAqwC,eACArwC,KAAAswC,iBA6cA,OA3cArvC,OAAAT,eAAA2vC,EAAA,0BACApwC,IAAA,WAEA,OADA0M,EAAA2F,OAAAs6B,GAAA,oCACAA,IAEAz+B,IAAA,SAAAC,GACAw+B,GAAAx+B,GAEAC,YAAA,EACArO,cAAA,IAOAqwC,EAAAI,wBAAA,SAAAtzB,GACA,IAAAuzB,EAAA,KACAC,EAAA,KAOA,GANAxzB,EAAAyzB,aACAF,EAAAvzB,EAAA0zB,sBAEA1zB,EAAA2zB,WACAH,EAAAxzB,EAAA4zB,oBAEA5zB,EAAAiyB,aAAA/N,GAAA,CACA,IAAA2P,EAAA,mGAEAC,EAAA,wGAEA,GAAA9zB,EAAAyzB,WAAA,CAEA,GADAzzB,EAAA+zB,qBACAjb,EACA,UAAAlvB,MAAAiqC,GAEA,oBAAAN,EACA,UAAA3pC,MAAAkqC,GAGA,GAAA9zB,EAAA2zB,SAAA,CAEA,GADA3zB,EAAAg0B,mBACAjb,EACA,UAAAnvB,MAAAiqC,GAEA,oBAAAL,EACA,UAAA5pC,MAAAkqC,SAIA,GAAA9zB,EAAAiyB,aAAAjL,IACA,SAAAuM,IAAA7S,GAAA6S,IACA,MAAAC,IAAA9S,GAAA8S,GACA,UAAA5pC,MAAA,sKAOA,GAFA4F,EAAA2F,OAAA6K,EAAAiyB,qBAAAnC,IACA9vB,EAAAiyB,aAAAtC,GAAA,uBACA,MAAA4D,GAAA,iBAAAA,GACA,MAAAC,GAAA,iBAAAA,EACA,UAAA5pC,MAAA,0FAUAspC,EAAAe,eAAA,SAAAj0B,GACA,GAAAA,EAAAyzB,YACAzzB,EAAA2zB,UACA3zB,EAAAk0B,aACAl0B,EAAAm0B,mBACA,UAAAvqC,MAAA,uGAQAspC,EAAAvwC,UAAAyxC,+BAAA,SAAAz2B,GACA,QAAA5a,KAAAswC,eACA,UAAAzpC,MAAA+T,EAAA,gDAMAu1B,EAAAvwC,UAAAqvC,eAAA,WACA,OAAAjvC,KAAAqwC,cAKAF,EAAAvwC,UAAAouC,OAAA,WAKA,OAJAvhC,EAAA8Q,iBAAA,gBAAAzS,UAAAnG,QAIA,IAAAwrC,EAAAzD,uBAAA1sC,KAAAowC,KAAApwC,KAAAg6B,OASAmW,EAAAvwC,UAAA0L,GAAA,SAAAmzB,EAAA7wB,EAAA0jC,EAAArrC,GACAwG,EAAA8Q,iBAAA,eAAAzS,UAAAnG,QACA65B,GAAA,aAAAC,GAAA,GACAhyB,EAAAmR,iBAAA,aAAAhQ,GAAA,GACA,IAAAyX,EAAA8qB,EAAAoB,yBAAA,WAAAD,EAAArrC,GACA,aAAAw4B,EACAz+B,KAAAwxC,aAAA5jC,EAAAyX,EAAA4Z,OAAA5Z,EAAApf,aAEA,CACA,IAAAwrC,EAAA,GACAA,EAAAhT,GAAA7wB,EACA5N,KAAA0xC,aAAAD,EAAApsB,EAAA4Z,OAAA5Z,EAAApf,SAEA,OAAA2H,GAQAuiC,EAAAvwC,UAAA4xC,aAAA,SAAA5jC,EAAA+jC,EAAA1rC,GACA,IAAA2rC,EAAA,IAAAnD,GAAA7gC,EAAA+jC,GAAA,KAAA1rC,GAAA,MACAjG,KAAAowC,KAAAyB,yBAAA7xC,KAAA4xC,IAQAzB,EAAAvwC,UAAA8xC,aAAA,SAAAD,EAAAE,EAAA1rC,GACA,IAAA2rC,EAAA,IAAAjC,GAAA8B,EAAAE,EAAA1rC,GACAjG,KAAAowC,KAAAyB,yBAAA7xC,KAAA4xC,IAOAzB,EAAAvwC,UAAA6L,IAAA,SAAAgzB,EAAA7wB,EAAA3H,GACAwG,EAAA8Q,iBAAA,gBAAAzS,UAAAnG,QACA65B,GAAA,cAAAC,GAAA,GACAhyB,EAAAmR,iBAAA,cAAAhQ,GAAA,GACAnB,EAAAoR,sBAAA,cAAA5X,GAAA,GACA,IAAA2rC,EAAA,KACAH,EAAA,KACA,UAAAhT,EAEAmT,EAAA,IAAAnD,GADA7gC,GAAA,KACA,KAAA3H,GAAA,MAEAw4B,IACA7wB,KACA6jC,EAAA,IACAhT,GAAA7wB,GAEAgkC,EAAA,IAAAjC,GAAA8B,EAAA,KAAAxrC,GAAA,OAEAjG,KAAAowC,KAAA0B,4BAAA9xC,KAAA4xC,IAUAzB,EAAAvwC,UAAA4L,KAAA,SAAAizB,EAAAsT,EAAAC,EAAA/rC,GACA,IAAAoI,EAAArO,KACAyM,EAAA8Q,iBAAA,iBAAAzS,UAAAnG,QACA65B,GAAA,eAAAC,GAAA,GACAhyB,EAAAmR,iBAAA,eAAAm0B,GAAA,GACA,IAAA1sB,EAAA8qB,EAAAoB,yBAAA,aAAAS,EAAA/rC,GAKAgsC,GAAA,EACAjtB,EAAA,IAAAvY,EAAAqJ,SAEAkP,EAAAjP,QAAA5O,MAAA,cACA,IAAA+qC,EAAA,SAAAtS,GAGAqS,IACAA,GAAA,EACA5jC,EAAA5C,IAAAgzB,EAAAyT,GACAH,GACAA,EAAA7iC,KAAAmW,EAAApf,QAAA8rC,CAAAnS,GAEA5a,EAAAxc,QAAAo3B,KAUA,OAPA5/B,KAAAsL,GAAAmzB,EAAAyT,EACA,SAAA9pC,GACAiG,EAAA5C,IAAAgzB,EAAAyT,GACA7sB,EAAA4Z,QACA5Z,EAAA4Z,OAAA/vB,KAAAmW,EAAApf,QAAAof,CAAAjd,GACA4c,EAAAvc,OAAAL,KAEA4c,EAAAjP,SAOAo6B,EAAAvwC,UAAAuyC,aAAA,SAAAC,GAEA,GADA3lC,EAAA8Q,iBAAA,yBAAAzS,UAAAnG,QACA,iBAAAytC,GACAn2B,KAAAC,MAAAk2B,QACAA,GAAA,EACA,UAAAvrC,MAAA,kEAEA,GAAA7G,KAAAqwC,aAAAc,WACA,UAAAtqC,MAAA,uGAGA,WAAAspC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAh6B,KAAAqwC,aAAA8B,aAAAC,GAAApyC,KAAAswC,iBAOAH,EAAAvwC,UAAAyyC,YAAA,SAAAD,GAEA,GADA3lC,EAAA8Q,iBAAA,wBAAAzS,UAAAnG,QACA,iBAAAytC,GACAn2B,KAAAC,MAAAk2B,QACAA,GAAA,EACA,UAAAvrC,MAAA,iEAEA,GAAA7G,KAAAqwC,aAAAc,WACA,UAAAtqC,MAAA,sGAGA,WAAAspC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAh6B,KAAAqwC,aAAAgC,YAAAD,GAAApyC,KAAAswC,iBAOAH,EAAAvwC,UAAA0yC,aAAA,SAAAtY,GAEA,GADAvtB,EAAA8Q,iBAAA,yBAAAzS,UAAAnG,QACA,SAAAq1B,EACA,UAAAnzB,MAAA,2EAEA,iBAAAmzB,EACA,UAAAnzB,MAAA,qFAEA,cAAAmzB,EACA,UAAAnzB,MAAA,+EAEA83B,GAAA,uBAAA3E,GAAA,GACAh6B,KAAAqxC,+BAAA,sBACA,IAAAkB,EAAA,IAAAva,EAAAgC,GACA,GAAAuY,EAAA51B,UACA,UAAA9V,MAAA,qFAEA,IAAAsjB,EAAA,IAAA4iB,GAAAwF,GACAC,EAAAxyC,KAAAqwC,aAAAoC,QAAAtoB,GAEA,OADAgmB,EAAAI,wBAAAiC,GACA,IAAArC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAwY,GAAA,IAMArC,EAAAvwC,UAAA8yC,WAAA,WACAjmC,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACA3E,KAAAqxC,+BAAA,oBACA,IAAAmB,EAAAxyC,KAAAqwC,aAAAoC,QAAAtR,IAEA,OADAgP,EAAAI,wBAAAiC,GACA,IAAArC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAwY,GAAA,IAMArC,EAAAvwC,UAAA+yC,gBAAA,WACAlmC,EAAA8Q,iBAAA,4BAAAzS,UAAAnG,QACA3E,KAAAqxC,+BAAA,yBACA,IAAAmB,EAAAxyC,KAAAqwC,aAAAoC,QAAAxO,IAEA,OADAkM,EAAAI,wBAAAiC,GACA,IAAArC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAwY,GAAA,IAMArC,EAAAvwC,UAAAgzC,aAAA,WACAnmC,EAAA8Q,iBAAA,yBAAAzS,UAAAnG,QACA3E,KAAAqxC,+BAAA,sBACA,IAAAmB,EAAAxyC,KAAAqwC,aAAAoC,QAAA7F,IAEA,OADAuD,EAAAI,wBAAAiC,GACA,IAAArC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAwY,GAAA,IAOArC,EAAAvwC,UAAAizC,QAAA,SAAA/xC,EAAAJ,QACA,IAAAI,IAA+BA,EAAA,MAC/B2L,EAAA8Q,iBAAA,oBAAAzS,UAAAnG,QACAk5B,GAAA,kBAAA/8B,EAAAd,KAAAg6B,MAAA,GACA0E,GAAA,kBAAAh+B,GAAA,GACA,IAAA8xC,EAAAxyC,KAAAqwC,aAAAwC,QAAA/xC,EAAAJ,GAGA,GAFAyvC,EAAAe,eAAAsB,GACArC,EAAAI,wBAAAiC,GACAxyC,KAAAqwC,aAAAK,WACA,UAAA7pC,MAAA,0FAQA,YAJA9F,IAAAD,IACAA,EAAA,KACAJ,EAAA,MAEA,IAAAyvC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAwY,EAAAxyC,KAAAswC,iBAOAH,EAAAvwC,UAAAkzC,MAAA,SAAAhyC,EAAAJ,QACA,IAAAI,IAA+BA,EAAA,MAC/B2L,EAAA8Q,iBAAA,kBAAAzS,UAAAnG,QACAk5B,GAAA,gBAAA/8B,EAAAd,KAAAg6B,MAAA,GACA0E,GAAA,gBAAAh+B,GAAA,GACA,IAAA8xC,EAAAxyC,KAAAqwC,aAAAyC,MAAAhyC,EAAAJ,GAGA,GAFAyvC,EAAAe,eAAAsB,GACArC,EAAAI,wBAAAiC,GACAxyC,KAAAqwC,aAAAO,SACA,UAAA/pC,MAAA,oFAGA,WAAAspC,EAAAnwC,KAAAowC,KAAApwC,KAAAg6B,KAAAwY,EAAAxyC,KAAAswC,iBASAH,EAAAvwC,UAAAmzC,QAAA,SAAAjyC,EAAAJ,GAIA,GAHA+L,EAAA8Q,iBAAA,oBAAAzS,UAAAnG,QACAk5B,GAAA,kBAAA/8B,EAAAd,KAAAg6B,MAAA,GACA0E,GAAA,kBAAAh+B,GAAA,GACAV,KAAAqwC,aAAAK,WACA,UAAA7pC,MAAA,0FAGA,GAAA7G,KAAAqwC,aAAAO,SACA,UAAA/pC,MAAA,sFAGA,OAAA7G,KAAA6yC,QAAA/xC,EAAAJ,GAAAoyC,MAAAhyC,EAAAJ,IAKAyvC,EAAAvwC,UAAAyE,SAAA,WAEA,OADAoI,EAAA8Q,iBAAA,qBAAAzS,UAAAnG,QACA3E,KAAAowC,KAAA/rC,WAAArE,KAAAg6B,KAAArB,sBAIAwX,EAAAvwC,UAAAigC,OAAA,WAGA,OADApzB,EAAA8Q,iBAAA,mBAAAzS,UAAAnG,QACA3E,KAAAqE,YAMA8rC,EAAAvwC,UAAAozC,YAAA,WACA,OAAAhzC,KAAAqwC,aAAA4C,kBAKA9C,EAAAvwC,UAAAszC,gBAAA,WACA,IAAA/qC,EAAAnI,KAAAgzC,cACA7sB,EAAAoQ,EAAApuB,GACA,aAAAge,EAAyB,UAAAA,GAOzBgqB,EAAAvwC,UAAAuzC,QAAA,SAAArZ,GAEA,GADArtB,EAAA8Q,iBAAA,oBAAAzS,UAAAnG,UACAm1B,aAAAqW,GAAA,CAEA,UAAAtpC,MADA,wFAGA,IAAAusC,EAAApzC,KAAAowC,OAAAtW,EAAAsW,KACAiD,EAAArzC,KAAAg6B,KAAAH,OAAAC,EAAAE,MACAsZ,EAAAtzC,KAAAkzC,oBAAApZ,EAAAoZ,kBACA,OAAAE,GAAAC,GAAAC,GAUAnD,EAAAoB,yBAAA,SAAA32B,EAAAo3B,EAAA/rC,GACA,IAAAof,EAAA,CAAmB4Z,OAAA,KAAAh5B,QAAA,MACnB,GAAA+rC,GAAA/rC,EACAof,EAAA4Z,OAAA+S,EACAvlC,EAAAmR,iBAAAhD,EAAA,EAAAyK,EAAA4Z,QAAA,GACA5Z,EAAApf,UACAwG,EAAAoR,sBAAAjD,EAAA,EAAAyK,EAAApf,SAAA,QAEA,GAAA+rC,EAEA,oBAAAA,GAAA,OAAAA,EAEA3sB,EAAApf,QAAA+rC,MAEA,uBAAAA,EAIA,UAAAnrC,MAAA4F,EAAAkO,YAAAC,EAAA,MACA,0DAJAyK,EAAA4Z,OAAA+S,EAOA,OAAA3sB,GAEApkB,OAAAT,eAAA2vC,EAAAvwC,UAAA,OACAG,IAAA,WACA,OAAAC,KAAAguC,UAEA7/B,YAAA,EACArO,cAAA,IAEAqwC,EAldA,GA0eAoD,GAAA,WACA,SAAAA,IACAvzC,KAAAiO,IAAA,GAkEA,OA5DAslC,EAAA3zC,UAAA4zC,IAAA,SAAA5sB,EAAA1Y,GACAlO,KAAAiO,IAAA2Y,GAAA,OAAA1Y,MAMAqlC,EAAA3zC,UAAA8M,SAAA,SAAAlI,GACA,OAAAiI,EAAAC,SAAA1M,KAAAiO,IAAAzJ,IAMA+uC,EAAA3zC,UAAAG,IAAA,SAAA6mB,GACA,OAAA5mB,KAAA0M,SAAAka,GAAA5mB,KAAAiO,IAAA2Y,QAAA7lB,GAKAwyC,EAAA3zC,UAAAo0B,OAAA,SAAApN,UACA5mB,KAAAiO,IAAA2Y,IAKA2sB,EAAA3zC,UAAA6zC,MAAA,WACAzzC,KAAAiO,IAAA,IAMAslC,EAAA3zC,UAAA+c,QAAA,WACA,OAAAlQ,EAAAkQ,QAAA3c,KAAAiO,MAKAslC,EAAA3zC,UAAA6qB,MAAA,WACA,OAAAhe,EAAA8P,SAAAvc,KAAAiO,MAMAslC,EAAA3zC,UAAAi3B,KAAA,SAAA3uB,GACAuE,EAAAnH,QAAAtF,KAAAiO,IAAA,SAAA0K,EAAAga,GAAgD,OAAAzqB,EAAAyQ,EAAAga,MAMhD4gB,EAAA3zC,UAAA0E,KAAA,WACA,IAAAA,EAAA,GAIA,OAHAmI,EAAAnH,QAAAtF,KAAAiO,IAAA,SAAA0K,GACArU,EAAAG,KAAAkU,KAEArU,GAEAivC,EApEA,GA4FAG,GAAA,WACA,SAAAA,IAKA1zC,KAAA6hC,OAAA,KAKA7hC,KAAAkqC,UAAA,KAuIA,OA/HAwJ,EAAA9zC,UAAAwpB,KAAA,SAAA4Q,GACA,SAAAh6B,KAAA6hC,OACA,OAAA7hC,KAAA6hC,OAAAQ,SAAArI,GAEA,GAAAA,EAAArd,WAAA,MAAA3c,KAAAkqC,UAYA,YAXA,IAAAyJ,EAAA3Z,EAAA1B,WAEA,OADA0B,IAAAxB,WACAx4B,KAAAkqC,UAAAx9B,SAAAinC,GACA3zC,KAAAkqC,UAAAnqC,IAAA4zC,GACAvqB,KAAA4Q,GAGA,MAcA0Z,EAAA9zC,UAAAg0C,SAAA,SAAA5Z,EAAAvjB,GACA,GAAAujB,EAAArd,UACA3c,KAAA6hC,OAAAprB,EACAzW,KAAAkqC,UAAA,UAEA,UAAAlqC,KAAA6hC,OACA7hC,KAAA6hC,OAAA7hC,KAAA6hC,OAAAc,YAAA3I,EAAAvjB,OAEA,CACA,MAAAzW,KAAAkqC,YACAlqC,KAAAkqC,UAAA,IAAAqJ,IAEA,IAAAI,EAAA3Z,EAAA1B,WACAt4B,KAAAkqC,UAAAx9B,SAAAinC,IACA3zC,KAAAkqC,UAAAsJ,IAAAG,EAAA,IAAAD,GAEA,IAAA3a,EAAA/4B,KAAAkqC,UAAAnqC,IAAA4zC,GACA3Z,IAAAxB,WACAO,EAAA6a,SAAA5Z,EAAAvjB,KASAi9B,EAAA9zC,UAAAi0C,OAAA,SAAA7Z,GACA,GAAAA,EAAArd,UAGA,OAFA3c,KAAA6hC,OAAA,KACA7hC,KAAAkqC,UAAA,MACA,EAGA,UAAAlqC,KAAA6hC,OAAA,CACA,GAAA7hC,KAAA6hC,OAAAH,aAEA,SAGA,IAAA5gC,EAAAd,KAAA6hC,OACA7hC,KAAA6hC,OAAA,KACA,IAAAiS,EAAA9zC,KAIA,OAHAc,EAAAgiC,aAAAmB,GAAA,SAAAz/B,EAAAuvC,GACAD,EAAAF,SAAA,IAAA5b,EAAAxzB,GAAAuvC,KAEA/zC,KAAA6zC,OAAA7Z,GAGA,UAAAh6B,KAAAkqC,UAAA,CACA,IAAAyJ,EAAA3Z,EAAA1B,WAEA,GADA0B,IAAAxB,WACAx4B,KAAAkqC,UAAAx9B,SAAAinC,GACA3zC,KAAAkqC,UAAAnqC,IAAA4zC,GAAAE,OAAA7Z,IAEAh6B,KAAAkqC,UAAAlW,OAAA2f,GAGA,QAAA3zC,KAAAkqC,UAAAvtB,YACA3c,KAAAkqC,UAAA,MACA,GAOA,UAWAwJ,EAAA9zC,UAAAo0C,YAAA,SAAAC,EAAAC,GACA,OAAAl0C,KAAA6hC,OACAqS,EAAAD,EAAAj0C,KAAA6hC,QAGA7hC,KAAA8iC,aAAA,SAAAt+B,EAAAuvC,GACA,IAAA/Z,EAAA,IAAAhC,EAAAic,EAAA5vC,WAAA,IAAAG,GACAuvC,EAAAC,YAAAha,EAAAka,MASAR,EAAA9zC,UAAAkjC,aAAA,SAAAoR,GACA,OAAAl0C,KAAAkqC,WACAlqC,KAAAkqC,UAAArT,KAAA,SAAAryB,EAAAuvC,GACAG,EAAA1vC,EAAAuvC,MAIAL,EAlJA,GAsLAS,GAAA,SAAArzC,EAAAszC,GACA,OAAAtzC,GAAA,iBAAAA,GAIA2L,EAAA2F,OAAA,QAAAtR,EAAA,6CACAszC,EAAAtzC,EAAA,SAJAA,GA6BAuzC,GAAA,SAAAnU,EAAAkU,GACA,IAEA3T,EAFA6T,EAAApU,EAAAyB,cAAAzzB,MACA0vB,EAAAuW,GAAAG,EAAAF,GAEA,GAAAlU,EAAAwB,aAAA,CACA,IAAA6S,EAAArU,EACAp/B,EAAAqzC,GAAAI,EAAArR,WAAAkR,GACA,OAAAtzC,IAAAyzC,EAAArR,YACAtF,IAAA2W,EAAA5S,cAAAzzB,MACA,IAAA0zB,GAAA9gC,EAAAkrC,GAAApO,IAGAsC,EAIA,IAAAsU,EAAAtU,EAWA,OAVAO,EAAA+T,EACA5W,IAAA4W,EAAA7S,cAAAzzB,QACAuyB,IAAAwB,eAAA,IAAAL,GAAAhE,KAEA4W,EAAA1R,aAAAmB,GAAA,SAAA7B,EAAAI,GACA,IAAAE,EAAA2R,GAAA7R,EAAA4R,GACA1R,IAAAF,IACA/B,IAAAgC,qBAAAL,EAAAM,MAGAjC,IAyBA,SAAAkM,GACAA,IAAA,yBACAA,IAAA,iBACAA,IAAA,mCACAA,IAAA,qCAJA,CAKCA,QAAA,KAQD,IA0GA8H,GAq6DAC,GA/gEAC,GAAA,WACA,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,GACA/0C,KAAA40C,WACA50C,KAAA60C,aACA70C,KAAA80C,UACA90C,KAAA+0C,SACAtoC,EAAA2F,QAAA2iC,GAAAF,EAAA,uCAyBA,OAnBAF,EAAAK,KAAA,IAAAL,GACA,WACA,GAKAA,EAAAM,OAAA,IAAAN,GAAA,GACA,QACA,GAKAA,EAAAO,qBAAA,SAAAJ,GACA,WAAAH,GAAA,GACA,EAAAG,GACA,IAEAH,EA/BA,GAkDAQ,GAAA,WAOA,SAAAA,EACAnb,EACAob,EACAC,GACAr1C,KAAAg6B,OACAh6B,KAAAo1C,eACAp1C,KAAAq1C,SAEAr1C,KAAA6F,KAAA8mC,GAAA2I,eAEAt1C,KAAA0V,OAAAi/B,GAAAK,KAoBA,OAfAG,EAAAv1C,UAAA21C,kBAAA,SAAAnT,GACA,GAAApiC,KAAAg6B,KAAArd,UAIA,UAAA3c,KAAAo1C,aAAAt0C,MAGA,OAFA2L,EAAA2F,OAAApS,KAAAo1C,aAAAI,SAAA74B,UAAA,4DAEA3c,KAGA,IAAAsoC,EAAAtoC,KAAAo1C,aAAAK,QAAA,IAAAzd,EAAAoK,IACA,WAAA+S,EAAAnd,EAAA0d,MAAApN,EAAAtoC,KAAAq1C,QATA,OADA5oC,EAAA2F,OAAApS,KAAAg6B,KAAA1B,aAAA8J,EAAA,iDACA,IAAA+S,EAAAn1C,KAAAg6B,KAAAxB,WAAAx4B,KAAAo1C,aAAAp1C,KAAAq1C,SAYAF,EArCA,GA+DAQ,GAAA,WAIA,OAHAlB,KACAA,GAAA,IAAAvP,GAAA7O,IAEAoe,IAKAmB,GAAA,WAMA,SAAAA,EAAA90C,EAAA00C,QACA,IAAAA,IAAkCA,EAAAG,MAClC31C,KAAAc,QACAd,KAAAw1C,WAkTA,OA3SAI,EAAAC,WAAA,SAAA1tC,GACA,IAAA4rC,EAAA6B,EAAAF,MAIA,OAHAjpC,EAAAnH,QAAA6C,EAAA,SAAAylC,EAAAkI,GACA/B,IAAA9lC,IAAA,IAAA+pB,EAAA4V,GAAAkI,KAEA/B,GAMA6B,EAAAh2C,UAAA+c,QAAA,WACA,cAAA3c,KAAAc,OAAAd,KAAAw1C,SAAA74B,WAcAi5B,EAAAh2C,UAAAm2C,iCAAA,SAAA7c,EAAA8c,GACA,SAAAh2C,KAAAc,OAAAk1C,EAAAh2C,KAAAc,OACA,OAAoBk5B,KAAAhC,EAAA0d,MAAA50C,MAAAd,KAAAc,OAGpB,GAAAo4B,EAAAvc,UACA,YAGA,IAAAimB,EAAA1J,EAAAZ,WACAS,EAAA/4B,KAAAw1C,SAAAz1C,IAAA6iC,GACA,UAAA7J,EAAA,CACA,IAAAkd,EAAAld,EAAAgd,iCAAA7c,EAAAV,WAAAwd,GACA,aAAAC,EAEA,CAAgCjc,KADhC,IAAAhC,EAAA4K,GAAA7J,MAAAkd,EAAAjc,MACgCl5B,MAAAm1C,EAAAn1C,OAGhC,KAIA,aAWA80C,EAAAh2C,UAAAs2C,yBAAA,SAAAhd,GACA,OAAAl5B,KAAA+1C,iCAAA7c,EAAA,WAAgF,YAMhF0c,EAAAh2C,UAAA61C,QAAA,SAAAvc,GACA,GAAAA,EAAAvc,UACA,OAAA3c,KAGA,IAAA4iC,EAAA1J,EAAAZ,WACAgQ,EAAAtoC,KAAAw1C,SAAAz1C,IAAA6iC,GACA,cAAA0F,EACAA,EAAAmN,QAAAvc,EAAAV,YAGAod,EAAAF,OAWAE,EAAAh2C,UAAAqO,IAAA,SAAAirB,EAAAid,GACA,GAAAjd,EAAAvc,UACA,WAAAi5B,EAAAO,EAAAn2C,KAAAw1C,UAGA,IAAA5S,EAAA1J,EAAAZ,WAEA8d,GADAp2C,KAAAw1C,SAAAz1C,IAAA6iC,IAAAgT,EAAAF,OACAznC,IAAAirB,EAAAV,WAAA2d,GACAtM,EAAA7pC,KAAAw1C,SAAA/P,OAAA7C,EAAAwT,GACA,WAAAR,EAAA51C,KAAAc,MAAA+oC,IASA+L,EAAAh2C,UAAAo0B,OAAA,SAAAkF,GACA,GAAAA,EAAAvc,UACA,OAAA3c,KAAAw1C,SAAA74B,UACAi5B,EAAAF,MAGA,IAAAE,EAAA,KAAA51C,KAAAw1C,UAIA,IAAA5S,EAAA1J,EAAAZ,WACAS,EAAA/4B,KAAAw1C,SAAAz1C,IAAA6iC,GACA,GAAA7J,EAAA,CACA,IAAAqd,EAAArd,EAAA/E,OAAAkF,EAAAV,YACAqR,OAAA,EAOA,OALAA,EADAuM,EAAAz5B,UACA3c,KAAAw1C,SAAAxhB,OAAA4O,GAGA5iC,KAAAw1C,SAAA/P,OAAA7C,EAAAwT,GAEA,OAAAp2C,KAAAc,OAAA+oC,EAAAltB,UACAi5B,EAAAF,MAGA,IAAAE,EAAA51C,KAAAc,MAAA+oC,GAIA,OAAA7pC,MAUA41C,EAAAh2C,UAAAG,IAAA,SAAAm5B,GACA,GAAAA,EAAAvc,UACA,OAAA3c,KAAAc,MAGA,IAAA8hC,EAAA1J,EAAAZ,WACAS,EAAA/4B,KAAAw1C,SAAAz1C,IAAA6iC,GACA,OAAA7J,EACAA,EAAAh5B,IAAAm5B,EAAAV,YAGA,MAWAod,EAAAh2C,UAAAy2C,QAAA,SAAAnd,EAAAod,GACA,GAAApd,EAAAvc,UACA,OAAA25B,EAGA,IAAA1T,EAAA1J,EAAAZ,WAEA8d,GADAp2C,KAAAw1C,SAAAz1C,IAAA6iC,IAAAgT,EAAAF,OACAW,QAAAnd,EAAAV,WAAA8d,GACAzM,OAAA,EAOA,OALAA,EADAuM,EAAAz5B,UACA3c,KAAAw1C,SAAAxhB,OAAA4O,GAGA5iC,KAAAw1C,SAAA/P,OAAA7C,EAAAwT,GAEA,IAAAR,EAAA51C,KAAAc,MAAA+oC,IAWA+L,EAAAh2C,UAAA22C,KAAA,SAAAruC,GACA,OAAAlI,KAAAw2C,MAAAxe,EAAA0d,MAAAxtC,IAUA0tC,EAAAh2C,UAAA42C,MAAA,SAAAC,EAAAvuC,GACA,IAAAwuC,EAAA,GAIA,OAHA12C,KAAAw1C,SAAApQ,iBAAA,SAAAuO,EAAArL,GACAoO,EAAA/C,GAAArL,EAAAkO,MAAAC,EAAA1d,MAAA4a,GAAAzrC,KAEAA,EAAAuuC,EAAAz2C,KAAAc,MAAA41C,IASAd,EAAAh2C,UAAA+2C,WAAA,SAAA3c,EAAAv6B,GACA,OAAAO,KAAA42C,YAAA5c,EAAAhC,EAAA0d,MAAAj2C,IAEAm2C,EAAAh2C,UAAAg3C,YAAA,SAAAC,EAAAJ,EAAAh3C,GACA,IAAA0E,IAAAnE,KAAAc,OAAArB,EAAAg3C,EAAAz2C,KAAAc,OACA,GAAAqD,EACA,OAAAA,EAGA,GAAA0yC,EAAAl6B,UACA,YAGA,IAAAimB,EAAAiU,EAAAve,WACAwe,EAAA92C,KAAAw1C,SAAAz1C,IAAA6iC,GACA,OAAAkU,EACAA,EAAAF,YAAAC,EAAAre,WAAAie,EAAA1d,MAAA6J,GAAAnjC,GAGA,MAWAm2C,EAAAh2C,UAAAm3C,cAAA,SAAA/c,EAAAv6B,GACA,OAAAO,KAAAg3C,eAAAhd,EAAAhC,EAAA0d,MAAAj2C,IAEAm2C,EAAAh2C,UAAAo3C,eAAA,SAAAH,EAAAI,EAAAx3C,GACA,GAAAo3C,EAAAl6B,UACA,OAAA3c,KAGAA,KAAAc,OACArB,EAAAw3C,EAAAj3C,KAAAc,OAEA,IAAA8hC,EAAAiU,EAAAve,WACAwe,EAAA92C,KAAAw1C,SAAAz1C,IAAA6iC,GACA,OAAAkU,EACAA,EAAAE,eAAAH,EAAAre,WAAAye,EAAAle,MAAA6J,GAAAnjC,GAGAm2C,EAAAF,OAWAE,EAAAh2C,UAAAs3C,QAAA,SAAAz3C,GACAO,KAAAm3C,SAAAnf,EAAA0d,MAAAj2C,IAEAm2C,EAAAh2C,UAAAu3C,SAAA,SAAAF,EAAAx3C,GACAO,KAAAw1C,SAAApQ,iBAAA,SAAAhD,EAAAkG,GACAA,EAAA6O,SAAAF,EAAAle,MAAAqJ,GAAA3iC,KAEAO,KAAAc,OACArB,EAAAw3C,EAAAj3C,KAAAc,QAOA80C,EAAAh2C,UAAAw3C,aAAA,SAAA33C,GACAO,KAAAw1C,SAAApQ,iBAAA,SAAAhD,EAAAkG,GACAA,EAAAxnC,OACArB,EAAA2iC,EAAAkG,EAAAxnC,UAIA80C,EAAAF,MAAA,IAAAE,EAAA,MACAA,EA3TA,GAoVAyB,GAAA,WACA,SAAAA,EAAA3hC,EAAAskB,GACAh6B,KAAA0V,SACA1V,KAAAg6B,OAEAh6B,KAAA6F,KAAA8mC,GAAA2K,gBAUA,OARAD,EAAAz3C,UAAA21C,kBAAA,SAAAnT,GACA,OAAApiC,KAAAg6B,KAAArd,UACA,IAAA06B,EAAAr3C,KAAA0V,OAAAsiB,EAAA0d,OAGA,IAAA2B,EAAAr3C,KAAA0V,OAAA1V,KAAAg6B,KAAAxB,aAGA6e,EAfA,GAyCAE,GAAA,WACA,SAAAA,EAAA7hC,EAAAskB,EAAAkT,GACAltC,KAAA0V,SACA1V,KAAAg6B,OACAh6B,KAAAktC,OAEAltC,KAAA6F,KAAA8mC,GAAA6K,UAUA,OARAD,EAAA33C,UAAA21C,kBAAA,SAAAnT,GACA,OAAApiC,KAAAg6B,KAAArd,UACA,IAAA46B,EAAAv3C,KAAA0V,OAAAsiB,EAAA0d,MAAA11C,KAAAktC,KAAA/K,kBAAAC,IAGA,IAAAmV,EAAAv3C,KAAA0V,OAAA1V,KAAAg6B,KAAAxB,WAAAx4B,KAAAktC,OAGAqK,EAhBA,GA0CAE,GAAA,WACA,SAAAA,EACA/hC,EACAskB,EACAwb,GACAx1C,KAAA0V,SACA1V,KAAAg6B,OACAh6B,KAAAw1C,WAEAx1C,KAAA6F,KAAA8mC,GAAA+K,MAsCA,OAjCAD,EAAA73C,UAAA21C,kBAAA,SAAAnT,GACA,GAAApiC,KAAAg6B,KAAArd,UAAA,CACA,IAAA2rB,EAAAtoC,KAAAw1C,SAAAC,QAAA,IAAAzd,EAAAoK,IACA,OAAAkG,EAAA3rB,UAEA,KAEA2rB,EAAAxnC,MAEA,IAAAy2C,GAAAv3C,KAAA0V,OAAAsiB,EAAA0d,MAAApN,EAAAxnC,OAIA,IAAA22C,EAAAz3C,KAAA0V,OAAAsiB,EAAA0d,MAAApN,GAKA,OADA77B,EAAA2F,OAAApS,KAAAg6B,KAAA1B,aAAA8J,EAAA,kEACA,IAAAqV,EAAAz3C,KAAA0V,OAAA1V,KAAAg6B,KAAAxB,WAAAx4B,KAAAw1C,WAMAiC,EAAA73C,UAAAyE,SAAA,WACA,mBACArE,KAAAg6B,KACA,KACAh6B,KAAA0V,OAAArR,WACA,WACArE,KAAAw1C,SAAAnxC,WACA,KAEAozC,EA/CA,GAwEAE,GAAA,WAMA,SAAAA,EAAArK,EAAAsK,EAAAC,GACA73C,KAAAstC,QACAttC,KAAA43C,oBACA53C,KAAA63C,YAwCA,OAlCAF,EAAA/3C,UAAAk4C,mBAAA,WACA,OAAA93C,KAAA43C,mBAMAD,EAAA/3C,UAAAm4C,WAAA,WACA,OAAA/3C,KAAA63C,WAMAF,EAAA/3C,UAAAo4C,kBAAA,SAAAhe,GACA,GAAAA,EAAArd,UACA,OAAA3c,KAAA83C,uBAAA93C,KAAA63C,UAEA,IAAAlE,EAAA3Z,EAAA1B,WACA,OAAAt4B,KAAAi4C,mBAAAtE,IAMAgE,EAAA/3C,UAAAq4C,mBAAA,SAAAzzC,GACA,OAAAxE,KAAA83C,uBAAA93C,KAAA63C,WAAA73C,KAAAstC,MAAAhL,SAAA99B,IAKAmzC,EAAA/3C,UAAAs4C,QAAA,WACA,OAAAl4C,KAAAstC,OAEAqK,EAjDA,GA2EAQ,GAAA,WAMA,SAAAA,EAAAC,EAAAC,GACAr4C,KAAAo4C,cACAp4C,KAAAq4C,eAyDA,OAjDAF,EAAAv4C,UAAA04C,gBAAA,SAAAC,EAAAvxC,EAAAwxC,GACA,WAAAL,EAAA,IAAAR,GAAAY,EAAAvxC,EAAAwxC,GAAAx4C,KAAAq4C,eAQAF,EAAAv4C,UAAA64C,iBAAA,SAAAC,EAAA1xC,EAAAwxC,GACA,WAAAL,EAAAn4C,KAAAo4C,YAAA,IAAAT,GAAAe,EAAA1xC,EAAAwxC,KAKAL,EAAAv4C,UAAA+4C,cAAA,WACA,OAAA34C,KAAAo4C,aAKAD,EAAAv4C,UAAAg5C,qBAAA,WACA,OAAA54C,KAAAo4C,YAAAN,qBACA93C,KAAAo4C,YAAAF,UACA,MAKAC,EAAAv4C,UAAAi5C,eAAA,WACA,OAAA74C,KAAAq4C,cAKAF,EAAAv4C,UAAAk5C,sBAAA,WACA,OAAA94C,KAAAq4C,aAAAP,qBACA93C,KAAAq4C,aAAAH,UACA,MAMAC,EAAAzC,MAAA,IAAAyC,EAAA,IAAAR,GAAA1N,GAAAlI,YACA,GACA,OAAA4V,GAAA1N,GAAAlI,YACA,GACA,IACAoW,EAjEA,GA6FAY,GAAA,WACA,SAAAA,EAAAlzC,EAAAspC,EAAA/M,EAAA4W,EAAA7K,GACAnuC,KAAA6F,OACA7F,KAAAmvC,eACAnvC,KAAAoiC,YACApiC,KAAAg5C,UACAh5C,KAAAmuC,WAqDA,OA/CA4K,EAAAE,YAAA,SAAArZ,GACA,WAAAmZ,IAAAG,MAAAtZ,IAOAmZ,EAAAI,iBAAA,SAAAxF,EAAA/T,GACA,WAAAmZ,IAAAK,YAAAxZ,EAAA+T,IAOAoF,EAAAM,mBAAA,SAAA1F,EAAA/T,GACA,WAAAmZ,IAAAO,cAAA1Z,EAAA+T,IAQAoF,EAAAQ,mBAAA,SAAA5F,EAAA6F,EAAAC,GACA,WAAAV,IAAAW,cAAAF,EAAA7F,EAAA8F,IAOAV,EAAAY,iBAAA,SAAAhG,EAAA/T,GACA,WAAAmZ,IAAAa,YAAAha,EAAA+T,IAIAoF,EAAAK,YAAA,cAEAL,EAAAO,cAAA,gBAEAP,EAAAW,cAAA,gBAEAX,EAAAa,YAAA,cAEAb,EAAAG,MAAA,QACAH,EA3DA,GAqFAc,GAAA,WACA,SAAAA,EAAArM,GACAxtC,KAAAwtC,SAkGA,OAhGAqM,EAAAj6C,UAAA+iC,YAAA,SAAAuK,EAAA1oC,EAAA4xC,EAAA0D,EAAApkC,EAAAqkC,GACAttC,EAAA2F,OAAA86B,EAAAnJ,UAAA/jC,KAAAwtC,QAAA,qDACA,IAAAwM,EAAA9M,EAAA/K,kBAAA39B,GAEA,OAAAw1C,EAAA3X,SAAAyX,GAAAjgB,OAAAuc,EAAA/T,SAAAyX,KAIAE,EAAAr9B,WAAAy5B,EAAAz5B,UAIAuwB,GAGA,MAAA6M,IACA3D,EAAAz5B,UACAuwB,EAAA5K,SAAA99B,GACAu1C,EAAAE,iBAAAlB,GAAAM,mBAAA70C,EAAAw1C,IAGAvtC,EAAA2F,OAAA86B,EAAAxL,aAAA,uEAGAsY,EAAAr9B,UACAo9B,EAAAE,iBAAAlB,GAAAI,iBAAA30C,EAAA4xC,IAGA2D,EAAAE,iBAAAlB,GAAAQ,mBAAA/0C,EAAA4xC,EAAA4D,KAGA9M,EAAAxL,cAAA0U,EAAAz5B,UACAuwB,EAIAA,EAAAzK,qBAAAj+B,EAAA4xC,GAAAtS,UAAA9jC,KAAAwtC,UAMAqM,EAAAj6C,UAAAs6C,eAAA,SAAAlB,EAAAmB,EAAAJ,GAuBA,OAtBA,MAAAA,IACAf,EAAAtX,cACAsX,EAAAlW,aAAAmB,GAAA,SAAAz/B,EAAAg+B,GACA2X,EAAA7X,SAAA99B,IACAu1C,EAAAE,iBAAAlB,GAAAM,mBAAA70C,EAAAg+B,MAIA2X,EAAAzY,cACAyY,EAAArX,aAAAmB,GAAA,SAAAz/B,EAAAg+B,GACA,GAAAwW,EAAA1W,SAAA99B,GAAA,CACA,IAAAw1C,EAAAhB,EAAA7W,kBAAA39B,GACAw1C,EAAAngB,OAAA2I,IACAuX,EAAAE,iBAAAlB,GAAAQ,mBAAA/0C,EAAAg+B,EAAAwX,SAIAD,EAAAE,iBAAAlB,GAAAI,iBAAA30C,EAAAg+B,OAKA2X,EAAArW,UAAA9jC,KAAAwtC,SAKAqM,EAAAj6C,UAAAqiC,eAAA,SAAA+W,EAAA3O,GACA,OAAA2O,EAAAr8B,UACAstB,GAAAlI,WAGAiX,EAAA/W,eAAAoI,IAMAwP,EAAAj6C,UAAAw6C,aAAA,WACA,UAKAP,EAAAj6C,UAAAy6C,iBAAA,WACA,OAAAr6C,MAKA65C,EAAAj6C,UAAAsvC,SAAA,WACA,OAAAlvC,KAAAwtC,QAEAqM,EApGA,GA0HAS,GAAA,WACA,SAAAA,IACAt6C,KAAAu6C,WAAA,GAmDA,OA9CAD,EAAA16C,UAAAq6C,iBAAA,SAAAlL,GACA,IAAAlpC,EAAAkpC,EAAAlpC,KACA8tC,EAAwC5E,EAAA3M,UACxC31B,EAAA2F,OAAAvM,GAAAkzC,GAAAK,aACAvzC,GAAAkzC,GAAAW,eACA7zC,GAAAkzC,GAAAO,cAAA,6CACA7sC,EAAA2F,OAAA,cAAAuhC,EAAA,mDACA,IAAA6G,EAAA/tC,EAAAqQ,QAAA9c,KAAAu6C,WAAA5G,GACA,GAAA6G,EAAA,CACA,IAAAC,EAAAD,EAAA30C,KACA,GAAAA,GAAAkzC,GAAAK,aAAAqB,GAAA1B,GAAAO,cACAt5C,KAAAu6C,WAAA5G,GAAAoF,GAAAQ,mBAAA5F,EAAA5E,EAAAI,aAAAqL,EAAArL,mBAEA,GAAAtpC,GAAAkzC,GAAAO,eACAmB,GAAA1B,GAAAK,mBACAp5C,KAAAu6C,WAAA5G,QAEA,GAAA9tC,GAAAkzC,GAAAO,eACAmB,GAAA1B,GAAAW,cACA15C,KAAAu6C,WAAA5G,GAAAoF,GAAAM,mBAAA1F,EAAA6G,EAAAxB,cAEA,GAAAnzC,GAAAkzC,GAAAW,eACAe,GAAA1B,GAAAK,YACAp5C,KAAAu6C,WAAA5G,GAAAoF,GAAAI,iBAAAxF,EAAA5E,EAAAI,kBAEA,IAAAtpC,GAAAkzC,GAAAW,eACAe,GAAA1B,GAAAW,cAIA,MAAAjtC,EAAA8F,eAAA,mCACAw8B,EACA,mBACAyL,GANAx6C,KAAAu6C,WAAA5G,GAAAoF,GAAAQ,mBAAA5F,EAAA5E,EAAAI,aAAAqL,EAAAxB,eAUAh5C,KAAAu6C,WAAA5G,GAAA5E,GAMAuL,EAAA16C,UAAA86C,WAAA,WACA,OAAAjuC,EAAAgQ,UAAAzc,KAAAu6C,aAEAD,EArDA,GAqGAK,GAAA,IAtBA,WACA,SAAAC,KAcA,OATAA,EAAAh7C,UAAAi7C,iBAAA,SAAAlH,GACA,aAKAiH,EAAAh7C,UAAAk7C,mBAAA,SAAA3wB,EAAA4O,EAAAr0B,GACA,aAEAk2C,EAfA,IA8BAG,GAAA,WAMA,SAAAA,EAAAC,EAAAC,EAAAC,QACA,IAAAA,IAAiDA,EAAA,MACjDl7C,KAAAg7C,UACAh7C,KAAAi7C,aACAj7C,KAAAk7C,0BAgCA,OA3BAH,EAAAn7C,UAAAi7C,iBAAA,SAAAlH,GACA,IAAAzT,EAAAlgC,KAAAi7C,WAAAtC,gBACA,GAAAzY,EAAA+X,mBAAAtE,GACA,OAAAzT,EAAAgY,UAAA/V,kBAAAwR,GAGA,IAAAwH,EAAA,MAAAn7C,KAAAk7C,wBACA,IAAAvD,GAAA33C,KAAAk7C,yBAAA,MACAl7C,KAAAi7C,WAAApC,iBACA,OAAA74C,KAAAg7C,QAAAI,kBAAAzH,EAAAwH,IAMAJ,EAAAn7C,UAAAk7C,mBAAA,SAAA3wB,EAAA4O,EAAAr0B,GACA,IAAA22C,EAAA,MAAAr7C,KAAAk7C,wBACAl7C,KAAAk7C,wBACAl7C,KAAAi7C,WAAAnC,wBACAwC,EAAAt7C,KAAAg7C,QAAAO,iBAAAF,EAAAtiB,EAAA,EAAAr0B,EAAAylB,GACA,WAAAmxB,EAAA32C,OACA,KAGA22C,EAAA,IAGAP,EA1CA,GAiEAS,GAAA,WASA,OAJA,SAAAC,EAAAC,GACA17C,KAAAy7C,YACAz7C,KAAA07C,WAPA,GAcAC,GAAA,WAIA,SAAAA,EAAAC,GACA57C,KAAA47C,UA4hBA,OAvhBAD,EAAA/7C,UAAAi8C,cAAA,SAAAJ,GACAhvC,EAAA2F,OAAAqpC,EACA9C,gBACAT,UACAnU,UAAA/jC,KAAA47C,QAAA1M,YAAA,0BACAziC,EAAA2F,OAAAqpC,EACA5C,iBACAX,UACAnU,UAAA/jC,KAAA47C,QAAA1M,YAAA,4BASAyM,EAAA/7C,UAAAk8C,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IACAC,EAAAC,EADAC,EAAA,IAAA/B,GAEA,GAAA0B,EAAAn2C,OAAA8mC,GAAA6K,UAAA,CACA,IAAA8E,EAAAN,EACAM,EAAA5mC,OAAAk/B,SACAuH,EAAAn8C,KAAAu8C,oBAAAR,EAAAO,EAAAtiB,KAAAsiB,EAAApP,KAAA+O,EAAAC,EAAAG,IAGA5vC,EAAA2F,OAAAkqC,EAAA5mC,OAAAm/B,WAAA,mBAIAuH,EACAE,EAAA5mC,OAAAq/B,QACAgH,EAAAlD,iBAAAd,eACAuE,EAAAtiB,KAAArd,UACAw/B,EAAAn8C,KAAAw8C,sBAAAT,EAAAO,EAAAtiB,KAAAsiB,EAAApP,KAAA+O,EAAAC,EAAAE,EAAAC,SAGA,GAAAL,EAAAn2C,OAAA8mC,GAAA+K,MAAA,CACA,IAAA+E,EAAAT,EACAS,EAAA/mC,OAAAk/B,SACAuH,EAAAn8C,KAAA08C,gBAAAX,EAAAU,EAAAziB,KAAAyiB,EAAAjH,SAAAyG,EAAAC,EAAAG,IAGA5vC,EAAA2F,OAAAqqC,EAAA/mC,OAAAm/B,WAAA,mBAEAuH,EACAK,EAAA/mC,OAAAq/B,QAAAgH,EAAAlD,iBAAAd,aACAoE,EAAAn8C,KAAA28C,kBAAAZ,EAAAU,EAAAziB,KAAAyiB,EAAAjH,SAAAyG,EAAAC,EAAAE,EAAAC,SAGA,GAAAL,EAAAn2C,OAAA8mC,GAAA2I,eAAA,CACA,IAAAsH,EAAAZ,EAKAG,EAJAS,EAAAvH,OAIAr1C,KAAA68C,iBAAAd,EAAAa,EAAA5iB,KAAAiiB,EAAAC,EAAAG,GAHAr8C,KAAA88C,cAAAf,EAAAa,EAAA5iB,KAAA4iB,EAAAxH,aAAA6G,EAAAC,EAAAG,OAMA,IAAAL,EAAAn2C,OAAA8mC,GAAA2K,gBAIA,MAAA7qC,EAAA8F,eAAA,2BAAAypC,EAAAn2C,MAHAs2C,EAAAn8C,KAAA+8C,gBAAAhB,EAAAC,EAAAhiB,KAAAiiB,EAAAI,GAKA,IAAAX,EAAAW,EAAA3B,aAEA,OADAiB,EAAAqB,oBAAAjB,EAAAI,EAAAT,GACA,IAAAF,GAAAW,EAAAT,IAQAC,EAAAqB,oBAAA,SAAAjB,EAAAI,EAAAE,GACA,IAAA9D,EAAA4D,EAAAxD,gBACA,GAAAJ,EAAAT,qBAAA,CACA,IAAAmF,EAAA1E,EAAAL,UAAAxW,cAAA6W,EAAAL,UAAAv7B,UACAugC,EAAAnB,EAAAnD,wBACAyD,EAAA13C,OAAA,IACAo3C,EAAApD,gBAAAb,sBACAmF,IACA1E,EACAL,UACAre,OAAiD,KACjD0e,EACAL,UACAvW,cACA9H,OAAAqjB,EAAAvb,iBACA0a,EAAA53C,KAAAs0C,GAAAE,YACiCkD,EAAAvD,2BAajC+C,EAAA/7C,UAAAu9C,oCAAA,SAAA1B,EAAA2B,EAAAnB,EAAAvmC,EAAA2mC,GACA,IAAAgB,EAAA5B,EAAA9C,gBACA,SAAAsD,EAAAqB,eAAAF,GAEA,OAAA3B,EAGA,IAAA8B,OAAA,EAAApC,OAAA,EACA,GAAAiC,EAAAzgC,UAGA,GADAlQ,EAAA2F,OAAAqpC,EAAA5C,iBAAAf,qBAAA,8DACA2D,EAAA5C,iBAAAd,aAAA,CAIA,IAAAyF,EAAA/B,EAAA3C,wBACA2E,EAAAD,aAAAvT,GACAuT,EACAvT,GAAAlI,WACA2b,EAAAzB,EAAA0B,0BAAAF,GACAF,EAAAv9C,KAAA47C,QAAA1B,eAAAuB,EAAA9C,gBAAAT,UAAAwF,EAAArB,OAEA,CACA,IAAAuB,EAAA3B,EAAA4B,uBAAApC,EAAA3C,yBACAyE,EAAAv9C,KAAA47C,QAAA1B,eAAAuB,EAAA9C,gBAAAT,UAAA0F,EAAAvB,OAGA,CACA,IAAA1I,EAAAyJ,EAAA9kB,WACA,gBAAAqb,EAAA,CACAlnC,EAAA2F,OAAA,GAAAgrC,EAAA7kB,YAAA,yDACA,IAAAulB,EAAAT,EAAAnF,UACAiD,EAAAM,EAAA5C,iBAAAX,UAEA,IAAA6F,EAAA9B,EAAA+B,mCAAAZ,EAAAU,EAAA3C,GAEAoC,EADA,MAAAQ,EACA/9C,KAAA47C,QAAA3Z,eAAA6b,EAAAC,GAIAV,EAAAnF,cAGA,CACA,IAAA+F,EAAAb,EAAA5kB,WAEA0lB,OAAA,EACA,GAAAb,EAAApF,mBAAAtE,GAAA,CACAwH,EAAAM,EAAA5C,iBAAAX,UACA,IAAAiG,EAAAlC,EAAA+B,mCAAAZ,EAAAC,EAAAnF,UAAAiD,GAEA+C,EADA,MAAAC,EACAd,EACAnF,UACA/V,kBAAAwR,GACAhR,YAAAsb,EAAAE,GAIAd,EACAnF,UACA/V,kBAAAwR,QAIAuK,EAAAjC,EAAAb,kBAAAzH,EAAA8H,EAAA5C,kBAGA0E,EADA,MAAAW,EACAl+C,KAAA47C,QAAAjZ,YAAA0a,EAAAnF,UAAAvE,EAAAuK,EAAAD,EAAAvoC,EAAA2mC,GAIAgB,EAAAnF,WAIA,OAAAuD,EAAAnD,gBAAAiF,EAAAF,EAAAvF,sBAAAsF,EAAAzgC,UAAA3c,KAAA47C,QAAAxB,iBAcAuB,EAAA/7C,UAAA48C,sBAAA,SAAAT,EAAAqB,EAAAgB,EAAAnC,EAAAC,EAAAE,EAAAC,GACA,IACAgC,EADAC,EAAAvC,EAAAlD,iBAEA0F,EAAAnC,EACAp8C,KAAA47C,QACA57C,KAAA47C,QAAAvB,mBACA,GAAA+C,EAAAzgC,UACA0hC,EAAAE,EAAArE,eAAAoE,EAAApG,UAAAkG,EAAA,WAEA,GAAAG,EAAAnE,iBAAAkE,EAAAvG,aAAA,CAEA,IAAAyG,EAAAF,EACApG,UACAvV,YAAAya,EAAAgB,GACAC,EAAAE,EAAArE,eAAAoE,EAAApG,UAAAsG,EAAA,UAEA,CACA,IAAA7K,EAAAyJ,EAAA9kB,WACA,IAAAgmB,EAAAtG,kBAAAoF,IACAA,EAAA7kB,YAAA,EAEA,OAAAwjB,EAEA,IAAAkC,EAAAb,EAAA5kB,WAEAkK,EADA4b,EAAApG,UAAA/V,kBAAAwR,GACAhR,YAAAsb,EAAAG,GAEAC,EADA,aAAA1K,EACA4K,EAAAtc,eAAAqc,EAAApG,UAAAxV,GAGA6b,EAAA5b,YAAA2b,EAAApG,UAAAvE,EAAAjR,EAAAub,EAAAtD,GAAA,MAGA,IAAAwB,EAAAJ,EAAAtD,iBAAA4F,EAAAC,EAAAxG,sBAAAsF,EAAAzgC,UAAA4hC,EAAAnE,gBACA1kC,EAAA,IAAAqlC,GAAAkB,EAAAE,EAAAD,GACA,OAAAl8C,KAAAm9C,oCAAAhB,EAAAiB,EAAAnB,EAAAvmC,EAAA2mC,IAYAV,EAAA/7C,UAAA28C,oBAAA,SAAAR,EAAAqB,EAAAgB,EAAAnC,EAAAC,EAAAG,GACA,IACAF,EAAAoB,EADAF,EAAAtB,EAAApD,gBAEAjjC,EAAA,IAAAqlC,GAAAkB,EAAAF,EAAAG,GACA,GAAAkB,EAAAzgC,UACA4gC,EAAAv9C,KAAA47C,QAAA1B,eAAA6B,EAAApD,gBAAAT,UAAAkG,EAAA/B,GACAF,EAAAJ,EAAAzD,gBAAAiF,GAAA,EAAAv9C,KAAA47C,QAAAxB,oBAEA,CACA,IAAAzG,EAAAyJ,EAAA9kB,WACA,iBAAAqb,EACA4J,EAAAv9C,KAAA47C,QAAA3Z,eAAA8Z,EAAApD,gBAAAT,UAAAkG,GACAjC,EAAAJ,EAAAzD,gBAAAiF,EAAAF,EAAAvF,qBAAAuF,EAAAtF,kBAEA,CACA,IAAAkG,EAAAb,EAAA5kB,WACAwhB,EAAAqD,EAAAnF,UAAA/V,kBAAAwR,GACAyC,OAAA,EACA,GAAA6H,EAAAthC,UAEAy5B,EAAAgI,MAEA,CACA,IAAA5b,EAAA9sB,EAAAmlC,iBAAAlH,GAMAyC,EALA,MAAA5T,EACA,cAAAyb,EAAAxlB,WACA+J,EAAAH,SAAA4b,EAAAplB,UAAAlc,UAGA6lB,EAGAA,EAAAG,YAAAsb,EAAAG,GAKAnU,GAAAlI,WAGA,GAAAiY,EAAAngB,OAAAuc,GAKA+F,EAAAJ,MALA,CACA,IAAA0C,EAAAz+C,KAAA47C,QAAAjZ,YAAA0a,EAAAnF,UAAAvE,EAAAyC,EAAA6H,EAAAvoC,EAAA2mC,GACAF,EAAAJ,EAAAzD,gBAAAmG,EAAApB,EAAAvF,qBAAA93C,KAAA47C,QAAAxB,kBAOA,OAAA+B,GAQAR,EAAA+C,eAAA,SAAAjD,EAAA9H,GACA,OAAA8H,EAAA9C,gBAAAV,mBAAAtE,IAYAgI,EAAA/7C,UAAA88C,gBAAA,SAAAjB,EAAAzhB,EAAA2kB,EAAA1C,EAAAuB,EAAAnB,GACA,IAAAhuC,EAAArO,KAOA4+C,EAAAnD,EAaA,OAZAkD,EAAAzH,QAAA,SAAAhe,EAAAsJ,GACA,IAAAqc,EAAA7kB,EAAAjB,MAAAG,GACAyiB,EAAA+C,eAAAjD,EAAAoD,EAAAvmB,cACAsmB,EAAAvwC,EAAAkuC,oBAAAqC,EAAAC,EAAArc,EAAAyZ,EAAAuB,EAAAnB,MAGAsC,EAAAzH,QAAA,SAAAhe,EAAAsJ,GACA,IAAAqc,EAAA7kB,EAAAjB,MAAAG,GACAyiB,EAAA+C,eAAAjD,EAAAoD,EAAAvmB,cACAsmB,EAAAvwC,EAAAkuC,oBAAAqC,EAAAC,EAAArc,EAAAyZ,EAAAuB,EAAAnB,MAGAuC,GAQAjD,EAAA/7C,UAAAk/C,YAAA,SAAA5e,EAAAuc,GAIA,OAHAA,EAAAvF,QAAA,SAAAhe,EAAAsJ,GACAtC,IAAAyC,YAAAzJ,EAAAsJ,KAEAtC,GAaAyb,EAAA/7C,UAAA+8C,kBAAA,SAAAlB,EAAAzhB,EAAA2kB,EAAA1C,EAAAuB,EAAApB,EAAAC,GACA,IAAAhuC,EAAArO,KAGA,GAAAy7C,EACA5C,iBACAX,UACAv7B,YACA8+B,EAAA5C,iBAAAf,qBACA,OAAA2D,EAQA,IACAsD,EADAH,EAAAnD,EAGAsD,EADA/kB,EAAArd,UACAgiC,EAGA/I,GAAAF,MAAAW,QAAArc,EAAA2kB,GAEA,IAAAxD,EAAAM,EAAA5C,iBAAAX,UAuBA,OAtBA6G,EAAAvJ,SAAApQ,iBAAA,SAAAuO,EAAArL,GACA,GAAA6S,EAAA7Y,SAAAqR,GAAA,CACA,IAAAqL,EAAAvD,EACA5C,iBACAX,UACA/V,kBAAAwR,GACAyC,EAAA/nC,EAAAywC,YAAAE,EAAA1W,GACAsW,EAAAvwC,EAAAmuC,sBAAAoC,EAAA,IAAA5mB,EAAA2b,GAAAyC,EAAA6F,EAAAuB,EAAApB,EAAAC,MAGA0C,EAAAvJ,SAAApQ,iBAAA,SAAAuO,EAAAsL,GACA,IAAAC,GAAAzD,EAAA5C,iBAAAZ,mBAAAtE,IACA,MAAAsL,EAAAn+C,MACA,IAAAq6C,EAAA7Y,SAAAqR,KAAAuL,EAAA,CACA,IAAAF,EAAAvD,EACA5C,iBACAX,UACA/V,kBAAAwR,GACAyC,EAAA/nC,EAAAywC,YAAAE,EAAAC,GACAL,EAAAvwC,EAAAmuC,sBAAAoC,EAAA,IAAA5mB,EAAA2b,GAAAyC,EAAA6F,EAAAuB,EAAApB,EAAAC,MAGAuC,GAYAjD,EAAA/7C,UAAAk9C,cAAA,SAAArB,EAAA0D,EAAA/J,EAAA6G,EAAAC,EAAAG,GACA,SAAAJ,EAAAqB,eAAA6B,GACA,OAAA1D,EAGA,IAAAW,EAAAX,EAAA5C,iBAAAd,aAGAyF,EAAA/B,EAAA5C,iBACA,SAAAzD,EAAAt0C,MAAA,CAEA,GAAAq+C,EAAAxiC,WAAA6gC,EAAA1F,sBACA0F,EAAAxF,kBAAAmH,GACA,OAAAn/C,KAAAw8C,sBAAAf,EAAA0D,EAAA3B,EAAAtF,UAAA7V,SAAA8c,GAAAlD,EAAAC,EAAAE,EAAAC,GAEA,GAAA8C,EAAAxiC,UAAA,CAGA,IAAAyiC,EAAAxJ,GAAAF,MAIA,OAHA8H,EAAAtF,UAAApV,aAAA3B,GAAA,SAAAzgC,EAAAw/B,GACAkf,IAAAnxC,IAAA,IAAA+pB,EAAAt3B,GAAAw/B,KAEAlgC,KAAA28C,kBAAAlB,EAAA0D,EAAAC,EAAAnD,EAAAC,EAAAE,EAAAC,GAGA,OAAAZ,EAKA,IAAA4D,EAAAzJ,GAAAF,MAOA,OANAN,EAAA8B,QAAA,SAAAoI,EAAAx+C,GACA,IAAAy+C,EAAAJ,EAAApmB,MAAAumB,GACA9B,EAAAxF,kBAAAuH,KACAF,IAAApxC,IAAAqxC,EAAA9B,EAAAtF,UAAA7V,SAAAkd,OAGAv/C,KAAA28C,kBAAAlB,EAAA0D,EAAAE,EAAApD,EAAAC,EAAAE,EAAAC,IAWAV,EAAA/7C,UAAAm9C,gBAAA,SAAAtB,EAAAzhB,EAAAiiB,EAAAI,GACA,IAAAmD,EAAA/D,EAAA5C,iBACAsD,EAAAV,EAAAhD,iBAAA+G,EAAAtH,UAAAsH,EAAA1H,sBAAA9d,EAAArd,UAAA6iC,EAAAzH,cACA,OAAA/3C,KAAAm9C,oCAAAhB,EAAAniB,EAAAiiB,EAAAtB,GAAA0B,IAWAV,EAAA/7C,UAAAi9C,iBAAA,SAAApB,EAAAzhB,EAAAiiB,EAAAwD,EAAApD,GACA,IAAAr1C,EACA,SAAAi1C,EAAAqB,eAAAtjB,GACA,OAAAyhB,EAGA,IAAA/lC,EAAA,IAAAqlC,GAAAkB,EAAAR,EAAAgE,GACAC,EAAAjE,EAAA9C,gBAAAT,UACAqF,OAAA,EACA,GAAAvjB,EAAArd,WAAA,cAAAqd,EAAA1B,WAAA,CACA,IAAAmI,OAAA,EACA,GAAAgb,EAAA5C,iBAAAf,qBACArX,EAAAwb,EAAA4B,uBAAApC,EAAA3C,6BAEA,CACA,IAAA6G,EAAAlE,EAAA5C,iBAAAX,UACAzrC,EAAA2F,OAAAutC,aAAA1V,GAAA,iDACAxJ,EAAAwb,EAAA0B,0BAAAgC,GAEAlf,IACA8c,EAAAv9C,KAAA47C,QAAA1B,eAAAwF,EAAAjf,EAAA4b,OAEA,CACA,IAAA1I,EAAA3Z,EAAA1B,WACA8d,EAAA6F,EAAAb,kBAAAzH,EAAA8H,EAAA5C,kBACA,MAAAzC,GACAqF,EAAA5C,iBAAAZ,mBAAAtE,KACAyC,EAAAsJ,EAAAvd,kBAAAwR,KAGA4J,EADA,MAAAnH,EACAp2C,KAAA47C,QAAAjZ,YAAA+c,EAAA/L,EAAAyC,EAAApc,EAAAxB,WAAA9iB,EAAA2mC,GAEAZ,EACA9C,gBACAT,UACA5V,SAAAqR,GAEA3zC,KAAA47C,QAAAjZ,YAAA+c,EAAA/L,EAAA1J,GAAAlI,WAAA/H,EAAAxB,WAAA9iB,EAAA2mC,GAGAqD,GAEA/iC,WACA8+B,EAAA5C,iBAAAf,uBAEA9wC,EAAAi1C,EAAA4B,uBAAApC,EAAA3C,0BACApX,eACA6b,EAAAv9C,KAAA47C,QAAA1B,eAAAqD,EAAAv2C,EAAAq1C,IAOA,OAHAr1C,EACAy0C,EAAA5C,iBAAAf,sBACA,MAAAmE,EAAAqB,eAAAtlB,EAAA0d,OACA+F,EAAAnD,gBAAAiF,EAAAv2C,EAAAhH,KAAA47C,QAAAxB,iBAGAuB,EAjiBA,GA2jBAiE,GAAA,WAKA,SAAAA,EAAAC,GACA7/C,KAAA6/C,SAKA7/C,KAAAwtC,OAAAxtC,KAAA6/C,OAAA5Q,iBAAAC,WAuFA,OAvEA0Q,EAAAhgD,UAAAkgD,yBAAA,SAAApE,EAAAqE,EAAAC,GACA,IAAA3xC,EAAArO,KACAigD,EAAA,GACAC,EAAA,GAYA,OAXAxE,EAAAp2C,QAAA,SAAAypC,GACAA,EAAAlpC,OAAAkzC,GAAAW,eACArrC,EAAAm/B,OAAAjN,oBAAAwO,EAAAiK,QAAAjK,EAAAI,eACA+Q,EAAAz7C,KAAAs0C,GAAAY,iBAAA5K,EAAA3M,UAAA2M,EAAAI,iBAGAnvC,KAAAmgD,uBAAAF,EAAAlH,GAAAO,cAAAoC,EAAAsE,EAAAD,GACA//C,KAAAmgD,uBAAAF,EAAAlH,GAAAK,YAAAsC,EAAAsE,EAAAD,GACA//C,KAAAmgD,uBAAAF,EAAAlH,GAAAa,YAAAsG,EAAAF,EAAAD,GACA//C,KAAAmgD,uBAAAF,EAAAlH,GAAAW,cAAAgC,EAAAsE,EAAAD,GACA//C,KAAAmgD,uBAAAF,EAAAlH,GAAAG,MAAAwC,EAAAsE,EAAAD,GACAE,GAYAL,EAAAhgD,UAAAugD,uBAAA,SAAAF,EAAAxhB,EAAAid,EAAA0E,EAAAL,GACA,IAAA1xC,EAAArO,KACAqgD,EAAA3E,EAAA5tC,OAAA,SAAAihC,GAAgE,OAAAA,EAAAlpC,OAAA44B,IAChE4hB,EAAA7pB,KAAAx2B,KAAAsgD,gBAAApxC,KAAAlP,OACAqgD,EAAA/6C,QAAA,SAAAypC,GACA,IAAAwR,EAAAlyC,EAAAmyC,yBAAAzR,EAAAgR,GACAK,EAAA96C,QAAA,SAAAm7C,GACAA,EAAA5R,WAAAE,EAAAlpC,OACAo6C,EAAAx7C,KAAAg8C,EAAA3R,YAAAyR,EAAAlyC,EAAAwxC,cAWAD,EAAAhgD,UAAA4gD,yBAAA,SAAAzR,EAAAgR,GACA,gBAAAhR,EAAAlpC,MAAA,kBAAAkpC,EAAAlpC,KACAkpC,GAGAA,EAAAZ,SAAA4R,EAAAxd,wBAEAwM,EAAA3M,UAAA2M,EAAAI,aAAAnvC,KAAAwtC,QACAuB,IASA6Q,EAAAhgD,UAAA0gD,gBAAA,SAAA1nC,EAAAC,GACA,SAAAD,EAAAwpB,WAAA,MAAAvpB,EAAAupB,UACA,MAAA31B,EAAA8F,eAAA,sCAEA,IAAAmuC,EAAA,IAAAzgB,GAAArnB,EAAAwpB,UAAAxpB,EAAAu2B,cACAwR,EAAA,IAAA1gB,GAAApnB,EAAAupB,UAAAvpB,EAAAs2B,cACA,OAAAnvC,KAAAwtC,OAAAlN,QAAAogB,EAAAC,IAEAf,EAlGA,GA+HAgB,GAAA,WAMA,SAAAA,EAAAf,EAAAgB,GACA7gD,KAAA6/C,SACA7/C,KAAA8gD,oBAAA,GACA,IAAA7jC,EAAAjd,KAAA6/C,OAAA5Q,iBACA8R,EAAA,IAAAlH,GAAA58B,EAAAiyB,YACAphC,EAAAmP,EAAA+jC,gBAKAhhD,KAAAihD,WAAA,IAAAtF,GAAA7tC,GACA,IAAAozC,EAAAL,EAAAhI,iBACAsI,EAAAN,EAAAlI,gBAEAD,EAAAqI,EAAA7G,eAAAjQ,GAAAlI,WAAAmf,EAAAhJ,UAAA,MACAK,EAAAzqC,EAAAosC,eAAAjQ,GAAAlI,WAAAof,EAAAjJ,UAAA,MACAmG,EAAA,IAAA1G,GAAAe,EAAAwI,EAAApJ,qBAAAiJ,EAAA3G,gBACAmD,EAAA,IAAA5F,GAAAY,EAAA4I,EAAArJ,qBAAAhqC,EAAAssC,gBAKAp6C,KAAAi7C,WAAA,IAAA9C,GAAAoF,EAAAc,GAKAr+C,KAAAohD,gBAAA,IAAAxB,GAAA5/C,KAAA6/C,QAqIA,OAhIAe,EAAAhhD,UAAAyhD,SAAA,WACA,OAAArhD,KAAA6/C,QAKAe,EAAAhhD,UAAAi5C,eAAA,WACA,OAAA74C,KAAAi7C,WAAApC,iBAAAX,WAMA0I,EAAAhhD,UAAA0hD,uBAAA,SAAAtnB,GACA,IAAAunB,EAAAvhD,KAAAi7C,WAAAnC,wBACA,OAAAyI,IAGAvhD,KAAA6/C,OAAA5Q,iBAAAuS,iBACAxnB,EAAArd,YAAA4kC,EAAApf,kBAAAnI,EAAA1B,YAAA3b,WACA4kC,EAAAlf,SAAArI,GAGA,MAKA4mB,EAAAhhD,UAAA+c,QAAA,WACA,WAAA3c,KAAA8gD,oBAAAn8C,QAKAi8C,EAAAhhD,UAAA6hD,qBAAA,SAAAvT,GACAluC,KAAA8gD,oBAAAr8C,KAAAypC,IAOA0S,EAAAhhD,UAAA8hD,wBAAA,SAAAxT,EAAAyT,GACA,IAAAC,EAAA,GACA,GAAAD,EAAA,CACAl1C,EAAA2F,OAAA,MAAA87B,EAAA,mDACA,IAAA2T,EAAA7hD,KAAA6/C,OAAA7lB,KACAh6B,KAAA8gD,oBAAAx7C,QAAA,SAAAm7C,GACAkB,EAA8CA,EAC9C,IAAAG,EAAArB,EAAAjR,kBAAAmS,EAAAE,GACAC,GACAF,EAAAn9C,KAAAq9C,KAIA,GAAA5T,EAAA,CAEA,IADA,IAAAroB,EAAA,GACAvf,EAAA,EAA2BA,EAAAtG,KAAA8gD,oBAAAn8C,SAAqC2B,EAAA,CAChE,IAAAy7C,EAAA/hD,KAAA8gD,oBAAAx6C,GACA,GAAAy7C,EAAAtS,QAAAvB,IAGA,GAAAA,EAAAwB,iBAAA,CAEA7pB,IAAA5b,OAAAjK,KAAA8gD,oBAAAr7C,MAAAa,EAAA,IACA,YALAuf,EAAAphB,KAAAs9C,GAQA/hD,KAAA8gD,oBAAAj7B,OAGA7lB,KAAA8gD,oBAAA,GAEA,OAAAc,GAUAhB,EAAAhhD,UAAAk8C,eAAA,SAAAE,EAAAC,EAAAwD,GACAzD,EAAAn2C,OAAA8mC,GAAA+K,OACA,OAAAsE,EAAAtmC,OAAAo/B,UACAroC,EAAA2F,OAAApS,KAAAi7C,WAAAnC,wBAAA,6DACArsC,EAAA2F,OAAApS,KAAAi7C,WAAArC,uBAAA,4DAEA,IAAAmD,EAAA/7C,KAAAi7C,WACA92C,EAAAnE,KAAAihD,WAAAnF,eAAAC,EAAAC,EAAAC,EAAAwD,GAKA,OAJAz/C,KAAAihD,WAAApF,cAAA13C,EAAAs3C,WACAhvC,EAAA2F,OAAAjO,EAAAs3C,UAAA5C,iBAAAf,uBACAiE,EAAAlD,iBAAAf,qBAAA,2DACA93C,KAAAi7C,WAAA92C,EAAAs3C,UACAz7C,KAAAgiD,0BAAA79C,EAAAu3C,QAAAv3C,EAAAs3C,UAAA9C,gBAAAT,UAAA,OAMA0I,EAAAhhD,UAAAqiD,iBAAA,SAAAxB,GACA,IAAAlI,EAAAv4C,KAAAi7C,WAAAtC,gBACAuJ,EAAA,GACA3J,EAAAL,UAAAxW,cACA6W,EAAAL,UACApV,aAAAmB,GAAA,SAAAz/B,EAAAg+B,GACA0f,EAAAz9C,KAAAs0C,GAAAI,iBAAA30C,EAAAg+B,MAMA,OAHA+V,EAAAT,sBACAoK,EAAAz9C,KAAAs0C,GAAAE,YAAAV,EAAAL,YAEAl4C,KAAAgiD,0BAAAE,EAAA3J,EAAAL,UAAAuI,IASAG,EAAAhhD,UAAAoiD,0BAAA,SAAAtG,EAAAqE,EAAA7R,GACA,IAAAkS,EAAAlS,EACA,CAAAA,GACAluC,KAAA8gD,oBACA,OAAA9gD,KAAAohD,gBAAAtB,yBAAApE,EAAAqE,EAAAK,IAEAQ,EAtKA,GAoMAuB,GAAA,WACA,SAAAA,IAUAniD,KAAAoiD,OAAA,GAwMA,OAtMAnhD,OAAAT,eAAA2hD,EAAA,0BACApiD,IAAA,WAEA,OADA0M,EAAA2F,OAAAsiC,GAAA,oCACAA,IAEAzmC,IAAA,SAAAC,GACAzB,EAAA2F,QAAAsiC,GAAA,mDACAA,GAAAxmC,GAEAC,YAAA,EACArO,cAAA,IAKAqiD,EAAAviD,UAAA+c,QAAA,WACA,OAAAlQ,EAAAkQ,QAAA3c,KAAAoiD,SASAD,EAAAviD,UAAAk8C,eAAA,SAAAE,EAAAC,EAAAoG,GACA,IAAAvN,EAAAkH,EAAAtmC,OAAAo/B,QACA,UAAAA,EAAA,CACA,IAAA9xB,EAAAvW,EAAAqQ,QAAA9c,KAAAoiD,OAAAtN,GAEA,OADAroC,EAAA2F,OAAA,MAAA4Q,EAAA,gDACAA,EAAA84B,eAAAE,EAAAC,EAAAoG,GAGA,IAAAC,EAAA,GAIA,OAHA71C,EAAAnH,QAAAtF,KAAAoiD,OAAA,SAAA59C,EAAAwe,GACAs/B,IAAAr4C,OAAA+Y,EAAA84B,eAAAE,EAAAC,EAAAoG,MAEAC,GAaAH,EAAAviD,UAAA6hD,qBAAA,SAAAzS,EAAAd,EAAA+N,EAAAuB,EAAA+E,GACA,IAAAzN,EAAA9F,EAAAkE,kBACAlwB,EAAAvW,EAAAqQ,QAAA9c,KAAAoiD,OAAAtN,GACA,IAAA9xB,EAAA,CAEA,IAAA+8B,EAAA9D,EAAA4B,uBAAA0E,EAAA/E,EAAA,MACAgF,GAAA,EACAzC,EACAyC,GAAA,EAEAhF,aAAAvT,IACA8V,EAAA9D,EAAA0B,0BAAAH,GACAgF,GAAA,IAGAzC,EAAA9V,GAAAlI,WACAygB,GAAA,GAEA,IAAA/G,EAAA,IAAAtD,GAAA,IAAAR,GAC6B,EAAA6K,GAAA,OAAA7K,GACA,EAAA4K,GAAA,IAC7Bv/B,EAAA,IAAA49B,GAAA5R,EAAAyM,GACAz7C,KAAAoiD,OAAAtN,GAAA9xB,EAIA,OADAA,EAAAy+B,qBAAAvT,GACAlrB,EAAAi/B,iBAAA/T,IAaAiU,EAAAviD,UAAA8hD,wBAAA,SAAA1S,EAAAd,EAAAyT,GACA,IAAA7M,EAAA9F,EAAAkE,kBACAuP,EAAA,GACAb,EAAA,GACAc,EAAA1iD,KAAA2iD,kBACA,eAAA7N,EAAA,CAEA,IAAAhB,EAAA9zC,KACAyM,EAAAnH,QAAAtF,KAAAoiD,OAAA,SAAAQ,EAAA5/B,GACA4+B,IAAA33C,OAAA+Y,EAAA0+B,wBAAAxT,EAAAyT,IACA3+B,EAAArG,mBACAm3B,EAAAsO,OAAAQ,GAEA5/B,EACAq+B,WACApS,iBACAuS,gBACAiB,EAAAh+C,KAAAue,EAAAq+B,mBAKA,CAEA,IAAAr+B,EAAAvW,EAAAqQ,QAAA9c,KAAAoiD,OAAAtN,GACA9xB,IACA4+B,IAAA33C,OAAA+Y,EAAA0+B,wBAAAxT,EAAAyT,IACA3+B,EAAArG,mBACA3c,KAAAoiD,OAAAtN,GAEA9xB,EACAq+B,WACApS,iBACAuS,gBACAiB,EAAAh+C,KAAAue,EAAAq+B,cASA,OAJAqB,IAAA1iD,KAAA2iD,mBAEAF,EAAAh+C,KAAA,IAAA09C,EAAAzV,uBAAAsC,EAAAoB,KAAApB,EAAAhV,OAEA,CAAgByoB,UAAAxC,OAAA2B,IAKhBO,EAAAviD,UAAAijD,cAAA,WACA,IAAAx0C,EAAArO,KAEA,OADAiB,OAAAqD,KAAAtE,KAAAoiD,QAAAzzC,IAAA,SAAAnK,GAAkE,OAAA6J,EAAA+zC,OAAA59C,KAClEsJ,OAAA,SAAAkV,GACA,OAAAA,EACAq+B,WACApS,iBACAuS,kBAQAW,EAAAviD,UAAA0hD,uBAAA,SAAAtnB,GACA,IAAAwjB,EAAA,KAIA,OAHA/wC,EAAAnH,QAAAtF,KAAAoiD,OAAA,SAAA59C,EAAAwe,GACAw6B,KAAAx6B,EAAAs+B,uBAAAtnB,KAEAwjB,GAMA2E,EAAAviD,UAAAkjD,aAAA,SAAA9T,GAEA,GADAA,EAAAC,iBACAuS,eACA,OAAAxhD,KAAA+iD,kBAGA,IAAAjO,EAAA9F,EAAAkE,kBACA,OAAAzmC,EAAAqQ,QAAA9c,KAAAoiD,OAAAtN,IAOAqN,EAAAviD,UAAAojD,mBAAA,SAAAhU,GACA,aAAAhvC,KAAA8iD,aAAA9T,IAKAmT,EAAAviD,UAAA+iD,gBAAA,WACA,aAAA3iD,KAAA+iD,mBAKAZ,EAAAviD,UAAAmjD,gBAAA,WAOA,OANAt2C,EAAA4P,UAAArc,KAAAoiD,OAAA,SAAAp/B,GACA,OAAAA,EACAq+B,WACApS,iBACAuS,kBAEA,MAEAW,EAnNA,GA+OAc,GAAA,WACA,SAAAA,EAAAC,GACAljD,KAAAkjD,aAkLA,OA3KAD,EAAArjD,UAAAujD,SAAA,SAAAnpB,EAAAkG,GACA,GAAAlG,EAAArd,UACA,WAAAsmC,EAAA,IAAArN,GAAA1V,IAGA,IAAAkjB,EAAApjD,KAAAkjD,WAAAhN,yBAAAlc,GACA,SAAAopB,EAAA,CACA,IAAAC,EAAAD,EAAAppB,KACAl5B,EAAAsiD,EAAAtiD,MACAo4B,EAAAlB,EAAAkB,aAAAmqB,EAAArpB,GAEA,OADAl5B,IAAA6hC,YAAAzJ,EAAAgH,GACA,IAAA+iB,EAAAjjD,KAAAkjD,WAAAj1C,IAAAo1C,EAAAviD,IAGA,IAAA20C,EAAA,IAAAG,GAAA1V,GAEA,WAAA+iB,EADAjjD,KAAAkjD,WAAA7M,QAAArc,EAAAyb,KAUAwN,EAAArjD,UAAA0jD,UAAA,SAAAtpB,EAAAupB,GACA,IAAAC,EAAAxjD,KAIA,OAHAyM,EAAAnH,QAAAi+C,EAAA,SAAA5P,EAAAzT,GACAsjB,IAAAL,SAAAnpB,EAAAjB,MAAA4a,GAAAzT,KAEAsjB,GASAP,EAAArjD,UAAA6jD,YAAA,SAAAzpB,GACA,OAAAA,EAAArd,UACAsmC,EAAAvN,MAIA,IAAAuN,EADAjjD,KAAAkjD,WAAA7M,QAAArc,EAAA4b,GAAAF,SAWAuN,EAAArjD,UAAA8jD,iBAAA,SAAA1pB,GACA,aAAAh6B,KAAA2jD,gBAAA3pB,IASAipB,EAAArjD,UAAA+jD,gBAAA,SAAA3pB,GACA,IAAAopB,EAAApjD,KAAAkjD,WAAAhN,yBAAAlc,GACA,aAAAopB,EACApjD,KAAAkjD,WACAnjD,IAAAqjD,EAAAppB,MACAqI,SAAArK,EAAAkB,aAAAkqB,EAAAppB,SAGA,MAQAipB,EAAArjD,UAAAgkD,oBAAA,WACA,IAAApO,EAAA,GACAtV,EAAAlgC,KAAAkjD,WAAApiD,MAgBA,OAfA,MAAAo/B,EAEAA,EAAAwB,cACAxB,EAAA4C,aAAAmB,GAAA,SAAA7B,EAAAI,GACAgT,EAAA/wC,KAAA,IAAAw7B,GAAAmC,EAAAI,MAKAxiC,KAAAkjD,WAAA1N,SAAApQ,iBAAA,SAAAhD,EAAAkG,GACA,MAAAA,EAAAxnC,OACA00C,EAAA/wC,KAAA,IAAAw7B,GAAAmC,EAAAkG,EAAAxnC,UAIA00C,GAMAyN,EAAArjD,UAAAikD,mBAAA,SAAA7pB,GACA,GAAAA,EAAArd,UACA,OAAA3c,KAGA,IAAA8jD,EAAA9jD,KAAA2jD,gBAAA3pB,GACA,OACA,IAAAipB,EADA,MAAAa,EACA,IAAAlO,GAAAkO,GAGA9jD,KAAAkjD,WAAAzN,QAAAzb,KAQAipB,EAAArjD,UAAA+c,QAAA,WACA,OAAA3c,KAAAkjD,WAAAvmC,WAQAsmC,EAAArjD,UAAAmL,MAAA,SAAAm1B,GACA,OAAA+iB,EAAAc,mBAAA/rB,EAAA0d,MAAA11C,KAAAkjD,WAAAhjB,IAKA+iB,EAAAvN,MAAA,IAAAuN,EAAA,IAAArN,GAAA,OAQAqN,EAAAc,mBAAA,SAAA7qB,EAAA8qB,EAAA9jB,GACA,SAAA8jB,EAAAljD,MAEA,OAAAo/B,EAAAyC,YAAAzJ,EAAA8qB,EAAAljD,OAGA,IAAAmjD,EAAA,KAgBA,OAfAD,EAAAxO,SAAApQ,iBAAA,SAAAuO,EAAArL,GACA,cAAAqL,GAGAlnC,EAAA2F,OAAA,OAAAk2B,EAAAxnC,MAAA,6CACAmjD,EAAA3b,EAAAxnC,OAGAo/B,EAAA+iB,EAAAc,mBAAA7qB,EAAAH,MAAA4a,GAAArL,EAAApI,KAIAA,EAAAmC,SAAAnJ,GAAAvc,WAAA,OAAAsnC,IACA/jB,IAAAyC,YAAAzJ,EAAAH,MAAA,aAAAkrB,IAEA/jB,GAGA+iB,EApLA,GA8MAiB,GAAA,WACA,SAAAA,IAQAlkD,KAAAmkD,eAAAlB,GAAAvN,MASA11C,KAAAokD,WAAA,GACApkD,KAAAqkD,cAAA,EAudA,OA/cAH,EAAAtkD,UAAA0kD,YAAA,SAAAtqB,GACA,WAAAuqB,GAAAvqB,EAAAh6B,OAUAkkD,EAAAtkD,UAAA4kD,aAAA,SAAAxqB,EAAAkT,EAAAuX,EAAAC,GACAj4C,EAAA2F,OAAAqyC,EAAAzkD,KAAAqkD,aAAA,qDACAtjD,IAAA2jD,IACAA,GAAA,GAEA1kD,KAAAokD,WAAA3/C,KAAA,CACAu1B,OACAkT,OACAuX,UACAC,YAEAA,IACA1kD,KAAAmkD,eAAAnkD,KAAAmkD,eAAAhB,SAAAnpB,EAAAkT,IAEAltC,KAAAqkD,aAAAI,GASAP,EAAAtkD,UAAA+kD,SAAA,SAAA3qB,EAAA2kB,EAAA8F,GACAh4C,EAAA2F,OAAAqyC,EAAAzkD,KAAAqkD,aAAA,gDACArkD,KAAAokD,WAAA3/C,KAAA,CACAu1B,OACAwb,SAAAmJ,EACA8F,UACAC,SAAA,IAEA1kD,KAAAmkD,eAAAnkD,KAAAmkD,eAAAb,UAAAtpB,EAAA2kB,GACA3+C,KAAAqkD,aAAAI,GAMAP,EAAAtkD,UAAAglD,SAAA,SAAAH,GACA,QAAAn+C,EAAA,EAAuBA,EAAAtG,KAAAokD,WAAAz/C,OAA4B2B,IAAA,CACnD,IAAAD,EAAArG,KAAAokD,WAAA99C,GACA,GAAAD,EAAAo+C,YACA,OAAAp+C,EAGA,aAUA69C,EAAAtkD,UAAA6jD,YAAA,SAAAgB,GAKA,IAAAp2C,EAAArO,KACA4qC,EAAA5qC,KAAAokD,WAAA/6B,UAAA,SAAAkI,GACA,OAAAA,EAAAkzB,cAEAh4C,EAAA2F,OAAAw4B,GAAA,kDACA,IAAAia,EAAA7kD,KAAAokD,WAAAxZ,GACA5qC,KAAAokD,WAAAU,OAAAla,EAAA,GAIA,IAHA,IAAAma,EAAAF,EAAAH,QACAM,GAAA,EACA1+C,EAAAtG,KAAAokD,WAAAz/C,OAAA,EACAogD,GAAAz+C,GAAA,IACA,IAAA2+C,EAAAjlD,KAAAokD,WAAA99C,GACA2+C,EAAAP,UACAp+C,GAAAskC,GACA5qC,KAAAklD,oBAAAD,EAAAJ,EAAA7qB,MAEA+qB,GAAA,EAEAF,EAAA7qB,KAAAttB,SAAAu4C,EAAAjrB,QAEAgrB,GAAA,IAGA1+C,IAEA,GAAAy+C,EAGA,IAAAC,EAGA,OADAhlD,KAAAmlD,cACA,EAIA,GAAAN,EAAA3X,KACAltC,KAAAmkD,eAAAnkD,KAAAmkD,eAAAV,YAAAoB,EAAA7qB,UAEA,CACA,IAAAwb,EAAAqP,EAAArP,SACA/oC,EAAAnH,QAAAkwC,EAAA,SAAApT,GACA/zB,EAAA81C,eAAA91C,EAAA81C,eAAAV,YAAAoB,EAAA7qB,KAAAjB,MAAAqJ,MAGA,SAlBA,UA4BA8hB,EAAAtkD,UAAAwlD,qBAAA,SAAAprB,GACA,OAAAh6B,KAAAmkD,eAAAR,gBAAA3pB,IAYAkqB,EAAAtkD,UAAAi+C,uBAAA,SAAAwH,EAAA5F,EAAA6F,EAAAC,GACA,GAAAD,GAAAC,EAqBA,CACA,IAAA9I,EAAAz8C,KAAAmkD,eAAAN,mBAAAwB,GACA,IAAAE,GAAA9I,EAAA9/B,UACA,OAAA8iC,EAIA,GAAA8F,GACA,MAAA9F,GACAhD,EAAAiH,iBAAA1rB,EAAA0d,OAGA,CACA,IAMA8P,EAAAtB,EAAAuB,WAAAzlD,KAAAokD,WANA,SAAAsB,GACA,OAAAA,EAAAhB,SAAAa,MACAD,KACAA,EAAAnnC,QAAAunC,EAAAjB,YACAiB,EAAA1rB,KAAAttB,SAAA24C,MAAA34C,SAAAg5C,EAAA1rB,QAEAqrB,GACAM,EAAAlG,GAAAxV,GAAAlI,WACA,OAAAyjB,EAAAz6C,MAAA46C,GAXA,YA9BA,IAAA7B,EAAA9jD,KAAAmkD,eAAAR,gBAAA0B,GACA,SAAAvB,EACA,OAAAA,EAGA,IAAA8B,EAAA5lD,KAAAmkD,eAAAN,mBAAAwB,GACA,GAAAO,EAAAjpC,UACA,OAAA8iC,EAEA,SAAAA,GACAmG,EAAAlC,iBAAA1rB,EAAA0d,OAIA,CACA,IAAAiQ,EAAAlG,GAAAxV,GAAAlI,WACA,OAAA6jB,EAAA76C,MAAA46C,GAJA,aA0CAzB,EAAAtkD,UAAA+9C,0BAAA,SAAA0H,EAAAQ,GACA,IAAApI,EAAAxT,GAAAlI,WACA+jB,EAAA9lD,KAAAmkD,eAAAR,gBAAA0B,GACA,GAAAS,EAOA,OANAA,EAAApkB,cAEAokB,EAAAhjB,aAAAmB,GAAA,SAAA7B,EAAA0T,GACA2H,IAAAhb,qBAAAL,EAAA0T,KAGA2H,EAEA,GAAAoI,EAAA,CAGA,IAAAE,EAAA/lD,KAAAmkD,eAAAN,mBAAAwB,GAWA,OAVAQ,EAAA/iB,aAAAmB,GAAA,SAAA7B,EAAAI,GACA,IAAAtC,EAAA6lB,EACAlC,mBAAA,IAAA7rB,EAAAoK,IACAr3B,MAAAy3B,GACAib,IAAAhb,qBAAAL,EAAAlC,KAGA6lB,EAAAnC,sBAAAt+C,QAAA,SAAA0iC,GACAyV,IAAAhb,qBAAAuF,EAAAtnC,KAAAsnC,EAAA9H,QAEAud,EASA,OAJAz9C,KAAAmkD,eAAAN,mBAAAwB,GACAzB,sBAAAt+C,QAAA,SAAA0iC,GACAyV,IAAAhb,qBAAAuF,EAAAtnC,KAAAsnC,EAAA9H,QAEAud,GAuBAyG,EAAAtkD,UAAAo+C,mCAAA,SAAAqH,EAAAzX,EAAAoY,EAAAC,GACAx5C,EAAA2F,OAAA4zC,GAAAC,EAAA,6DACA,IAAAjsB,EAAAqrB,EAAAtsB,MAAA6U,GACA,GAAA5tC,KAAAmkD,eAAAT,iBAAA1pB,GAGA,YAIA,IAAAksB,EAAAlmD,KAAAmkD,eAAAN,mBAAA7pB,GACA,OAAAksB,EAAAvpC,UAEAspC,EAAA5jB,SAAAuL,GASAsY,EAAAn7C,MAAAk7C,EAAA5jB,SAAAuL,KAaAsW,EAAAtkD,UAAAw7C,kBAAA,SAAAiK,EAAA1R,EAAAsS,GACA,IAAAjsB,EAAAqrB,EAAAtsB,MAAA4a,GACAmQ,EAAA9jD,KAAAmkD,eAAAR,gBAAA3pB,GACA,aAAA8pB,EACAA,EAGAmC,EAAAhO,mBAAAtE,GACA3zC,KAAAmkD,eAAAN,mBAAA7pB,GACAjvB,MAAAk7C,EAAA/N,UAAA/V,kBAAAwR,IAGA,MAYAuQ,EAAAtkD,UAAA09C,eAAA,SAAAtjB,GACA,OAAAh6B,KAAAmkD,eAAAR,gBAAA3pB,IAcAkqB,EAAAtkD,UAAA27C,iBAAA,SAAA8J,EAAAhK,EAAAjQ,EAAA3gB,EAAA/lB,EAAAylB,GACA,IAAAg8B,EACA1J,EAAAz8C,KAAAmkD,eAAAN,mBAAAwB,GACAvB,EAAArH,EAAAkH,gBAAA3rB,EAAA0d,OACA,SAAAoO,EACAqC,EAAArC,MAEA,UAAAzI,EAKA,SAJA8K,EAAA1J,EAAA1xC,MAAAswC,GAOA,IADA8K,IAAAriB,UAAA3Z,IACAxN,WAAAwpC,EAAAzkB,aAgBA,SATA,IANA,IAAA4Z,EAAA,GACA1hB,EAAAzP,EAAAkW,aACAr8B,EAAAU,EACAyhD,EAAAlf,uBAAAmE,EAAAjhB,GACAg8B,EAAAnf,gBAAAoE,EAAAjhB,GACAlmB,EAAAD,EAAA4gC,UACA3gC,GAAAq3C,EAAA32C,OAAA8lB,GACA,IAAAmP,EAAA31B,EAAAmnC,IACAkQ,EAAA72C,KAAAR,GAEAA,EAAAD,EAAA4gC,UAEA,OAAA0W,GAYA4I,EAAAtkD,UAAAslD,oBAAA,SAAAkB,EAAApsB,GACA,OAAAosB,EAAAlZ,KACAkZ,EAAApsB,KAAAttB,SAAAstB,KAIAvtB,EAAAiL,QAAA0uC,EAAA5Q,SAAA,SAAAM,EAAA1T,GACA,OAAAgkB,EAAApsB,KAAAjB,MAAAqJ,GAAA11B,SAAAstB,MAQAkqB,EAAAtkD,UAAAulD,WAAA,WACAnlD,KAAAmkD,eAAAD,EAAAuB,WAAAzlD,KAAAokD,WAAAF,EAAAmC,eAAAruB,EAAA0d,OACA11C,KAAAokD,WAAAz/C,OAAA,EACA3E,KAAAqkD,aAAArkD,KAAAokD,WAAApkD,KAAAokD,WAAAz/C,OAAA,GAAA8/C,QAGAzkD,KAAAqkD,cAAA,GAUAH,EAAAmC,eAAA,SAAAX,GACA,OAAAA,EAAAhB,SAYAR,EAAAuB,WAAA,SAAAa,EAAAx4C,EAAAy4C,GAEA,IADA,IAAAC,EAAAvD,GAAAvN,MACApvC,EAAA,EAAuBA,EAAAggD,EAAA3hD,SAAmB2B,EAAA,CAC1C,IAAAo/C,EAAAY,EAAAhgD,GAIA,GAAAwH,EAAA43C,GAAA,CACA,IAAA7G,EAAA6G,EAAA1rB,KACAd,OAAA,EACA,GAAAwsB,EAAAxY,KACAqZ,EAAA75C,SAAAmyC,IACA3lB,EAAAlB,EAAAkB,aAAAqtB,EAAA1H,GACA2H,IAAArD,SAAAjqB,EAAAwsB,EAAAxY,OAEA2R,EAAAnyC,SAAA65C,KACArtB,EAAAlB,EAAAkB,aAAA2lB,EAAA0H,GACAC,IAAArD,SAAAnrB,EAAA0d,MAAAgQ,EAAAxY,KAAA7K,SAAAnJ,SAMA,KAAAwsB,EAAAlQ,SAwBA,MAAA/oC,EAAA8F,eAAA,8CAvBA,GAAAg0C,EAAA75C,SAAAmyC,GACA3lB,EAAAlB,EAAAkB,aAAAqtB,EAAA1H,GACA2H,IAAAlD,UAAApqB,EAAAwsB,EAAAlQ,eAEA,GAAAqJ,EAAAnyC,SAAA65C,GAEA,IADArtB,EAAAlB,EAAAkB,aAAA2lB,EAAA0H,IACA5pC,UACA6pC,IAAAlD,UAAAtrB,EAAA0d,MAAAgQ,EAAAlQ,cAEA,CACA,IAAAzc,EAAAtsB,EAAAqQ,QAAA4oC,EAAAlQ,SAAAtc,EAAAZ,YACA,GAAAS,EAAA,CAEA,IAAA0tB,EAAA1tB,EAAAsJ,SAAAnJ,EAAAV,YACAguB,IAAArD,SAAAnrB,EAAA0d,MAAA+Q,OAaA,OAAAD,GAEAtC,EA1eA,GAkfAK,GAAA,WAKA,SAAAA,EAAAvqB,EAAAgqB,GACAhkD,KAAA0mD,UAAA1sB,EACAh6B,KAAAkjD,WAAAc,EA4FA,OAhFAO,EAAA3kD,UAAAi+C,uBAAA,SAAA4B,EAAA6F,EAAAC,GACA,OAAAvlD,KAAAkjD,WAAArF,uBAAA79C,KAAA0mD,UAAAjH,EAAA6F,EAAAC,IASAhB,EAAA3kD,UAAA+9C,0BAAA,SAAAkI,GACA,OAAA7lD,KAAAkjD,WAAAvF,0BAAA39C,KAAA0mD,UAAAb,IAqBAtB,EAAA3kD,UAAAo+C,mCAAA,SAAAhkB,EAAAgsB,EAAAC,GACA,OAAAjmD,KAAAkjD,WAAAlF,mCAAAh+C,KAAA0mD,UAAA1sB,EAAAgsB,EAAAC,IAUA1B,EAAA3kD,UAAA09C,eAAA,SAAAtjB,GACA,OAAAh6B,KAAAkjD,WAAA5F,eAAAt9C,KAAA0mD,UAAA3tB,MAAAiB,KAaAuqB,EAAA3kD,UAAA27C,iBAAA,SAAAF,EAAAjQ,EAAA3gB,EAAA/lB,EAAAylB,GACA,OAAAnqB,KAAAkjD,WAAA3H,iBAAAv7C,KAAA0mD,UAAArL,EAAAjQ,EAAA3gB,EAAA/lB,EAAAylB,IAUAo6B,EAAA3kD,UAAAw7C,kBAAA,SAAAzH,EAAAgT,GACA,OAAA3mD,KAAAkjD,WAAA9H,kBAAAp7C,KAAA0mD,UAAA/S,EAAAgT,IAQApC,EAAA3kD,UAAAm5B,MAAA,SAAAqJ,GACA,WAAAmiB,EAAAvkD,KAAA0mD,UAAA3tB,MAAAqJ,GAAApiC,KAAAkjD,aAEAqB,EAnGA,GA4IAqC,GAAA,WAKA,SAAAA,EAAAC,GACA7mD,KAAA6mD,kBAMA7mD,KAAA8mD,eAAAlR,GAAAF,MAMA11C,KAAA+mD,kBAAA,IAAA7C,GACAlkD,KAAAgnD,eAAA,GACAhnD,KAAAinD,eAAA,GA0nBA,OA/mBAL,EAAAhnD,UAAAsnD,mBAAA,SAAAltB,EAAAmtB,EAAA1C,EAAAC,GAGA,OADA1kD,KAAA+mD,kBAAAvC,aAAAxqB,EAAAmtB,EAAA1C,EAAAC,GACAA,EAIA1kD,KAAAonD,4BAAA,IAAA7P,GAAA5C,GAAAK,KAAAhb,EAAAmtB,IAHA,IAcAP,EAAAhnD,UAAAynD,eAAA,SAAArtB,EAAA2kB,EAAA8F,GAEAzkD,KAAA+mD,kBAAApC,SAAA3qB,EAAA2kB,EAAA8F,GACA,IAAA6C,EAAA1R,GAAAC,WAAA8I,GACA,OAAA3+C,KAAAonD,4BAAA,IAAA3P,GAAA9C,GAAAK,KAAAhb,EAAAstB,KASAV,EAAAhnD,UAAAg9C,aAAA,SAAA6H,EAAApP,QACA,IAAAA,IAAgCA,GAAA,GAChC,IAAAqQ,EAAA1lD,KAAA+mD,kBAAAnC,SAAAH,GAEA,GADAzkD,KAAA+mD,kBAAAtD,YAAAgB,GAIA,CACA,IAAA8C,EAAA3R,GAAAF,MAUA,OATA,MAAAgQ,EAAAxY,KAEAqa,IAAAt5C,IAAA+pB,EAAA0d,OAAA,GAGAjpC,EAAAnH,QAAAogD,EAAAlQ,SAAA,SAAA9c,EAAAwH,GACAqnB,IAAAt5C,IAAA,IAAA+pB,EAAAU,GAAAwH,KAGAlgC,KAAAonD,4BAAA,IAAAjS,GAAAuQ,EAAA1rB,KAAAutB,EAAAlS,IAbA,UAuBAuR,EAAAhnD,UAAA4nD,qBAAA,SAAAxtB,EAAAmtB,GACA,OAAAnnD,KAAAonD,4BAAA,IAAA7P,GAAA5C,GAAAM,OAAAjb,EAAAmtB,KASAP,EAAAhnD,UAAA6nD,iBAAA,SAAAztB,EAAA2kB,GACA,IAAA2I,EAAA1R,GAAAC,WAAA8I,GACA,OAAA3+C,KAAAonD,4BAAA,IAAA3P,GAAA9C,GAAAM,OAAAjb,EAAAstB,KAQAV,EAAAhnD,UAAA8nD,oBAAA,SAAA1tB,GACA,OAAAh6B,KAAAonD,4BAAA,IAAA/P,GAAA1C,GAAAM,OAAAjb,KAUA4sB,EAAAhnD,UAAA+nD,0BAAA,SAAA3tB,EAAAkT,EAAAhgB,GACA,IAAA06B,EAAA5nD,KAAA6nD,gBAAA36B,GACA,SAAA06B,EAAA,CACA,IAAAlpC,EAAAkoC,EAAAkB,eAAAF,GACAG,EAAArpC,EAAAsb,KAAA8a,EAAAp2B,EAAAo2B,QACA5b,EAAAlB,EAAAkB,aAAA6uB,EAAA/tB,GACApH,EAAA,IAAA2kB,GAAA5C,GAAAO,qBAAAJ,GAAA5b,EAAAgU,GACA,OAAAltC,KAAAgoD,sBAAAD,EAAAn1B,GAIA,UAWAg0B,EAAAhnD,UAAAqoD,sBAAA,SAAAjuB,EAAA2kB,EAAAzxB,GACA,IAAA06B,EAAA5nD,KAAA6nD,gBAAA36B,GACA,GAAA06B,EAAA,CACA,IAAAlpC,EAAAkoC,EAAAkB,eAAAF,GACAG,EAAArpC,EAAAsb,KAAA8a,EAAAp2B,EAAAo2B,QACA5b,EAAAlB,EAAAkB,aAAA6uB,EAAA/tB,GACAstB,EAAA1R,GAAAC,WAAA8I,GACA/rB,EAAA,IAAA6kB,GAAA9C,GAAAO,qBAAAJ,GAAA5b,EAAAouB,GACA,OAAAtnD,KAAAgoD,sBAAAD,EAAAn1B,GAIA,UAUAg0B,EAAAhnD,UAAAsoD,0BAAA,SAAAluB,EAAA9M,GACA,IAAA06B,EAAA5nD,KAAA6nD,gBAAA36B,GACA,GAAA06B,EAAA,CACA,IAAAlpC,EAAAkoC,EAAAkB,eAAAF,GACAG,EAAArpC,EAAAsb,KAAA8a,EAAAp2B,EAAAo2B,QACA5b,EAAAlB,EAAAkB,aAAA6uB,EAAA/tB,GACApH,EAAA,IAAAykB,GAAA1C,GAAAO,qBAAAJ,GAAA5b,GACA,OAAAl5B,KAAAgoD,sBAAAD,EAAAn1B,GAIA,UAUAg0B,EAAAhnD,UAAA6hD,qBAAA,SAAAzS,EAAAd,GACA,IAAAlU,EAAAgV,EAAAhV,KACAwjB,EAAA,KACA2K,GAAA,EAGAnoD,KAAA8mD,eAAA/P,cAAA/c,EAAA,SAAAouB,EAAAC,GACA,IAAAnvB,EAAAlB,EAAAkB,aAAAkvB,EAAApuB,GACAwjB,KAAA6K,EAAA/G,uBAAApoB,GACAivB,EACAA,GAAAE,EAAA1F,oBAEA,IAUAJ,EAVA+F,EAAAtoD,KAAA8mD,eAAA/mD,IAAAi6B,IACAsuB,GAKAH,EACAA,GAAAG,EAAA3F,kBACAnF,KAAA8K,EAAAhH,uBAAAtpB,EAAA0d,SANA4S,EAAA,IAAAnG,GACAniD,KAAA8mD,eAAA9mD,KAAA8mD,eAAA74C,IAAA+rB,EAAAsuB,IAQA,MAAA9K,GACA+E,GAAA,GAGAA,GAAA,EACA/E,EAAAvT,GAAAlI,WACA/hC,KAAA8mD,eAAArR,QAAAzb,GACAod,aAAA,SAAAhV,EAAAmmB,GACA,IAAArM,EAAAqM,EAAAjH,uBAAAtpB,EAAA0d,OACAwG,IACAsB,IAAA/a,qBAAAL,EAAA8Z,OAIA,IAAAsM,EAAAF,EAAAtF,mBAAAhU,GACA,IAAAwZ,IAAAxZ,EAAAC,iBAAAuS,eAAA,CAEA,IAAAoG,EAAAhB,EAAA6B,cAAAzZ,GACAviC,EAAA2F,SAAAw1C,KAAA5nD,KAAAinD,gBAAA,0CACA,IAAA/5B,EAAA05B,EAAA8B,mBACA1oD,KAAAinD,eAAAW,GAAA16B,EAEAltB,KAAAgnD,eAAA,IAAA95B,GAAA06B,EAEA,IAAA3L,EAAAj8C,KAAA+mD,kBAAAzC,YAAAtqB,GACAimB,EAAAqI,EAAA7G,qBAAAzS,EAAAd,EAAA+N,EAAAuB,EAAA+E,GACA,IAAAiG,IAAAL,EAAA,CACA,IAAAnlC,EAAAslC,EAAAxF,aAAA9T,GACAiR,IAAAh2C,OAAAjK,KAAA2oD,eAAA3Z,EAAAhsB,IAEA,OAAAi9B,GAaA2G,EAAAhnD,UAAA8hD,wBAAA,SAAA1S,EAAAd,EAAAyT,GACA,IAAAtzC,EAAArO,KAEAg6B,EAAAgV,EAAAhV,KACA4uB,EAAA5oD,KAAA8mD,eAAA/mD,IAAAi6B,GACA4nB,EAAA,GAIA,GAAAgH,IACA,YAAA5Z,EAAAkE,mBACA0V,EAAA5F,mBAAAhU,IAAA,CAIA,IAAA6Z,EAAAD,EAAAlH,wBAAA1S,EAAAd,EAAAyT,GACAiH,EAAAjsC,YACA3c,KAAA8mD,eAAA9mD,KAAA8mD,eAAA9yB,OAAAgG,IAEA,IAAAyoB,EAAAoG,EAAApG,QACAb,EAAAiH,EAAA5I,OAOA,IAAA6I,GAAA,IACArG,EAAAp5B,UAAA,SAAA2lB,GACA,OAAAA,EAAAC,iBAAAuS,iBAEAuH,EAAA/oD,KAAA8mD,eAAAnQ,WAAA3c,EAAA,SAAAd,EAAA8vB,GACA,OAAAA,EAAArG,oBAEA,GAAAmG,IAAAC,EAAA,CACA,IAAAtT,EAAAz1C,KAAA8mD,eAAArR,QAAAzb,GAGA,IAAAyb,EAAA94B,UAIA,IAFA,IAAAssC,EAAAjpD,KAAAkpD,gCAAAzT,GAEAnvC,EAAA,EAAmCA,EAAA2iD,EAAAtkD,SAAqB2B,EAAA,CACxD,IAAA0c,EAAAimC,EAAA3iD,GAAA6iD,EAAAnmC,EAAAq+B,WACAtzC,EAAA/N,KAAAopD,uBAAApmC,GACAhjB,KAAA6mD,gBAAAwC,eAAAzC,EAAA0C,mBAAAH,GAAAnpD,KAAAupD,aAAAJ,GAAAp7C,EAAAy7C,OAAAz7C,EAAAmxB,aAUA,IAAA6pB,GAAAtG,EAAA99C,OAAA,IAAAg9C,EAGA,GAAAmH,EAAA,CAGA9oD,KAAA6mD,gBAAA4C,cAAA7C,EAAA0C,mBAAAta,GADA,WAIAyT,EAAAn9C,QAAA,SAAAokD,GACA,IAAAC,EAAAt7C,EAAA44C,eAAAL,EAAA6B,cAAAiB,IACAr7C,EAAAw4C,gBAAA4C,cAAA7C,EAAA0C,mBAAAI,GAAAC,KAKA3pD,KAAA4pD,YAAAnH,GAKA,OAAAb,GAWAgF,EAAAhnD,UAAAi+C,uBAAA,SAAA7jB,EAAAsrB,GACA,IACAtB,EAAAhkD,KAAA+mD,kBACAvJ,EAAAx9C,KAAA8mD,eAAAnQ,WAAA3c,EAAA,SAAAyc,EAAA6R,GACA,IAAApvB,EAAAlB,EAAAkB,aAAAud,EAAAzc,GACAwjB,EAAA8K,EAAAhH,uBAAApoB,GACA,GAAAskB,EACA,OAAAA,IAGA,OAAAwG,EAAAnG,uBAAA7jB,EAAAwjB,EAAA8H,GATA,IAmBAsB,EAAAhnD,UAAAspD,gCAAA,SAAAzT,GACA,OAAAA,EAAAc,KAAA,SAAArd,EAAA2wB,EAAAC,GACA,GAAAD,KAAAlH,kBAEA,OADAkH,EAAA9G,mBAKA,IAAAgH,EAAA,GAOA,OANAF,IACAE,EAAAF,EAAAhH,iBAEAp2C,EAAAnH,QAAAwkD,EAAA,SAAAtlD,EAAAwlD,GACAD,IAAA9/C,OAAA+/C,KAEAD,KAQAnD,EAAAhnD,UAAAgqD,YAAA,SAAAK,GACA,QAAA3wC,EAAA,EAAuBA,EAAA2wC,EAAAtlD,SAAoB2U,EAAA,CAC3C,IAAA4wC,EAAAD,EAAA3wC,GACA,IAAA4wC,EAAAjb,iBAAAuS,eAAA,CAEA,IAAA2I,EAAAvD,EAAA6B,cAAAyB,GACAE,EAAApqD,KAAAinD,eAAAkD,UACAnqD,KAAAinD,eAAAkD,UACAnqD,KAAAgnD,eAAA,IAAAoD,MAUAxD,EAAA0C,mBAAA,SAAAta,GACA,OAAAA,EAAAC,iBAAAuS,iBACAxS,EAAAC,iBAAAob,YAIqCrb,EAAAhB,SAGrCgB,GAWA4X,EAAAhnD,UAAA+oD,eAAA,SAAA3Z,EAAAhsB,GACA,IAAAgX,EAAAgV,EAAAhV,KACA9M,EAAAltB,KAAAupD,aAAAva,GACAjhC,EAAA/N,KAAAopD,uBAAApmC,GACAi9B,EAAAjgD,KAAA6mD,gBAAAwC,eAAAzC,EAAA0C,mBAAAta,GAAA9hB,EAAAnf,EAAAy7C,OAAAz7C,EAAAmxB,YACAuW,EAAAz1C,KAAA8mD,eAAArR,QAAAzb,GAGA,GAAA9M,EACAzgB,EAAA2F,QAAAqjC,EAAA30C,MAAA6hD,kBAAA,0DAsBA,IAlBA,IAAA2H,EAAA7U,EAAAc,KAAA,SAAArd,EAAA2wB,EAAAC,GACA,IAAA5wB,EAAAvc,WACAktC,GACAA,EAAAlH,kBACA,OAAAkH,EAAA9G,kBAAA1B,YAIA,IAAAkJ,EAAA,GAOA,OANAV,IACAU,IAAAtgD,OAAA4/C,EAAAhH,gBAAAl0C,IAAA,SAAAqU,GAA8G,OAAAA,EAAAq+B,eAE9G50C,EAAAnH,QAAAwkD,EAAA,SAAAtlD,EAAAgmD,GACAD,IAAAtgD,OAAAugD,KAEAD,IAGAjkD,EAAA,EAA2BA,EAAAgkD,EAAA3lD,SAA0B2B,EAAA,CACrD,IAAAmkD,EAAAH,EAAAhkD,GACAtG,KAAA6mD,gBAAA4C,cAAA7C,EAAA0C,mBAAAmB,GAAAzqD,KAAAupD,aAAAkB,IAGA,OAAAxK,GAQA2G,EAAAhnD,UAAAwpD,uBAAA,SAAApmC,GACA,IAAA3U,EAAArO,KACAgvC,EAAAhsB,EAAAq+B,WACAn0B,EAAAltB,KAAAupD,aAAAva,GACA,OACAwa,OAAA,WAEA,OADAxmC,EAAA61B,kBAAA5O,GAAAlI,YACAqB,QAEAlE,WAAA,SAAAze,GACA,UAAAA,EACA,OAAAyM,EACA7e,EAAA65C,0BAAAlZ,EAAAhV,KAAA9M,GAGA7e,EAAAq5C,oBAAA1Y,EAAAhV,MAMA,IAAA0wB,EAh1QA,SAAAr7C,EAAA2/B,GACA,IAAAtpB,EAAA,gBACA,YAAArW,EACAqW,EACA,0FAGA,qBAAArW,EACAqW,EAAA,6DAEA,eAAArW,IACAqW,EAAA,8BAEA,IAAA9c,EAAA,IAAA/B,MAAAwI,EAAA,OAAA2/B,EAAAhV,KAAA31B,WAAA,KAAAqhB,GAEA,OADA9c,EAAAyG,OAAA8U,cACAvb,EAi0QA+hD,CAAAlqC,EAAAuuB,GACA,OAAA3gC,EAAAqzC,wBAAA1S,EACA,KAAA0b,MAWA9D,EAAA6B,cAAA,SAAAzZ,GACA,OAAAA,EAAAhV,KAAA31B,WAAA,IAAA2qC,EAAAkE,mBAQA0T,EAAAkB,eAAA,SAAAF,GACA,IAAAgD,EAAAhD,EAAAzpC,QAAA,KAEA,OADA1R,EAAA2F,QAAA,IAAAw4C,KAAAhD,EAAAjjD,OAAA,mBACA,CACAmwC,QAAA8S,EAAApwB,OAAAozB,EAAA,GACA5wB,KAAA,IAAAhC,EAAA4vB,EAAApwB,OAAA,EAAAozB,MASAhE,EAAAhnD,UAAAioD,gBAAA,SAAA36B,GACA,OAAAltB,KAAAgnD,eAAA,IAAA95B,IAQA05B,EAAAhnD,UAAA2pD,aAAA,SAAAva,GACA,IAAA4Y,EAAAhB,EAAA6B,cAAAzZ,GACA,OAAAviC,EAAAqQ,QAAA9c,KAAAinD,eAAAW,IAOAhB,EAAA8B,iBAAA,WACA,OAAA9B,EAAAiE,iBAUAjE,EAAAhnD,UAAAooD,sBAAA,SAAAD,EAAA/L,GACA,IAAAsM,EAAAtoD,KAAA8mD,eAAA/mD,IAAAgoD,GACAt7C,EAAA2F,OAAAk2C,EAAA,wDACA,IAAArM,EAAAj8C,KAAA+mD,kBAAAzC,YAAAyD,GACA,OAAAO,EAAAxM,eAAAE,EAAAC,EACA,OAmBA2K,EAAAhnD,UAAAwnD,4BAAA,SAAApL,GACA,OAAAh8C,KAAA8qD,sBAAA9O,EAAAh8C,KAAA8mD,eACA,KAAA9mD,KAAA+mD,kBAAAzC,YAAAtsB,EAAA0d,SAYAkR,EAAAhnD,UAAAkrD,sBAAA,SAAA9O,EAAA+O,EAAAvN,EAAAvB,GACA,GAAAD,EAAAhiB,KAAArd,UACA,OAAA3c,KAAAgrD,iCAAAhP,EAAA+O,EAAAvN,EAAAvB,GAGA,IAAAqM,EAAAyC,EAAAhrD,IAAAi4B,EAAA0d,OAEA,MAAA8H,GAAA,MAAA8K,IACA9K,EAAA8K,EAAAhH,uBAAAtpB,EAAA0d,QAEA,IAAAuK,EAAA,GACA7d,EAAA4Z,EAAAhiB,KAAA1B,WACA2yB,EAAAjP,EAAAzG,kBAAAnT,GACAkG,EAAAyiB,EAAAvV,SAAAz1C,IAAAqiC,GACA,GAAAkG,GAAA2iB,EAAA,CACA,IAAAC,EAAA1N,EACAA,EAAArb,kBAAAC,GACA,KACA+oB,EAAAlP,EAAAljB,MAAAqJ,GACA6d,IAAAh2C,OAAAjK,KAAA8qD,sBAAAG,EAAA3iB,EAAA4iB,EAAAC,IAKA,OAHA7C,IACArI,IAAAh2C,OAAAq+C,EAAAxM,eAAAE,EAAAC,EAAAuB,KAEAyC,GAaA2G,EAAAhnD,UAAAorD,iCAAA,SAAAhP,EAAA+O,EAAAvN,EAAAvB,GACA,IAAA5tC,EAAArO,KACAsoD,EAAAyC,EAAAhrD,IAAAi4B,EAAA0d,OAEA,MAAA8H,GAAA,MAAA8K,IACA9K,EAAA8K,EAAAhH,uBAAAtpB,EAAA0d,QAEA,IAAAuK,EAAA,GAcA,OAbA8K,EAAAvV,SAAApQ,iBAAA,SAAAhD,EAAAkG,GACA,IAAA4iB,EAAA1N,EACAA,EAAArb,kBAAAC,GACA,KACA+oB,EAAAlP,EAAAljB,MAAAqJ,GACA6oB,EAAAjP,EAAAzG,kBAAAnT,GACA6oB,IACAhL,IAAAh2C,OAAAoE,EAAA28C,iCAAAC,EAAA3iB,EAAA4iB,EAAAC,OAGA7C,IACArI,IAAAh2C,OAAAq+C,EAAAxM,eAAAE,EAAAC,EAAAuB,KAEAyC,GAOA2G,EAAAiE,cAAA,EACAjE,EA9oBA,GAsqBAwE,GAAA,WACA,SAAAA,IACAprD,KAAAqrD,UAAAphB,GAAAlI,WAQA,OANAqpB,EAAAxrD,UAAAs4C,QAAA,SAAAle,GACA,OAAAh6B,KAAAqrD,UAAAhpB,SAAArI,IAEAoxB,EAAAxrD,UAAA0rD,eAAA,SAAAtxB,EAAAuxB,GACAvrD,KAAAqrD,UAAArrD,KAAAqrD,UAAA1oB,YAAA3I,EAAAuxB,IAEAH,EAVA,GAgCAI,GAAA,WAIA,SAAAA,EAAAC,GACAzrD,KAAAyrD,OAsDA,OAhDAD,EAAA5rD,UAAA8N,SAAA,SAAAg+C,GACA,OAAA1rD,KAAAyrD,KAAA,kBAAAC,GAAAxnD,KAAA,KAEA,SAAAwmD,GAGA,OAAAA,GAAA,+BAAAA,EAAAr7C,MACAG,EAAA,kEACA,MAGAjH,QAAAE,OAAAiiD,MAIAc,EAAA5rD,UAAA+rD,uBAAA,SAAA59C,GAGA/N,KAAAyrD,KAAA,8BAAA19C,IAEAy9C,EAAA5rD,UAAAgsD,0BAAA,SAAA79C,GACA/N,KAAAyrD,KAAA,iCAAA19C,IAEAy9C,EAAA5rD,UAAAisD,sBAAA,WACA,IAAAC,EAAA,0DACA9rD,KAAAyrD,KAAA/qD,KACA,iFAEA,eAAAV,KAAAyrD,KAAA3+C,QACAg/C,GACA,uJAIA,mBAAA9rD,KAAAyrD,KAAA3+C,QACAg/C,GACA,2JAKAA,GACA,kKAIA/lC,EAAA+lC,IAEAN,EA3DA,GAmFAO,GAAA,WACA,SAAAA,IACA/rD,KAAAgsD,UAAA,GAWA,OATAD,EAAAnsD,UAAAqsD,iBAAA,SAAAvrD,EAAAwrD,QACA,IAAAA,IAAgCA,EAAA,GAChCz/C,EAAAC,SAAA1M,KAAAgsD,UAAAtrD,KACAV,KAAAgsD,UAAAtrD,GAAA,GACAV,KAAAgsD,UAAAtrD,IAAAwrD,GAEAH,EAAAnsD,UAAAG,IAAA,WACA,OAAA0M,EAAAc,SAAAvN,KAAAgsD,YAEAD,EAbA,GAgCAI,GAAA,WACA,SAAAA,KAkBA,OAhBAA,EAAAC,cAAA,SAAA5vB,GACA,IAAA6vB,EAAA7vB,EAAAn4B,WAIA,OAHArE,KAAAssD,aAAAD,KACArsD,KAAAssD,aAAAD,GAAA,IAAAN,IAEA/rD,KAAAssD,aAAAD,IAEAF,EAAAI,oBAAA,SAAA/vB,EAAAgwB,GACA,IAAAH,EAAA7vB,EAAAn4B,WAIA,OAHArE,KAAAysD,WAAAJ,KACArsD,KAAAysD,WAAAJ,GAAAG,KAEAxsD,KAAAysD,WAAAJ,IAEAF,EAAAG,aAAA,GACAH,EAAAM,WAAA,GACAN,EAnBA,GA4CAO,GAAA,WACA,SAAAA,EAAAC,GACA3sD,KAAA2sD,cACA3sD,KAAA4sD,MAAA,KAaA,OAXAF,EAAA9sD,UAAAG,IAAA,WACA,IAAA8sD,EAAA7sD,KAAA2sD,YAAA5sD,MACA+sD,EAAArgD,EAAA0P,MAAA0wC,GAOA,OANA7sD,KAAA4sD,OACAngD,EAAAnH,QAAAtF,KAAA4sD,MAAA,SAAAG,EAAAjsD,GACAgsD,EAAAC,GAAAD,EAAAC,GAAAjsD,IAGAd,KAAA4sD,MAAAC,EACAC,GAEAJ,EAhBA,GAsCAM,GAAA,IACAC,GAAA,IAMAC,GAAA,WAKA,SAAAA,EAAAC,EAAAC,GACAptD,KAAAotD,UACAptD,KAAAqtD,eAAA,GACArtD,KAAAstD,eAAA,IAAAZ,GAAAS,GACA,IAAAhjD,EAAA6iD,IACAC,GAAAD,IAAA/wC,KAAAgN,SACA6O,EAAA93B,KAAAutD,aAAAr+C,KAAAlP,MAAAic,KAAAC,MAAA/R,IAsBA,OApBA+iD,EAAAttD,UAAA4tD,YAAA,SAAAT,GACA/sD,KAAAqtD,eAAAN,IAAA,GAEAG,EAAAttD,UAAA2tD,aAAA,WACA,IAAAl/C,EAAArO,KACAytD,EAAAztD,KAAAstD,eAAAvtD,MACA2tD,EAAA,GACAC,GAAA,EACAlhD,EAAAnH,QAAAmoD,EAAA,SAAAV,EAAAjsD,GACAA,EAAA,GAAA2L,EAAAC,SAAA2B,EAAAg/C,eAAAN,KACAW,EAAAX,GAAAjsD,EACA6sD,GAAA,KAGAA,GACA3tD,KAAAotD,QAAAQ,YAAAF,GAGA51B,EAAA93B,KAAAutD,aAAAr+C,KAAAlP,MAAAic,KAAAC,MAAA,EAAAD,KAAAgN,SAnCA,OAqCAikC,EAjCA,GAkEAW,GAAA,WACA,SAAAA,IAKA7tD,KAAA8tD,YAAA,GAMA9tD,KAAA+tD,gBAAA,EA+EA,OA1EAF,EAAAjuD,UAAAouD,YAAA,SAAAC,GAGA,IADA,IAAAC,EAAA,KACA5nD,EAAA,EAAuBA,EAAA2nD,EAAAtpD,OAA0B2B,IAAA,CACjD,IAAA8oC,EAAA6e,EAAA3nD,GACA6nD,EAAA/e,EAAAhB,UACA,OAAA8f,GAAAC,EAAAt0B,OAAAq0B,EAAA9f,aACApuC,KAAA8tD,YAAArpD,KAAAypD,GACAA,EAAA,MAEA,OAAAA,IACAA,EAAA,IAAAE,GAAAD,IAEAD,EAAA1a,IAAApE,GAEA8e,GACAluD,KAAA8tD,YAAArpD,KAAAypD,IAYAL,EAAAjuD,UAAAyuD,kBAAA,SAAAr0B,EAAAi0B,GACAjuD,KAAAguD,YAAAC,GACAjuD,KAAAsuD,oCAAA,SAAAH,GACA,OAAAA,EAAAt0B,OAAAG,MAYA6zB,EAAAjuD,UAAA2uD,0BAAA,SAAAC,EAAAP,GACAjuD,KAAAguD,YAAAC,GACAjuD,KAAAsuD,oCAAA,SAAAH,GACA,OAAAA,EAAAzhD,SAAA8hD,MAAA9hD,SAAAyhD,MAOAN,EAAAjuD,UAAA0uD,oCAAA,SAAAtY,GACAh2C,KAAA+tD,kBAEA,IADA,IAAAU,GAAA,EACAnoD,EAAA,EAAuBA,EAAAtG,KAAA8tD,YAAAnpD,OAA6B2B,IAAA,CACpD,IAAAooD,EAAA1uD,KAAA8tD,YAAAxnD,GACA,GAAAooD,EAEA1Y,EADA0Y,EAAAtgB,YAEApuC,KAAA8tD,YAAAxnD,GAAAqoD,QACA3uD,KAAA8tD,YAAAxnD,GAAA,MAGAmoD,GAAA,EAIAA,IACAzuD,KAAA8tD,YAAA,IAEA9tD,KAAA+tD,mBAEAF,EA3FA,GAiGAO,GAAA,WACA,SAAAA,EAAArwB,GACA/9B,KAAA+9B,QAKA/9B,KAAA4uD,QAAA,GA8BA,OAzBAR,EAAAxuD,UAAA4zC,IAAA,SAAApE,GACApvC,KAAA4uD,QAAAnqD,KAAA2qC,IAKAgf,EAAAxuD,UAAA+uD,MAAA,WACA,QAAAroD,EAAA,EAAuBA,EAAAtG,KAAA4uD,QAAAjqD,OAAyB2B,IAAA,CAChD,IAAA8oC,EAAApvC,KAAA4uD,QAAAtoD,GACA,UAAA8oC,EAAA,CACApvC,KAAA4uD,QAAAtoD,GAAA,KACA,IAAAuoD,EAAAzf,EAAAb,iBACAvZ,GACAxlB,EAAA,UAAA4/B,EAAA/qC,YAEAuzB,EAAAi3B,MAOAT,EAAAxuD,UAAAwuC,QAAA,WACA,OAAApuC,KAAA+9B,OAEAqwB,EArCA,GA4DAU,GAAA,WAIA,SAAAA,EAAAC,GACA/uD,KAAA+uD,iBACA/uD,KAAAgvD,WAAA,GACAviD,EAAA2F,OAAAvH,MAAA8I,QAAAo7C,MAAApqD,OAAA,gCA6CA,OAtCAmqD,EAAAlvD,UAAAqvD,QAAA,SAAAxwB,GAEA,IADA,IAAA1J,EAAA,GACAzjB,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/CyjB,EAAAzjB,EAAA,GAAAxG,UAAAwG,GAEA,GAAAzG,MAAA8I,QAAA3T,KAAAgvD,WAAAvwB,IAGA,IADA,IAAA1yB,EAAA/L,KAAAgvD,WAAAvwB,GAAAh5B,QACAa,EAAA,EAA2BA,EAAAyF,EAAApH,OAAsB2B,IACjDyF,EAAAzF,GAAAsH,SAAA7C,MAAAgB,EAAAzF,GAAAL,QAAA8uB,IAIA+5B,EAAAlvD,UAAA0L,GAAA,SAAAmzB,EAAA7wB,EAAA3H,GACAjG,KAAAkvD,mBAAAzwB,GACAz+B,KAAAgvD,WAAAvwB,GAAAz+B,KAAAgvD,WAAAvwB,IAAA,GACAz+B,KAAAgvD,WAAAvwB,GAAAh6B,KAAA,CAAyCmJ,WAAA3H,YACzC,IAAAmpC,EAAApvC,KAAAmvD,gBAAA1wB,GACA2Q,GACAxhC,EAAA7C,MAAA9E,EAAAmpC,IAGA0f,EAAAlvD,UAAA6L,IAAA,SAAAgzB,EAAA7wB,EAAA3H,GACAjG,KAAAkvD,mBAAAzwB,GAEA,IADA,IAAA1yB,EAAA/L,KAAAgvD,WAAAvwB,IAAA,GACAn4B,EAAA,EAAuBA,EAAAyF,EAAApH,OAAsB2B,IAC7C,GAAAyF,EAAAzF,GAAAsH,gBACA3H,OAAA8F,EAAAzF,GAAAL,SAEA,YADA8F,EAAA+4C,OAAAx+C,EAAA,IAKAwoD,EAAAlvD,UAAAsvD,mBAAA,SAAAzwB,GACAhyB,EAAA2F,OAAApS,KAAA+uD,eAAA3lC,KAAA,SAAAgmC,GACA,OAAAA,IAAA3wB,IACS,kBAAAA,IAETqwB,EApDA,GA0EAO,GAAA,SAAAx3C,GAEA,SAAAw3C,IACA,IACAC,EACAC,EAFAlhD,EAAAwJ,EAAArV,KAAAxC,KAAA,cAAAA,KAqCA,MAlCA,oBAAA8nB,eACA,IAAAA,SAAAoB,wBACA,IAAApB,SAAA,QAEAynC,EAAA,mBACAD,EAAA,eAEA,IAAAxnC,SAAA,WACAynC,EAAA,sBACAD,EAAA,kBAEA,IAAAxnC,SAAA,UACAynC,EAAA,qBACAD,EAAA,iBAEA,IAAAxnC,SAAA,eACAynC,EAAA,yBACAD,EAAA,iBAOAjhD,EAAAmhD,UAAA,EACAD,GACAznC,SAAAoB,iBAAAqmC,EAAA,WACA,IAAA7K,GAAA58B,SAAAwnC,GACA5K,IAAAr2C,EAAAmhD,WACAnhD,EAAAmhD,SAAA9K,EACAr2C,EAAA4gD,QAAA,UAAAvK,MAEa,GAEbr2C,EAaA,OApDA2D,EAAAqG,UAAAg3C,EAAAx3C,GAyCAw3C,EAAAI,YAAA,WACA,WAAAJ,GAMAA,EAAAzvD,UAAAuvD,gBAAA,SAAA1wB,GAEA,OADAhyB,EAAA2F,OAAA,YAAAqsB,EAAA,uBAAAA,GACA,CAAAz+B,KAAAwvD,WAEAH,EArDA,CAsDCP,IA2BDY,GAAA,SAAA73C,GAEA,SAAA63C,IACA,IAAArhD,EAAAwJ,EAAArV,KAAAxC,KAAA,aAAAA,KAsBA,OArBAqO,EAAAshD,SAAA,EAKA,oBAAAx0C,aACA,IAAAA,OAAA+N,kBACAzc,EAAAyO,oBACAC,OAAA+N,iBAAA,oBACA7a,EAAAshD,UACAthD,EAAAshD,SAAA,EACAthD,EAAA4gD,QAAA,gBAEa,GACb9zC,OAAA+N,iBAAA,qBACA7a,EAAAshD,UACAthD,EAAAshD,SAAA,EACAthD,EAAA4gD,QAAA,gBAEa,IAEb5gD,EAmBA,OA3CA2D,EAAAqG,UAAAq3C,EAAA73C,GA0BA63C,EAAAD,YAAA,WACA,WAAAC,GAMAA,EAAA9vD,UAAAuvD,gBAAA,SAAA1wB,GAEA,OADAhyB,EAAA2F,OAAA,WAAAqsB,EAAA,uBAAAA,GACA,CAAAz+B,KAAA2vD,UAKAD,EAAA9vD,UAAAgwD,gBAAA,WACA,OAAA5vD,KAAA2vD,SAEAD,EA5CA,CA6CCZ,IAuBDe,GAAA,WAIA,SAAAA,EAAAC,GACA9vD,KAAA8vD,aACA9vD,KAAA+vD,iBAAA,GACA/vD,KAAAgwD,mBAAA,EACAhwD,KAAAiwD,oBAAA,EACAjwD,KAAAkwD,QAAA,KAiDA,OA/CAL,EAAAjwD,UAAAuwD,WAAA,SAAAC,EAAAxiD,GACA5N,KAAAiwD,mBAAAG,EACApwD,KAAAkwD,QAAAtiD,EACA5N,KAAAiwD,mBAAAjwD,KAAAgwD,qBACAhwD,KAAAkwD,UACAlwD,KAAAkwD,QAAA,OAUAL,EAAAjwD,UAAAywD,eAAA,SAAAC,EAAA75C,GACA,IAAApI,EAAArO,KACAA,KAAA+vD,iBAAAO,GAAA75C,EAwBA,IAvBA,IAAA85C,EAAA,WACA,IAAAC,EAAAC,EAAAV,iBAAAU,EAAAT,2BACAS,EAAAV,iBAAAU,EAAAT,oBAQA,IAPA,IAAAU,EAAA,SAAApqD,GACAkqD,EAAAlqD,IACAsxB,EAAA,WACAvpB,EAAAyhD,WAAAU,EAAAlqD,OAIAA,EAAA,EAA2BA,EAAAkqD,EAAA7rD,SAAsB2B,EACjDoqD,EAAApqD,GAEA,GAAAmqD,EAAAT,qBAAAS,EAAAR,mBAKA,OAJAQ,EAAAP,UACAO,EAAAP,UACAO,EAAAP,QAAA,MAEA,QAEAO,EAAAT,sBAEAS,EAAAzwD,KACAA,KAAA+vD,iBAAA/vD,KAAAgwD,qBAAA,CAEA,aADAO,IAEA,QAGAV,EA1DA,GAgFAc,GAAA,aACAC,GAAA,UAoCAC,GAAA,WASA,SAAAA,EAAAC,EAAAt0B,EAAAu0B,EAAAC,GACAhxD,KAAA8wD,SACA9wD,KAAAw8B,WACAx8B,KAAA+wD,qBACA/wD,KAAAgxD,gBACAhxD,KAAAixD,UAAA,EACAjxD,KAAAkxD,cAAA,EACAlxD,KAAAmxD,gBAAA,EACAnxD,KAAAoxD,KAAA57B,EAAAs7B,GACA9wD,KAAAqxD,OAAAlF,GAAAC,cAAA5vB,GACAx8B,KAAAsxD,MAAA,SAAAr0C,GACA,OAAAuf,EAAAhB,cAAAd,EAAAzd,IAsOA,OA9NA4zC,EAAAjxD,UAAAoiB,KAAA,SAAAuvC,EAAAC,GACA,IAAAnjD,EAAArO,KACAA,KAAAyxD,cAAA,EACAzxD,KAAA0xD,cAAAF,EACAxxD,KAAA2xD,gBAAA,IAAA9B,GAAA0B,GACAvxD,KAAA4xD,WAAA,EACA5xD,KAAA6xD,qBAAAnoD,WAAA,WACA2E,EAAA+iD,KAAA,gCAEA/iD,EAAAyjD,YACAzjD,EAAAwjD,qBAAA,MACS51C,KAAAC,MA9CT,MA5iTA,SAAAhU,GACA,GAAAuE,EAAA4O,aAAA,aAAAyM,SAAAiqC,WACA7pD,QAEA,CAGA,IAAA8pD,GAAA,EACAC,EAAA,WACAnqC,SAAAzH,KAIA2xC,IACAA,GAAA,EACA9pD,KALAwB,WAAAuoD,EAAAh2C,KAAAC,MAAA,MAQA4L,SAAAoB,kBACApB,SAAAoB,iBAAA,mBAAA+oC,GAAA,GAEA92C,OAAA+N,iBAAA,OAAA+oC,GAAA,IAEAnqC,SAAAqB,cAEArB,SAAAqB,YAAA,gCACA,aAAArB,SAAAiqC,YACAE,MAGA92C,OAAAgO,YAAA,SAAA8oC,KA8jTAC,CAAA,WACA,IAAA7jD,EAAAujD,UAAA,CAGAvjD,EAAA8jD,gBAAA,IAAAC,GAAA,WAEA,IADA,IAAAxnD,EAAA,GACA0G,EAAA,EAAgCA,EAAAxG,UAAAnG,OAAuB2M,IACvD1G,EAAA0G,GAAAxG,UAAAwG,GAEA,IAAA+gD,EAAAznD,EAAA,GAAA0nD,EAAA1nD,EAAA,GAAA2nD,EAAA3nD,EAAA,GAEA,GADAyD,EAAAmkD,wBAAA5nD,GACAyD,EAAA8jD,gBAOA,GALA9jD,EAAAwjD,uBACAloD,aAAA0E,EAAAwjD,sBACAxjD,EAAAwjD,qBAAA,MAEAxjD,EAAA8iD,gBAAA,EAjGA,SAkGAkB,EACAhkD,EAAA8X,GAAAmsC,EACAjkD,EAAAokD,SAAAF,MAEA,IArGA,UAqGAF,EAiBA,UAAAxrD,MAAA,kCAAAwrD,GAfAC,GAGAjkD,EAAA8jD,gBAAAO,cAAA,EAGArkD,EAAAsjD,gBAAAxB,WAAAmC,EAAA,WACAjkD,EAAAyjD,eAIAzjD,EAAAyjD,cAMa,WAEb,IADA,IAAAlnD,EAAA,GACA0G,EAAA,EAAgCA,EAAAxG,UAAAnG,OAAuB2M,IACvD1G,EAAA0G,GAAAxG,UAAAwG,GAEA,IAAAqhD,EAAA/nD,EAAA,GAAA6L,EAAA7L,EAAA,GACAyD,EAAAmkD,wBAAA5nD,GACAyD,EAAAsjD,gBAAAtB,eAAAsC,EAAAl8C,IACa,WACbpI,EAAAyjD,aACazjD,EAAAijD,OAGb,IAAAsB,EAAA,CACAC,MAAA,KACAD,EAAA,IAAA32C,KAAAC,MAAA,IAAAD,KAAAgN,UACA5a,EAAA8jD,gBAAAW,2BACAF,EAAA,GAAAvkD,EAAA8jD,gBAAAW,0BACAF,EAAA,EA99RA,IA+9RAvkD,EAAA0iD,qBACA6B,EAAA,EAAAvkD,EAAA0iD,oBAEA1iD,EAAA2iD,gBACA4B,EAAA,GAAAvkD,EAAA2iD,gBAEAvkD,EAAA4O,aACA,oBAAA4F,UACAA,SAAA8xC,OACA,IAAA9xC,SAAA8xC,KAAA50C,QAn+RA,oBAo+RAy0C,EAAA,EAr+RA,KAu+RA,IAAAI,EAAA3kD,EAAAijD,MAAAsB,GACAvkD,EAAA+iD,KAAA,+BAAA4B,GACA3kD,EAAA8jD,gBAAAc,OAAAD,EAAA,kBAQAnC,EAAAjxD,UAAAizD,MAAA,WACA7yD,KAAAmyD,gBAAAe,cAAAlzD,KAAAmmB,GAAAnmB,KAAAyyD,UACAzyD,KAAAmzD,uBAAAnzD,KAAAmmB,GAAAnmB,KAAAyyD,WAKA5B,EAAAuC,WAAA,WACAvC,EAAAwC,aAAA,GAKAxC,EAAAyC,cAAA,WACAzC,EAAA0C,gBAAA,GAGA1C,EAAA2C,YAAA,WAGA,OAAA3C,EAAAwC,cACAxC,EAAA0C,gBACA,oBAAAzrC,UACA,MAAAA,SAAAa,iBAr9SA,iBAAAxN,QACAA,OAAA,QACAA,OAAA,mBACA,UAAAC,KAAAD,OAAA8F,SAAA8xC,UAQA,iBAAAU,SAAA,iBAAAA,QAAAC,MA68SAjnD,EAAA4O,aAKAw1C,EAAAjxD,UAAA+zD,sBAAA,aAKA9C,EAAAjxD,UAAAg0D,UAAA,WACA5zD,KAAA4xD,WAAA,EACA5xD,KAAAmyD,kBACAnyD,KAAAmyD,gBAAAl4C,QACAja,KAAAmyD,gBAAA,MAGAnyD,KAAA6zD,iBACA/rC,SAAAzH,KAAA0I,YAAA/oB,KAAA6zD,gBACA7zD,KAAA6zD,eAAA,MAEA7zD,KAAA6xD,uBACAloD,aAAA3J,KAAA6xD,sBACA7xD,KAAA6xD,qBAAA,OAOAhB,EAAAjxD,UAAAkyD,UAAA,WACA9xD,KAAA4xD,YACA5xD,KAAAoxD,KAAA,8BACApxD,KAAA4zD,YACA5zD,KAAA0xD,gBACA1xD,KAAA0xD,cAAA1xD,KAAAmxD,gBACAnxD,KAAA0xD,cAAA,QAQAb,EAAAjxD,UAAAqa,MAAA,WACAja,KAAA4xD,YACA5xD,KAAAoxD,KAAA,6BACApxD,KAAA4zD,cAQA/C,EAAAjxD,UAAAyiB,KAAA,SAAA5L,GACA,IAAAq9C,EAAArnD,EAAAgP,UAAAhF,GACAzW,KAAAixD,WAAA6C,EAAAnvD,OACA3E,KAAAqxD,OAAApF,iBAAA,aAAA6H,EAAAnvD,QAQA,IANA,IAAAovD,EAAAtnD,EAAAuO,aAAA84C,GAGAn9B,EAAAF,EAAAs9B,EAzOAC,MA4OA1tD,EAAA,EAAuBA,EAAAqwB,EAAAhyB,OAAqB2B,IAC5CtG,KAAAmyD,gBAAA8B,eAAAj0D,KAAAyxD,cAAA96B,EAAAhyB,OAAAgyB,EAAArwB,IACAtG,KAAAyxD,iBAUAZ,EAAAjxD,UAAAuzD,uBAAA,SAAAhtC,EAAA+tC,GACA,IAAAznD,EAAA4O,YAAA,CAEArb,KAAA6zD,eAAA/rC,SAAAa,cAAA,UACA,IAAAiqC,EAAA,CACAuB,OAAA,KACAvB,EAAA,GAAAzsC,EACAysC,EAAA,GAAAsB,EACAl0D,KAAA6zD,eAAAO,IAAAp0D,KAAAsxD,MAAAsB,GACA5yD,KAAA6zD,eAAAQ,MAAAC,QAAA,OACAxsC,SAAAzH,KAAA2I,YAAAhpB,KAAA6zD,kBAOAhD,EAAAjxD,UAAA4yD,wBAAA,SAAA5nD,GAEA,IAAAsmD,EAAAzkD,EAAAgP,UAAA7Q,GAAAjG,OACA3E,KAAAkxD,iBACAlxD,KAAAqxD,OAAApF,iBAAA,iBAAAiF,IAEAL,EA1PA,GAgQAuB,GAAA,WAOA,SAAAA,EAAAmC,EAAAC,EAAAhD,EAAAF,GAoBA,GAnBAtxD,KAAAwxD,eACAxxD,KAAAsxD,QAMAtxD,KAAAy0D,oBAAA,IAAAlhB,GAEAvzC,KAAA00D,YAAA,GAMA10D,KAAA20D,cAAA14C,KAAAC,MAAA,IAAAD,KAAAgN,UAGAjpB,KAAA0yD,cAAA,EACAjmD,EAAA4O,YAkCArb,KAAAu0D,YACAv0D,KAAAw0D,kBAnCA,CAKAx0D,KAAA8yD,yBAAAn+B,IACAxZ,OAAAw1C,GAAA3wD,KAAA8yD,0BAAAyB,EACAp5C,OAAAy1C,GAAA5wD,KAAA8yD,0BAAA0B,EAEAx0D,KAAA40D,SAAAxC,EAAAyC,gBAEA,IAAAhsC,EAAA,GAGA,GAAA7oB,KAAA40D,SAAAR,KACA,gBAAAp0D,KAAA40D,SAAAR,IAAA58B,OAAA,gBAAA7yB,QAEAkkB,EAAA,4BADAf,SAAAkT,OACA,eAEA,IAAA85B,EAAA,eAAAjsC,EAAA,iBACA,IACA7oB,KAAA40D,SAAA/sC,IAAA7F,OACAhiB,KAAA40D,SAAA/sC,IAAA69B,MAAAoP,GACA90D,KAAA40D,SAAA/sC,IAAA5N,QAEA,MAAA/Z,GACAsP,EAAA,2BACAtP,EAAAoW,OACA9G,EAAAtP,EAAAoW,OAEA9G,EAAAtP,KAsPA,OAxOAkyD,EAAAyC,cAAA,WACA,IAAAE,EAAAjtC,SAAAa,cAAA,UAGA,GAFAosC,EAAAV,MAAAC,QAAA,QAEAxsC,SAAAzH,KAuBA,yGAtBAyH,SAAAzH,KAAA2I,YAAA+rC,GACA,IAIAA,EAAAC,cAAAltC,UAGAtY,EAAA,iCAGA,MAAAtP,GACA,IAAA86B,EAAAlT,SAAAkT,OACA+5B,EAAAX,IACA,gEACAp5B,EACA,2BAkBA,OATA+5B,EAAAE,gBACAF,EAAAltC,IAAAktC,EAAAE,gBAEAF,EAAAC,cACAD,EAAAltC,IAAAktC,EAAAC,cAAAltC,SAEAitC,EAAAjtC,WACAitC,EAAAltC,IAAAktC,EAAAjtC,UAEAitC,GAKA3C,EAAAxyD,UAAAqa,MAAA,WACA,IAAA5L,EAAArO,KAeA,GAbAA,KAAAk1D,OAAA,EACAl1D,KAAA40D,WAIA50D,KAAA40D,SAAA/sC,IAAAxH,KAAA80C,UAAA,GACAzrD,WAAA,WACA,OAAA2E,EAAAumD,WACA9sC,SAAAzH,KAAA0I,YAAA1a,EAAAumD,UACAvmD,EAAAumD,SAAA,OAEa34C,KAAAC,MAAA,KAEbzP,EAAA4O,aAAArb,KAAAo1D,KAAA,CACA,IAAAxC,EAAA,CACAyC,QAAA,KACAzC,EAAA,GAAA5yD,KAAAo1D,KACAxC,EAAA,GAAA5yD,KAAAs1D,KACA,IAAAC,EAAAv1D,KAAAsxD,MAAAsB,GACAR,EAAAoD,gBAAAD,GAGA,IAAA/D,EAAAxxD,KAAAwxD,aACAA,IACAxxD,KAAAwxD,aAAA,KACAA,MAQAY,EAAAxyD,UAAAszD,cAAA,SAAA/sC,EAAA+tC,GAKA,IAJAl0D,KAAAo1D,KAAAjvC,EACAnmB,KAAAs1D,KAAApB,EACAl0D,KAAAk1D,OAAA,EAEAl1D,KAAAy1D,kBASArD,EAAAxyD,UAAA61D,YAAA,WAIA,GAAAz1D,KAAAk1D,OACAl1D,KAAA0yD,cACA1yD,KAAAy0D,oBAAAhqC,SAAAzqB,KAAA00D,YAAA/vD,OAAA,QAEA3E,KAAA20D,gBACA,IAAA/B,EAAA,GACAA,EAAA,GAAA5yD,KAAAo1D,KACAxC,EAAA,GAAA5yD,KAAAs1D,KACA1C,EAAA,IAAA5yD,KAAA20D,cAKA,IAJA,IAAAY,EAAAv1D,KAAAsxD,MAAAsB,GAEA8C,EAAA,GACApvD,EAAA,EACAtG,KAAA00D,YAAA/vD,OAAA,IAGA,KADA3E,KAAA00D,YAAA,GACA57C,EAAAnU,OA/cA,GA+cA+wD,EAAA/wD,QAhdA,MAweA,MArBA,IAAAgxD,EAAA31D,KAAA00D,YAAAhzC,QACAg0C,EACAA,EACA,OAEApvD,EACA,IACAqvD,EAAAC,IACA,MAEAtvD,EACA,IACAqvD,EAAAE,GACA,KAEAvvD,EACA,IACAqvD,EAAA78C,EACAxS,IAQA,OAFAivD,GAAAG,EACA11D,KAAA81D,gBAAAP,EAAAv1D,KAAA20D,gBACA,EAGA,UASAvC,EAAAxyD,UAAAq0D,eAAA,SAAA8B,EAAAC,EAAAv/C,GAEAzW,KAAA00D,YAAAjwD,KAAA,CAA+BmxD,IAAAG,EAAAF,GAAAG,EAAAl9C,EAAArC,IAG/BzW,KAAAk1D,OACAl1D,KAAAy1D,eASArD,EAAAxyD,UAAAk2D,gBAAA,SAAAl1C,EAAAq1C,GACA,IAAA5nD,EAAArO,KAEAA,KAAAy0D,oBAAAjhB,IAAAyiB,EAAA,GACA,IAAAC,EAAA,WACA7nD,EAAAomD,oBAAAzgC,OAAAiiC,GACA5nD,EAAAonD,eAIAU,EAAAzsD,WAAAwsD,EAAAj6C,KAAAC,MAxgBA,OA+gBAlc,KAAAizD,OAAAryC,EANA,WAEAjX,aAAAwsD,GAEAD,OASA9D,EAAAxyD,UAAAqzD,OAAA,SAAAryC,EAAAw1C,GACA,IAAA/nD,EAAArO,KACAyM,EAAA4O,YACArb,KAAAq2D,eAAAz1C,EAAAw1C,GAGA1sD,WAAA,WACA,IAEA,IAAA2E,EAAAqkD,aACA,OACA,IAAA4D,EAAAjoD,EAAAumD,SAAA/sC,IAAAc,cAAA,UACA2tC,EAAAzwD,KAAA,kBACAywD,EAAA3yD,OAAA,EACA2yD,EAAAlC,IAAAxzC,EACA01C,EAAAh1C,OAAAg1C,EAAAxtC,mBAAA,WACA,IAAAytC,EAAAD,EAAAvE,WACAwE,GAAA,WAAAA,GAAA,aAAAA,IACAD,EAAAh1C,OAAAg1C,EAAAxtC,mBAAA,KACAwtC,EAAAE,YACAF,EAAAE,WAAAztC,YAAAutC,GAEAF,MAGAE,EAAAx0C,QAAA,WACAtS,EAAA,oCAAAoR,GACAvS,EAAAqkD,cAAA,EACArkD,EAAA4L,SAEA5L,EAAAumD,SAAA/sC,IAAAxH,KAAA2I,YAAAstC,GAEA,MAAAp2D,MAGa+b,KAAAC,MAAA,KAGbk2C,EA/SA,GAoUAqE,GAAA,KACA,oBAAAC,aACAD,GAAAC,aAEA,oBAAAC,YACAF,GAAAE,WAOA,IAAAC,GAAA,WAQA,SAAAA,EAAA9F,EAAAt0B,EAAAu0B,EAAAC,GACAhxD,KAAA8wD,SACA9wD,KAAA62D,eAAA,KACA72D,KAAA82D,OAAA,KACA92D,KAAA+2D,YAAA,EACA/2D,KAAAixD,UAAA,EACAjxD,KAAAkxD,cAAA,EACAlxD,KAAAoxD,KAAA57B,EAAAx1B,KAAA8wD,QACA9wD,KAAAqxD,OAAAlF,GAAAC,cAAA5vB,GACAx8B,KAAAy7B,QAAAm7B,EAAAI,eAAAx6B,EAAAu0B,EAAAC,GA6RA,OAnRA4F,EAAAI,eAAA,SAAAx6B,EAAAu0B,EAAAC,GACA,IAAA4B,EAAA,CACAjgC,EAv+SA,KAo/SA,OAZAlmB,EAAA4O,aACA,oBAAA4F,UACAA,SAAA8xC,OACA,IAAA9xC,SAAA8xC,KAAA50C,QAt+SA,oBAu+SAy0C,EAAA,EAx+SA,KA0+SA7B,IACA6B,EAAA,EAAA7B,GAEAC,IACA4B,EAAA,GAAA5B,GAEAx0B,EAAAhB,cA7+SA,YA6+SAo3B,IAOAgE,EAAAh3D,UAAAoiB,KAAA,SAAAuvC,EAAAC,GACA,IAAAnjD,EAAArO,KACAA,KAAAwxD,eACAxxD,KAAAuxD,YACAvxD,KAAAoxD,KAAA,2BAAApxD,KAAAy7B,SACAz7B,KAAAmxD,gBAAA,EAEA58B,EAAAtmB,IAAA,iCACA,IACA,GAAAxB,EAAA4O,YAAA,CACA,IAAA47C,EAAAxqD,EAAAwF,UAAAE,WAAA,mBAEArF,EAAA,CACA6T,QAAA,CACAu2C,aAAA,cAAAjnD,EAAAY,YAAA,IAAAxH,EAAA8tD,SAAA,IAAAF,IAIA/rD,EAA0B,GAC1BoS,EAAA,GAAAtd,KAAAy7B,QAAAtd,QAAA,UACAjT,EAAA,aAAAA,EAAA,YACAA,EAAA,YAAAA,EAAA,WACAoS,IACAxQ,EAAA,OAAwCsqD,OAAA95C,IAExCtd,KAAAq3D,OAAA,IAAAZ,GAAAz2D,KAAAy7B,QAAA,GAAA3uB,QAGA9M,KAAAq3D,OAAA,IAAAZ,GAAAz2D,KAAAy7B,SAGA,MAAAv7B,GACAF,KAAAoxD,KAAA,kCACA,IAAA1G,EAAAxqD,EAAAoS,SAAApS,EAAAuW,KAKA,OAJAi0C,GACA1qD,KAAAoxD,KAAA1G,QAEA1qD,KAAA8xD,YAGA9xD,KAAAq3D,OAAAC,OAAA,WACAjpD,EAAA+iD,KAAA,wBACA/iD,EAAA8iD,gBAAA,GAEAnxD,KAAAq3D,OAAAE,QAAA,WACAlpD,EAAA+iD,KAAA,0CACA/iD,EAAAgpD,OAAA,KACAhpD,EAAAyjD,aAEA9xD,KAAAq3D,OAAAhvC,UAAA,SAAAwK,GACAxkB,EAAAmpD,oBAAA3kC,IAEA7yB,KAAAq3D,OAAAv1C,QAAA,SAAA5hB,GACAmO,EAAA+iD,KAAA,yCACA,IAAA1G,EAAAxqD,EAAAoS,SAAApS,EAAAuW,KACAi0C,GACAr8C,EAAA+iD,KAAA1G,GAEAr8C,EAAAyjD,cAMA8E,EAAAh3D,UAAAizD,MAAA,aACA+D,EAAAtD,cAAA,WACAsD,EAAArD,gBAAA,GAEAqD,EAAApD,YAAA,WACA,IAAAiE,GAAA,EACA,uBAAAvhD,qBAAAwhD,UAAA,CACA,IACAC,EAAAzhD,UAAAwhD,UAAAz3D,MADA,kCAEA03D,KAAAhzD,OAAA,GACAizD,WAAAD,EAAA,UACAF,GAAA,GAIA,OAAAA,GACA,OAAAhB,KACAG,EAAArD,gBAMAqD,EAAAiB,iBAAA,WAGA,OAAAtjC,EAAAJ,oBACA,IAAAI,EAAAx0B,IAAA,+BAEA62D,EAAAh3D,UAAA+zD,sBAAA,WACAp/B,EAAAP,OAAA,+BAEA4iC,EAAAh3D,UAAAk4D,aAAA,SAAArhD,GAEA,GADAzW,KAAA82D,OAAAryD,KAAAgS,GACAzW,KAAA82D,OAAAnyD,QAAA3E,KAAA+2D,YAAA,CACA,IAAAgB,EAAA/3D,KAAA82D,OAAAtiD,KAAA,IACAxU,KAAA82D,OAAA,KACA,IAAAkB,EAAAvrD,EAAAoK,SAAAkhD,GAEA/3D,KAAAuxD,UAAAyG,KAOApB,EAAAh3D,UAAAq4D,qBAAA,SAAAC,GACAl4D,KAAA+2D,YAAAmB,EACAl4D,KAAA82D,OAAA,IAQAF,EAAAh3D,UAAAu4D,mBAAA,SAAA1hD,GAIA,GAHAhK,EAAA2F,OAAA,OAAApS,KAAA82D,OAAA,kCAGArgD,EAAA9R,QAAA,GACA,IAAAuzD,EAAAtiC,OAAAnf,GACA,IAAAjR,MAAA0yD,GAEA,OADAl4D,KAAAi4D,qBAAAC,GACA,KAIA,OADAl4D,KAAAi4D,qBAAA,GACAxhD,GAMAmgD,EAAAh3D,UAAA43D,oBAAA,SAAAY,GACA,UAAAp4D,KAAAq3D,OAAA,CAEA,IAAA5gD,EAAA2hD,EAAA,KAIA,GAHAp4D,KAAAkxD,eAAAz6C,EAAA9R,OACA3E,KAAAqxD,OAAApF,iBAAA,iBAAAx1C,EAAA9R,QACA3E,KAAAq4D,iBACA,OAAAr4D,KAAA82D,OAEA92D,KAAA83D,aAAArhD,OAEA,CAEA,IAAA6hD,EAAAt4D,KAAAm4D,mBAAA1hD,GACA,OAAA6hD,GACAt4D,KAAA83D,aAAAQ,MAQA1B,EAAAh3D,UAAAyiB,KAAA,SAAA5L,GACAzW,KAAAq4D,iBACA,IAAAvE,EAAArnD,EAAAgP,UAAAhF,GACAzW,KAAAixD,WAAA6C,EAAAnvD,OACA3E,KAAAqxD,OAAApF,iBAAA,aAAA6H,EAAAnvD,QAGA,IAAAgyB,EAAAF,EAAAq9B,EAvOA,OAyOAn9B,EAAAhyB,OAAA,GACA3E,KAAAu4D,YAAAxjD,OAAA4hB,EAAAhyB,SAGA,QAAA2B,EAAA,EAAuBA,EAAAqwB,EAAAhyB,OAAqB2B,IAC5CtG,KAAAu4D,YAAA5hC,EAAArwB,KAGAswD,EAAAh3D,UAAAg0D,UAAA,WACA5zD,KAAA4xD,WAAA,EACA5xD,KAAA62D,iBACArwC,cAAAxmB,KAAA62D,gBACA72D,KAAA62D,eAAA,MAEA72D,KAAAq3D,SACAr3D,KAAAq3D,OAAAp9C,QACAja,KAAAq3D,OAAA,OAGAT,EAAAh3D,UAAAkyD,UAAA,WACA9xD,KAAA4xD,YACA5xD,KAAAoxD,KAAA,+BACApxD,KAAA4zD,YAEA5zD,KAAAwxD,eACAxxD,KAAAwxD,aAAAxxD,KAAAmxD,gBACAnxD,KAAAwxD,aAAA,QAQAoF,EAAAh3D,UAAAqa,MAAA,WACAja,KAAA4xD,YACA5xD,KAAAoxD,KAAA,6BACApxD,KAAA4zD,cAOAgD,EAAAh3D,UAAAy4D,eAAA,WACA,IAAAhqD,EAAArO,KACAwmB,cAAAxmB,KAAA62D,gBACA72D,KAAA62D,eAAAtwC,YAAA,WAEAlY,EAAAgpD,QACAhpD,EAAAkqD,YAAA,KAEAlqD,EAAAgqD,kBACSp8C,KAAAC,MA7RT,QAqSA06C,EAAAh3D,UAAA24D,YAAA,SAAA9lD,GAIA,IACAzS,KAAAq3D,OAAAh1C,KAAA5P,GAEA,MAAAvS,GACAF,KAAAoxD,KAAA,0CAAAlxD,EAAAoS,SAAApS,EAAAuW,KAAA,uBACA/M,WAAA1J,KAAA8xD,UAAA5iD,KAAAlP,MAAA,KAOA42D,EAAA4B,6BAAA,EAKA5B,EAAA6B,eAAA,IACA7B,EA9SA,GAyUA8B,GAAA,WAIA,SAAAA,EAAAl8B,GACAx8B,KAAA24D,gBAAAn8B,GA6DA,OA3DAv7B,OAAAT,eAAAk4D,EAAA,kBAKA34D,IAAA,WACA,OAAA8wD,GAAA+F,KAEAzoD,YAAA,EACArO,cAAA,IAMA44D,EAAA94D,UAAA+4D,gBAAA,SAAAn8B,GACA,IAAAo8B,EAAAhC,OAAA,cACAiC,EAAAD,IAAAhC,GAAAiB,mBAMA,GALAr7B,EAAA1B,gBACA89B,GACA7yC,EAAA,mFACA8yC,GAAA,GAEAA,EACA74D,KAAA84D,YAAA,CAAAlC,QAEA,CACA,IAAAmC,EAAA/4D,KAAA84D,YAAA,GACAjiC,EAAA6hC,EAAAM,eAAA,SAAA1yD,EAAA2yD,GACAA,KAAA,eACAF,EAAAt0D,KAAAw0D,OASAP,EAAA94D,UAAAs5D,iBAAA,WACA,GAAAl5D,KAAA84D,YAAAn0D,OAAA,EACA,OAAA3E,KAAA84D,YAAA,GAGA,UAAAjyD,MAAA,4BAOA6xD,EAAA94D,UAAAu5D,iBAAA,WACA,OAAAn5D,KAAA84D,YAAAn0D,OAAA,EACA3E,KAAA84D,YAAA,GAGA,MAGAJ,EAlEA,GA+GAU,GAAA,WAUA,SAAAA,EAAAjzC,EAAAkzC,EAAAvJ,EAAAwJ,EAAA5H,EAAA6H,EAAAvI,GACAhxD,KAAAmmB,KACAnmB,KAAAq5D,YACAr5D,KAAA8vD,aACA9vD,KAAAs5D,WACAt5D,KAAA0xD,gBACA1xD,KAAAu5D,UACAv5D,KAAAgxD,gBACAhxD,KAAAw5D,gBAAA,EACAx5D,KAAAy5D,oBAAA,GACAz5D,KAAA05D,OAAA,EACA15D,KAAAoxD,KAAA57B,EAAA,KAAAx1B,KAAAmmB,GAAA,KACAnmB,KAAA25D,kBAAA,IAAAjB,GAAAW,GACAr5D,KAAAoxD,KAAA,sBACApxD,KAAA45D,SAiaA,OA3ZAR,EAAAx5D,UAAAg6D,OAAA,WACA,IAAAvrD,EAAArO,KACA65D,EAAA75D,KAAA25D,kBAAAT,mBACAl5D,KAAA85D,MAAA,IAAAD,EAAA75D,KAAA+5D,mBAAA/5D,KAAAq5D,eAAAt4D,EAAAf,KAAAgxD,eAGAhxD,KAAAg6D,0BAAAH,EAAA,gCACA,IAAAI,EAAAj6D,KAAAk6D,cAAAl6D,KAAA85D,OACAK,EAAAn6D,KAAAo6D,iBAAAp6D,KAAA85D,OACA95D,KAAAq6D,IAAAr6D,KAAA85D,MACA95D,KAAAs6D,IAAAt6D,KAAA85D,MACA95D,KAAAu6D,eAAA,KACAv6D,KAAAw6D,YAAA,EAOA9wD,WAAA,WAEA2E,EAAAyrD,OAAAzrD,EAAAyrD,MAAA93C,KAAAi4C,EAAAE,IACSl+C,KAAAC,MAAA,IACT,IAAAu+C,EAAAZ,EAAA,kBACAY,EAAA,IACAz6D,KAAA06D,gBAAA5iC,EAAA,WACAzpB,EAAAqsD,gBAAA,KACArsD,EAAAmsD,aACAnsD,EAAAyrD,OACAzrD,EAAAyrD,MAAA5I,cA5EA,QA6EA7iD,EAAA+iD,KAAA,wDACA/iD,EAAAyrD,MAAA5I,cACA,wCACA7iD,EAAAmsD,YAAA,EACAnsD,EAAAyrD,MAAAnG,yBAEAtlD,EAAAyrD,OACAzrD,EAAAyrD,MAAA7I,UArFA,MAsFA5iD,EAAA+iD,KAAA,oDACA/iD,EAAAyrD,MAAA7I,UACA,uCAKA5iD,EAAA+iD,KAAA,+CACA/iD,EAAA4L,WAGagC,KAAAC,MAAAu+C,MAObrB,EAAAx5D,UAAAm6D,iBAAA,WACA,WAAA/5D,KAAAmmB,GAAA,IAAAnmB,KAAAw5D,mBAEAJ,EAAAx5D,UAAAw6D,iBAAA,SAAAP,GACA,IAAAxrD,EAAArO,KACA,gBAAA26D,GACAd,IAAAxrD,EAAAyrD,MACAzrD,EAAAusD,kBAAAD,GAEAd,IAAAxrD,EAAAksD,gBACAlsD,EAAA+iD,KAAA,8BACA/iD,EAAAwsD,8BAGAxsD,EAAA+iD,KAAA,+BAIAgI,EAAAx5D,UAAAs6D,cAAA,SAAAL,GACA,IAAAxrD,EAAArO,KACA,gBAAAsS,GACA,GAAAjE,EAAAqrD,SACAG,IAAAxrD,EAAAisD,IACAjsD,EAAAysD,0BAAAxoD,GAEAunD,IAAAxrD,EAAAksD,eACAlsD,EAAA0sD,4BAAAzoD,GAGAjE,EAAA+iD,KAAA,gCASAgI,EAAAx5D,UAAAo7D,YAAA,SAAAC,GAEA,IAAAC,EAAA,CAAmBxiD,EAAA,IAAAI,EAAAmiD,GACnBj7D,KAAAm7D,UAAAD,IAEA9B,EAAAx5D,UAAAw7D,qBAAA,WACAp7D,KAAAq6D,MAAAr6D,KAAAu6D,gBAAAv6D,KAAAs6D,MAAAt6D,KAAAu6D,iBACAv6D,KAAAoxD,KAAA,2CAAApxD,KAAAu6D,eAAAzJ,QACA9wD,KAAA85D,MAAA95D,KAAAu6D,eACAv6D,KAAAu6D,eAAA,OAIAnB,EAAAx5D,UAAAy7D,oBAAA,SAAAC,GACA,GA1JA,MA0JAA,EAAA,CACA,IAAAC,EAAAD,EAAA,EArJA,MAsJAC,EACAv7D,KAAAw7D,6BA1JA,MA4JAD,GAEAv7D,KAAAoxD,KAAA,wCACApxD,KAAAu6D,eAAAtgD,QAEAja,KAAAq6D,MAAAr6D,KAAAu6D,gBACAv6D,KAAAs6D,MAAAt6D,KAAAu6D,gBACAv6D,KAAAia,SAjKA,MAoKAshD,IACAv7D,KAAAoxD,KAAA,0BACApxD,KAAAy7D,8BACAz7D,KAAAw7D,gCAIApC,EAAAx5D,UAAAm7D,4BAAA,SAAAW,GACA,IAAAC,EAAArlC,EAAA,IAAAolC,GACAjlD,EAAA6f,EAAA,IAAAolC,GACA,QAAAC,EACA37D,KAAAq7D,oBAAA5kD,OAEA,SAAAklD,EAKA,UAAA90D,MAAA,2BAAA80D,GAHA37D,KAAAy5D,oBAAAh1D,KAAAgS,KAMA2iD,EAAAx5D,UAAA47D,2BAAA,WACAx7D,KAAAy7D,6BAAA,GACAz7D,KAAAoxD,KAAA,oCACApxD,KAAAw6D,YAAA,EACAx6D,KAAAu6D,eAAA5G,wBACA3zD,KAAA47D,wBAIA57D,KAAAoxD,KAAA,8BACApxD,KAAAu6D,eAAAl4C,KAAA,CAAsC3J,EAAA,IAAAI,EAAA,CAAaJ,EAhMnD,IAgMmDI,EAAA,QAGnDsgD,EAAAx5D,UAAAg8D,oBAAA,WAEA57D,KAAAu6D,eAAA1H,QAEA7yD,KAAAoxD,KAAA,mCACApxD,KAAAu6D,eAAAl4C,KAAA,CAAkC3J,EAAA,IAAAI,EAAA,CAAaJ,EA1M/C,IA0M+CI,EAAA,MAG/C9Y,KAAAoxD,KAAA,kCACApxD,KAAA85D,MAAAz3C,KAAA,CAAyB3J,EAAA,IAAAI,EAAA,CAAaJ,EA7MtC,IA6MsCI,EAAA,MACtC9Y,KAAAq6D,IAAAr6D,KAAAu6D,eACAv6D,KAAAo7D,wBAEAhC,EAAAx5D,UAAAk7D,0BAAA,SAAAY,GAEA,IAAAC,EAAArlC,EAAA,IAAAolC,GACAjlD,EAAA6f,EAAA,IAAAolC,GACA,KAAAC,EACA37D,KAAA67D,WAAAplD,GAEA,KAAAklD,GACA37D,KAAA87D,eAAArlD,IAGA2iD,EAAAx5D,UAAAk8D,eAAA,SAAAxpD,GACAtS,KAAA+7D,qBAEA/7D,KAAA8vD,WAAAx9C,IAEA8mD,EAAAx5D,UAAAm8D,mBAAA,WACA/7D,KAAAw6D,aACAx6D,KAAAg6D,4BACAh6D,KAAAg6D,2BAAA,IACAh6D,KAAAoxD,KAAA,kCACApxD,KAAAw6D,YAAA,EACAx6D,KAAA85D,MAAAnG,2BAIAyF,EAAAx5D,UAAAi8D,WAAA,SAAAP,GACA,IAAAC,EAAAjlC,EAnPA,IAmPAglC,GACA,GAnPA,MAmPAA,EAAA,CACA,IAAAU,EAAAV,EAAA,EACA,GA7OA,MA6OAC,EACAv7D,KAAAi8D,aAAAD,QAEA,GAlPA,MAkPAT,EAAA,CACAv7D,KAAAoxD,KAAA,qCACApxD,KAAAs6D,IAAAt6D,KAAAu6D,eACA,QAAAj0D,EAAA,EAA+BA,EAAAtG,KAAAy5D,oBAAA90D,SAAqC2B,EACpEtG,KAAA87D,eAAA97D,KAAAy5D,oBAAAnzD,IAEAtG,KAAAy5D,oBAAA,GACAz5D,KAAAo7D,2BA9PA,MAgQAG,EAGAv7D,KAAAk8D,sBAAAF,GAlQA,MAoQAT,EAEAv7D,KAAAm8D,SAAAH,GArQA,MAuQAT,EACA3yD,EAAA,iBAAAozD,GAvQA,MAyQAT,GACAv7D,KAAAoxD,KAAA,wBACApxD,KAAA+7D,qBACA/7D,KAAAo8D,iCAGAxzD,EAAA,mCAAA2yD,KASAnC,EAAAx5D,UAAAq8D,aAAA,SAAAI,GACA,IAAAC,EAAAD,EAAAxG,GACAzqD,EAAAixD,EAAA1pC,EACAiI,EAAAyhC,EAAAE,EACAv8D,KAAAw8D,UAAAH,EAAA9qC,EACAvxB,KAAAq5D,UAAA/9B,WAAAV,GAEA,GAAA56B,KAAA05D,SACA15D,KAAA85D,MAAAjH,QACA7yD,KAAAy8D,yBAAAz8D,KAAA85D,MAAAwC,GAxpUA,MAypUAlxD,GACA2a,EAAA,sCAGA/lB,KAAA08D,qBAGAtD,EAAAx5D,UAAA88D,iBAAA,WACA,IAAA7C,EAAA75D,KAAA25D,kBAAAR,mBACAU,GACA75D,KAAA28D,cAAA9C,IAGAT,EAAAx5D,UAAA+8D,cAAA,SAAA9C,GACA,IAAAxrD,EAAArO,KACAA,KAAAu6D,eAAA,IAAAV,EAAA75D,KAAA+5D,mBAAA/5D,KAAAq5D,UAAAr5D,KAAAw8D,WAGAx8D,KAAAy7D,4BACA5B,EAAA,gCACA,IAAAtI,EAAAvxD,KAAAk6D,cAAAl6D,KAAAu6D,gBACA/I,EAAAxxD,KAAAo6D,iBAAAp6D,KAAAu6D,gBACAv6D,KAAAu6D,eAAAv4C,KAAAuvC,EAAAC,GAEA15B,EAAA,WACAzpB,EAAAksD,iBACAlsD,EAAA+iD,KAAA,gCACA/iD,EAAAksD,eAAAtgD,UAESgC,KAAAC,MA7UT,OA+UAk9C,EAAAx5D,UAAAu8D,SAAA,SAAAvhC,GACA56B,KAAAoxD,KAAA,qCAAAx2B,GACA56B,KAAAq5D,UAAA/9B,WAAAV,GAGA,IAAA56B,KAAA05D,OACA15D,KAAAia,SAIAja,KAAA48D,oBACA58D,KAAA45D,WAGAR,EAAAx5D,UAAA68D,yBAAA,SAAA5C,EAAAyC,GACA,IAAAjuD,EAAArO,KACAA,KAAAoxD,KAAA,oCACApxD,KAAA85D,MAAAD,EACA75D,KAAA05D,OAAA,EACA15D,KAAAs5D,WACAt5D,KAAAs5D,SAAAgD,EAAAt8D,KAAAw8D,WACAx8D,KAAAs5D,SAAA,MAIA,IAAAt5D,KAAAg6D,2BACAh6D,KAAAoxD,KAAA,kCACApxD,KAAAw6D,YAAA,GAGA1iC,EAAA,WACAzpB,EAAA+tD,iCACangD,KAAAC,MA5Wb,OA+WAk9C,EAAAx5D,UAAAw8D,8BAAA,WAEAp8D,KAAAw6D,YAAA,IAAAx6D,KAAA05D,SACA15D,KAAAoxD,KAAA,4BACApxD,KAAAm7D,UAAA,CAA4BziD,EAAA,IAAAI,EAAA,CAAaJ,EArWzC,IAqWyCI,EAAA,QAGzCsgD,EAAAx5D,UAAAi7D,2BAAA,WACA,IAAAhB,EAAA75D,KAAAu6D,eACAv6D,KAAAu6D,eAAA,KACAv6D,KAAAq6D,MAAAR,GAAA75D,KAAAs6D,MAAAT,GAEA75D,KAAAia,SASAm/C,EAAAx5D,UAAAg7D,kBAAA,SAAAD,GACA36D,KAAA85D,MAAA,KAGAa,GAAA,IAAA36D,KAAA05D,OASA,IAAA15D,KAAA05D,QACA15D,KAAAoxD,KAAA,8BATApxD,KAAAoxD,KAAA,+BAEApxD,KAAAq5D,UAAAj+B,oBACA7G,EAAAP,OAAA,QAAAh0B,KAAAq5D,UAAAz+B,MAEA56B,KAAAq5D,UAAAp+B,aAAAj7B,KAAAq5D,UAAAz+B,OAMA56B,KAAAia,SAOAm/C,EAAAx5D,UAAAs8D,sBAAA,SAAAx2C,GACA1lB,KAAAoxD,KAAA,0DACApxD,KAAAu5D,UACAv5D,KAAAu5D,QAAA7zC,GACA1lB,KAAAu5D,QAAA,MAIAv5D,KAAA0xD,cAAA,KACA1xD,KAAAia,SAEAm/C,EAAAx5D,UAAAu7D,UAAA,SAAA1kD,GACA,OAAAzW,KAAA05D,OACA,mCAGA15D,KAAAq6D,IAAAh4C,KAAA5L,IAMA2iD,EAAAx5D,UAAAqa,MAAA,WACA,IAAAja,KAAA05D,SACA15D,KAAAoxD,KAAA,gCACApxD,KAAA05D,OAAA,EACA15D,KAAA48D,oBACA58D,KAAA0xD,gBACA1xD,KAAA0xD,gBACA1xD,KAAA0xD,cAAA,QAQA0H,EAAAx5D,UAAAg9D,kBAAA,WACA58D,KAAAoxD,KAAA,iCACApxD,KAAA85D,QACA95D,KAAA85D,MAAA7/C,QACAja,KAAA85D,MAAA,MAEA95D,KAAAu6D,iBACAv6D,KAAAu6D,eAAAtgD,QACAja,KAAAu6D,eAAA,MAEAv6D,KAAA06D,kBACA/wD,aAAA3J,KAAA06D,iBACA16D,KAAA06D,gBAAA,OAGAtB,EAzbA,GAkdAyD,GAAA,WACA,SAAAA,KA0CA,OAlCAA,EAAAj9D,UAAAk9D,IAAA,SAAApkC,EAAAjiB,EAAAyoB,EAAAkE,KAOAy5B,EAAAj9D,UAAA68C,MAAA,SAAA/jB,EAAAjiB,EAAAyoB,EAAAkE,KAKAy5B,EAAAj9D,UAAAm9D,iBAAA,SAAA9lD,KAMA4lD,EAAAj9D,UAAAo9D,gBAAA,SAAAtkC,EAAAjiB,EAAAyoB,KAMA29B,EAAAj9D,UAAAq9D,kBAAA,SAAAvkC,EAAAjiB,EAAAyoB,KAKA29B,EAAAj9D,UAAAu/B,mBAAA,SAAAzG,EAAAwG,KAIA29B,EAAAj9D,UAAAguD,YAAA,SAAAH,KACAoP,EA3CA,GA8DAK,GAAA,IACAC,GAAA,IAaAC,GAAA,SAAAvlD,GAWA,SAAAulD,EAAA/D,EAAAgE,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAApvD,EAAAwJ,EAAArV,KAAAxC,YAwCA,GAvCAqO,EAAAgrD,YACAhrD,EAAAgvD,gBACAhvD,EAAAivD,mBACAjvD,EAAAkvD,sBACAlvD,EAAAmvD,qBACAnvD,EAAAovD,gBAEApvD,EAAA8X,GAAAi3C,EAAAM,8BACArvD,EAAA+iD,KAAA57B,EAAA,KAAAnnB,EAAA8X,GAAA,KAEA9X,EAAAsvD,kBAAA,GACAtvD,EAAAuvD,SAAA,GACAvvD,EAAAwvD,iBAAA,GACAxvD,EAAAyvD,qBAAA,EACAzvD,EAAA0vD,0BAAA,GACA1vD,EAAA2vD,YAAA,EACA3vD,EAAA4vD,gBAAAf,GACA7uD,EAAA6vD,mBAAAf,GACA9uD,EAAA8vD,uBAAA,KACA9vD,EAAA2iD,cAAA,KAEA3iD,EAAA+vD,0BAAA,KAEA/vD,EAAAmhD,UAAA,EAEAnhD,EAAAgwD,eAAA,GACAhwD,EAAAiwD,eAAA,EAKAjwD,EAAAkwD,UAAA,KAEAlwD,EAAAmwD,WAAA,KACAnwD,EAAAowD,oBAAA,EACApwD,EAAAqwD,uBAAA,EACArwD,EAAAswD,kBAAA,EACAtwD,EAAAuwD,2BAAA,KACAvwD,EAAAwwD,+BAAA,KACApB,IAAAhxD,EAAA4O,YACA,UAAAxU,MAAA,kFAOA,OALAwH,EAAAywD,iBAAA,GACAzP,GAAAI,cAAAnkD,GAAA,UAAA+C,EAAA0wD,WAAA1wD,IACA,IAAAgrD,EAAAz+B,KAAAzc,QAAA,YACAuxC,GAAAD,cAAAnkD,GAAA,SAAA+C,EAAA2wD,UAAA3wD,GAEAA,EAkrBA,OA7uBA2D,EAAAqG,UAAA+kD,EAAAvlD,GAmEAulD,EAAAx9D,UAAAo7D,YAAA,SAAAj4B,EAAA1iB,EAAA4+C,GACA,IAAAC,IAAAl/D,KAAAs+D,eACApD,EAAA,CAAmBx8C,EAAAwgD,EAAAtmD,EAAAmqB,EAAAlqB,EAAAwH,GACnBrgB,KAAAoxD,KAAA3kD,EAAAgP,UAAAy/C,IACAzuD,EAAA2F,OAAApS,KAAAg+D,WAAA,0DACAh+D,KAAAu+D,UAAAvD,YAAAE,GACA+D,IACAj/D,KAAAq+D,eAAAa,GAAAD,IAMA7B,EAAAx9D,UAAAu/D,OAAA,SAAAnwB,EAAAowB,EAAAlyC,EAAAgS,GACA,IAAA4V,EAAA9F,EAAAkE,kBACAxa,EAAAsW,EAAAhV,KAAA31B,WACArE,KAAAoxD,KAAA,qBAAA14B,EAAA,IAAAoc,GACA90C,KAAA49D,SAAAllC,GAAA14B,KAAA49D,SAAAllC,IAAA,GACAjsB,EAAA2F,OAAA48B,EAAAC,iBAAAob,cACArb,EAAAC,iBAAAuS,eAAA,sDACA/0C,EAAA2F,QAAApS,KAAA49D,SAAAllC,GAAAoc,GAAA,gDACA,IAAAuqB,EAAA,CACAngC,aACAsqB,OAAA4V,EACApwB,QACA9hB,OAEAltB,KAAA49D,SAAAllC,GAAAoc,GAAAuqB,EACAr/D,KAAAg+D,YACAh+D,KAAAs/D,YAAAD,IAUAjC,EAAAx9D,UAAA0/D,YAAA,SAAAD,GACA,IAAAhxD,EAAArO,KACAgvC,EAAAqwB,EAAArwB,MACAtW,EAAAsW,EAAAhV,KAAA31B,WACAywC,EAAA9F,EAAAkE,kBACAlzC,KAAAoxD,KAAA,aAAA14B,EAAA,QAAAoc,GACA,IAAAyqB,EAAA,CAAmB5sD,EAAA+lB,GAGnB2mC,EAAAnyC,MACAqyC,EAAA,EAAAvwB,EAAAgE,cACAusB,EAAA,EAAAF,EAAAnyC,KAEAqyC,EAAA,EAAAF,EAAA7V,SACAxpD,KAAAg7D,YAPA,IAOAuE,EAAA,SAAAjtD,GACA,IAAA0pD,EAAA1pD,EAAA,EACAmO,EAAAnO,EAAA,EAEA8qD,EAAAoC,sBAAAxD,EAAAhtB,IACA3gC,EAAAuvD,SAAAllC,IAAArqB,EAAAuvD,SAAAllC,GAAAoc,MAEAuqB,IACAhxD,EAAA+iD,KAAA,kBAAA9+C,GACA,OAAAmO,GACApS,EAAAoxD,cAAA/mC,EAAAoc,GAEAuqB,EAAAngC,YACAmgC,EAAAngC,WAAAze,EAAAu7C,OAUAoB,EAAAoC,sBAAA,SAAAxD,EAAAhtB,GACA,GAAAgtB,GAAA,iBAAAA,GAAAvvD,EAAAC,SAAAsvD,EAAA,MACA,IAAA0D,EAAAjzD,EAAAqQ,QAAAk/C,EAAA,KACA,GAAAnxD,MAAA8I,QAAA+rD,OAAAvhD,QAAA,aACA,IAAAwhD,EAAA,gBACA3wB,EACAC,iBACAC,WACA7qC,WACA,IACAu7D,EAAA5wB,EAAAhV,KAAA31B,WACA0hB,EAAA,wGACA45C,EAAA,OACAC,EAAA,sDAOAxC,EAAAx9D,UAAAm9D,iBAAA,SAAA9lD,GACAjX,KAAAw+D,WAAAvnD,EACAjX,KAAAoxD,KAAA,wBACApxD,KAAAw+D,WACAx+D,KAAA6/D,UAKA7/D,KAAAg+D,YACAh+D,KAAAg7D,YAAA,YAA6C,cAG7Ch7D,KAAA8/D,uCAAA7oD,IAMAmmD,EAAAx9D,UAAAkgE,uCAAA,SAAAC,IAGAA,GAAA,KAAAA,EAAAp7D,QACA8H,EAAAiP,QAAAqkD,MACA//D,KAAAoxD,KAAA,iEACApxD,KAAAk+D,mBAzMA,MAgNAd,EAAAx9D,UAAAigE,QAAA,WACA,IAAAxxD,EAAArO,KACA,GAAAA,KAAAg+D,YAAAh+D,KAAAw+D,WAAA,CACA,IAAAwB,EAAAhgE,KAAAw+D,WACAyB,EAAAxzD,EAAAmP,cAAAokD,GAAA,eACAE,EAAA,CAA+BC,KAAAH,GAC/B,OAAAhgE,KAAAy9D,cACAyC,EAAA,UAEA,iBAAAlgE,KAAAy9D,gBACAyC,EAAA,QAAAlgE,KAAAy9D,eAEAz9D,KAAAg7D,YAAAiF,EAAAC,EAAA,SAAAxjD,GACA,IAAA+D,EAAA/D,EAAA,EACAjG,EAAAiG,EAAA,WACArO,EAAAmwD,aAAAwB,IACA,OAAAv/C,EACApS,EAAAqwD,uBAAA,EAIArwD,EAAA+xD,eAAA3/C,EAAAhK,QASA2mD,EAAAx9D,UAAAygE,SAAA,SAAArxB,EAAA9hB,GACA,IAAAwL,EAAAsW,EAAAhV,KAAA31B,WACAywC,EAAA9F,EAAAkE,kBACAlzC,KAAAoxD,KAAA,uBAAA14B,EAAA,IAAAoc,GACAroC,EAAA2F,OAAA48B,EAAAC,iBAAAob,cACArb,EAAAC,iBAAAuS,eAAA,wDACAxhD,KAAAy/D,cAAA/mC,EAAAoc,IACA90C,KAAAg+D,YACAh+D,KAAAsgE,cAAA5nC,EAAAoc,EAAA9F,EAAAgE,cAAA9lB,IAGAkwC,EAAAx9D,UAAA0gE,cAAA,SAAA5nC,EAAAoc,EAAAyrB,EAAArzC,GACAltB,KAAAoxD,KAAA,eAAA14B,EAAA,QAAAoc,GACA,IAAAyqB,EAAA,CAAmB5sD,EAAA+lB,GAGnBxL,IACAqyC,EAAA,EAAAgB,EACAhB,EAAA,EAAAryC,GAEAltB,KAAAg7D,YANA,IAMAuE,IAKAnC,EAAAx9D,UAAAo9D,gBAAA,SAAAtkC,EAAAjiB,EAAAyoB,GACAl/B,KAAAg+D,WACAh+D,KAAAwgE,kBAAA,IAAA9nC,EAAAjiB,EAAAyoB,GAGAl/B,KAAA+9D,0BAAAt5D,KAAA,CACAi0B,aACAqK,OAAA,IACAtsB,OACAyoB,gBAOAk+B,EAAAx9D,UAAAq9D,kBAAA,SAAAvkC,EAAAjiB,EAAAyoB,GACAl/B,KAAAg+D,WACAh+D,KAAAwgE,kBAAA,KAAA9nC,EAAAjiB,EAAAyoB,GAGAl/B,KAAA+9D,0BAAAt5D,KAAA,CACAi0B,aACAqK,OAAA,KACAtsB,OACAyoB,gBAOAk+B,EAAAx9D,UAAAu/B,mBAAA,SAAAzG,EAAAwG,GACAl/B,KAAAg+D,WACAh+D,KAAAwgE,kBAAA,KAAA9nC,EAAA,KAAAwG,GAGAl/B,KAAA+9D,0BAAAt5D,KAAA,CACAi0B,aACAqK,OAAA,KACAtsB,KAAA,KACAyoB,gBAIAk+B,EAAAx9D,UAAA4gE,kBAAA,SAAAz9B,EAAArK,EAAAjiB,EAAAyoB,GACA,IAAA/d,EAAA,CAAuBxO,EAAA+lB,EAAA5f,EAAArC,GACvBzW,KAAAoxD,KAAA,gBAAAruB,EAAA5hB,GACAnhB,KAAAg7D,YAAAj4B,EAAA5hB,EAAA,SAAAN,GACAqe,GACAx1B,WAAA,WACAw1B,EAAAre,EAAA,EAAAA,EAAA,IACiB5E,KAAAC,MAAA,OAOjBkhD,EAAAx9D,UAAAk9D,IAAA,SAAApkC,EAAAjiB,EAAAyoB,EAAAkE,GACApjC,KAAAygE,YAAA,IAAA/nC,EAAAjiB,EAAAyoB,EAAAkE,IAKAg6B,EAAAx9D,UAAA68C,MAAA,SAAA/jB,EAAAjiB,EAAAyoB,EAAAkE,GACApjC,KAAAygE,YAAA,IAAA/nC,EAAAjiB,EAAAyoB,EAAAkE,IAEAg6B,EAAAx9D,UAAA6gE,YAAA,SAAA19B,EAAArK,EAAAjiB,EAAAyoB,EAAAkE,GACA,IAAAjiB,EAAA,CACAxO,EAAA+lB,EACA5f,EAAArC,QAEA1V,IAAAqiC,IACAjiB,EAAA,EAAAiiB,GAEApjC,KAAA69D,iBAAAp5D,KAAA,CACAs+B,SACA5hB,UACA+d,eAEAl/B,KAAA89D,uBACA,IAAA3zC,EAAAnqB,KAAA69D,iBAAAl5D,OAAA,EACA3E,KAAAg+D,WACAh+D,KAAA0gE,SAAAv2C,GAGAnqB,KAAAoxD,KAAA,kBAAA14B,IAGA0kC,EAAAx9D,UAAA8gE,SAAA,SAAAv2C,GACA,IAAA9b,EAAArO,KACA+iC,EAAA/iC,KAAA69D,iBAAA1zC,GAAA4Y,OACA5hB,EAAAnhB,KAAA69D,iBAAA1zC,GAAAhJ,QACA+d,EAAAl/B,KAAA69D,iBAAA1zC,GAAA+U,WACAl/B,KAAA69D,iBAAA1zC,GAAAw2C,OAAA3gE,KAAAg+D,WACAh+D,KAAAg7D,YAAAj4B,EAAA5hB,EAAA,SAAA7O,GACAjE,EAAA+iD,KAAAruB,EAAA,YAAAzwB,UACAjE,EAAAwvD,iBAAA1zC,GACA9b,EAAAyvD,uBAEA,IAAAzvD,EAAAyvD,uBACAzvD,EAAAwvD,iBAAA,IAEA3+B,GACAA,EAAA5sB,EAAA,EAAAA,EAAA,MAMA8qD,EAAAx9D,UAAAguD,YAAA,SAAAH,GACA,IAAAp/C,EAAArO,KAEA,GAAAA,KAAAg+D,WAAA,CACA,IAAA78C,EAAA,CAA2BvO,EAAA66C,GAC3BztD,KAAAoxD,KAAA,cAAAjwC,GACAnhB,KAAAg7D,YAAA,IAAA75C,EAAA,SAAAhd,GAEA,UADAA,EAAA,EACA,CACA,IAAAy8D,EAAAz8D,EAAA,EACAkK,EAAA+iD,KAAA,sCAAAwP,QASAxD,EAAAx9D,UAAAk8D,eAAA,SAAAxpD,GACA,SAAAA,EAAA,CAEAtS,KAAAoxD,KAAA,gBAAA3kD,EAAAgP,UAAAnJ,IACA,IAAAuuD,EAAAvuD,EAAA,EACA2sD,EAAAj/D,KAAAq+D,eAAAwC,GACA5B,WACAj/D,KAAAq+D,eAAAwC,GACA5B,EAAA3sD,EAAA,QAGA,cAAAA,EACA,0CAAAA,EAAA,MAEA,MAAAA,GAEAtS,KAAA8gE,YAAAxuD,EAAA,EAAAA,EAAA,KAGA8qD,EAAAx9D,UAAAkhE,YAAA,SAAA/9B,EAAA1iB,GACArgB,KAAAoxD,KAAA,sBAAAruB,EAAA1iB,GACA,MAAA0iB,EACA/iC,KAAAq9D,cAAAh9C,EAAA,EAAAA,EAAA,GACA,EAAAA,EAAA,GACA,MAAA0iB,EACA/iC,KAAAq9D,cAAAh9C,EAAA,EAAAA,EAAA,GACA,EAAAA,EAAA,GACA,MAAA0iB,EACA/iC,KAAA+gE,iBAAA1gD,EAAA,EAAAA,EAAA,GACA,OAAA0iB,EACA/iC,KAAAogE,eAAA//C,EAAA,EAAAA,EAAA,GACA,OAAA0iB,EACA/iC,KAAAghE,uBAAA3gD,GAEAzX,EAAA,6CACA6D,EAAAgP,UAAAsnB,GACA,uCAEAq6B,EAAAx9D,UAAA05D,SAAA,SAAAgD,EAAAE,GACAx8D,KAAAoxD,KAAA,oBACApxD,KAAAg+D,YAAA,EACAh+D,KAAA6+D,gCAAA,IAAAlpD,MAAAC,UACA5V,KAAAihE,iBAAA3E,GACAt8D,KAAAgxD,cAAAwL,EACAx8D,KAAA2+D,kBACA3+D,KAAAkhE,oBAEAlhE,KAAAmhE,gBACAnhE,KAAA2+D,kBAAA,EACA3+D,KAAAs9D,kBAAA,IAEAF,EAAAx9D,UAAAk/D,iBAAA,SAAA30D,GACA,IAAAkE,EAAArO,KACAyM,EAAA2F,QAAApS,KAAAu+D,UAAA,0DACAv+D,KAAAo+D,2BACAz0D,aAAA3J,KAAAo+D,2BAIAp+D,KAAAo+D,0BAAA10D,WAAA,WACA2E,EAAA+vD,0BAAA,KACA/vD,EAAA+yD,wBACSnlD,KAAAC,MAAA/R,KAMTizD,EAAAx9D,UAAAm/D,WAAA,SAAAra,GAEAA,IACA1kD,KAAAwvD,UACAxvD,KAAAi+D,kBAAAj+D,KAAAk+D,qBACAl+D,KAAAoxD,KAAA,2CACApxD,KAAAi+D,gBAAAf,GACAl9D,KAAAu+D,WACAv+D,KAAA8+D,iBAAA,IAGA9+D,KAAAwvD,SAAA9K,GAEA0Y,EAAAx9D,UAAAo/D,UAAA,SAAAqC,GACAA,GACArhE,KAAAoxD,KAAA,wBACApxD,KAAAi+D,gBAAAf,GACAl9D,KAAAu+D,WACAv+D,KAAA8+D,iBAAA,KAIA9+D,KAAAoxD,KAAA,8CACApxD,KAAAu+D,WACAv+D,KAAAu+D,UAAAtkD,UAIAmjD,EAAAx9D,UAAA0hE,sBAAA,WAQA,GAPAthE,KAAAoxD,KAAA,4BACApxD,KAAAg+D,YAAA,EACAh+D,KAAAu+D,UAAA,KAEAv+D,KAAAuhE,0BAEAvhE,KAAAq+D,eAAA,GACAr+D,KAAAwhE,mBAAA,CACA,GAAAxhE,KAAAwvD,UAKA,GAAAxvD,KAAA6+D,+BAAA,EAEA,IAAAlpD,MAAAC,UAAA5V,KAAA6+D,+BAvfA,MAyfA7+D,KAAAi+D,gBAAAf,IACAl9D,KAAA6+D,+BAAA,WATA7+D,KAAAoxD,KAAA,8CACApxD,KAAAi+D,gBAAAj+D,KAAAk+D,mBACAl+D,KAAA4+D,4BAAA,IAAAjpD,MAAAC,UASA,IAAA6rD,GAAA,IAAA9rD,MAAAC,UAAA5V,KAAA4+D,2BACA8C,EAAAzlD,KAAAme,IAAA,EAAAp6B,KAAAi+D,gBAAAwD,GACAC,EAAAzlD,KAAAgN,SAAAy4C,EACA1hE,KAAAoxD,KAAA,0BAAAsQ,EAAA,MACA1hE,KAAA8+D,iBAAA4C,GAEA1hE,KAAAi+D,gBAAAhiD,KAAAmO,IAAApqB,KAAAk+D,mBAngBA,IAmgBAl+D,KAAAi+D,iBAEAj+D,KAAAs9D,kBAAA,IAEAF,EAAAx9D,UAAAwhE,qBAAA,WACA,GAAAphE,KAAAwhE,mBAAA,CACAxhE,KAAAoxD,KAAA,+BACApxD,KAAA4+D,4BAAA,IAAAjpD,MAAAC,UACA5V,KAAA6+D,+BAAA,KACA,IAAA8C,EAAA3hE,KAAA87D,eAAA5sD,KAAAlP,MACA4hE,EAAA5hE,KAAAs5D,SAAApqD,KAAAlP,MACA6hE,EAAA7hE,KAAAshE,sBAAApyD,KAAAlP,MACA8hE,EAAA9hE,KAAAmmB,GAAA,IAAAi3C,EAAA2E,oBACAjuB,EAAA9zC,KACAgiE,EAAAhiE,KAAAgxD,cACAiR,GAAA,EACAC,EAAA,KACAC,EAAA,WACAD,EACAA,EAAAjoD,SAGAgoD,GAAA,EACAJ,MAOA7hE,KAAAu+D,UAAA,CACAtkD,MAAAkoD,EACAnH,YANA,SAAAE,GACAzuD,EAAA2F,OAAA8vD,EAAA,0DACAA,EAAAlH,YAAAE,KAMA,IAAAxP,EAAA1rD,KAAAy+D,mBACAz+D,KAAAy+D,oBAAA,EAEAz+D,KAAAw9D,mBACA9vD,SAAAg+C,GACAxnD,KAAA,SAAAC,GACA89D,EAUAzyD,EAAA,0CATAA,EAAA,8CACAskC,EAAA0qB,WAAAr6D,KAAAi+D,YACAF,EAAA,IAAA9I,GAAA0I,EAAAhuB,EAAAulB,UAAAsI,EAAAC,EAAAC,EACA,SAAAn8C,GACAK,EAAAL,EAAA,KAAAouB,EAAAulB,UAAAh1D,WAAA,KACAyvC,EAAAuuB,UA/iBA,gBAgjBqBL,MAMrB99D,KAAA,cAAAwmD,GACA5W,EAAAsd,KAAA,wBAAA1G,GACAuX,IACAx1D,EAAAwF,UAAAE,YAIA4T,EAAA2kC,GAEAyX,SAQA/E,EAAAx9D,UAAAyiE,UAAA,SAAA38C,GACAlW,EAAA,uCAAAkW,GACA1lB,KAAA29D,kBAAAj4C,IAAA,EACA1lB,KAAAu+D,UACAv+D,KAAAu+D,UAAAtkD,SAGAja,KAAAo+D,4BACAz0D,aAAA3J,KAAAo+D,2BACAp+D,KAAAo+D,0BAAA,MAEAp+D,KAAAg+D,YACAh+D,KAAAshE,0BAOAlE,EAAAx9D,UAAAqzB,OAAA,SAAAvN,GACAlW,EAAA,mCAAAkW,UACA1lB,KAAA29D,kBAAAj4C,GACAjZ,EAAAkQ,QAAA3c,KAAA29D,qBACA39D,KAAAi+D,gBAAAf,GACAl9D,KAAAu+D,WACAv+D,KAAA8+D,iBAAA,KAIA1B,EAAAx9D,UAAAqhE,iBAAA,SAAA3E,GACA,IAAAxP,EAAAwP,GAAA,IAAA3mD,MAAAC,UACA5V,KAAAu9D,oBAAA,CAAkC+E,iBAAAxV,KAElCsQ,EAAAx9D,UAAA2hE,wBAAA,WACA,QAAAj7D,EAAA,EAAuBA,EAAAtG,KAAA69D,iBAAAl5D,OAAkC2B,IAAA,CACzD,IAAAw2D,EAAA98D,KAAA69D,iBAAAv3D,GACAw2D,GAAA,MAAAA,EAAA37C,SAAA27C,EAAA6D,SACA7D,EAAA59B,YACA49B,EAAA59B,WAAA,qBACAl/B,KAAA69D,iBAAAv3D,GACAtG,KAAA89D,wBAIA,IAAA99D,KAAA89D,uBACA99D,KAAA69D,iBAAA,KAOAT,EAAAx9D,UAAAmhE,iBAAA,SAAAroC,EAAAsW,GAEA,IAAA8F,EAKAA,EAJA9F,EAIAA,EAAArgC,IAAA,SAAAqkB,GAA8C,OAAAuD,EAAAvD,KAA+Bxe,KAAA,KAH7E,UAKA,IAAA2qD,EAAAn/D,KAAAy/D,cAAA/mC,EAAAoc,GACAqqB,KAAAjgC,YACAigC,EAAAjgC,WAAA,sBAQAk+B,EAAAx9D,UAAA6/D,cAAA,SAAA/mC,EAAAoc,GACA,IACAqqB,EADAoD,EAAA,IAAAvqC,EAAAU,GAAAr0B,WAaA,YAXAtD,IAAAf,KAAA49D,SAAA2E,IACApD,EAAAn/D,KAAA49D,SAAA2E,GAAAztB,UACA90C,KAAA49D,SAAA2E,GAAAztB,GACA,IAAAroC,EAAA8P,SAAAvc,KAAA49D,SAAA2E,YACAviE,KAAA49D,SAAA2E,IAKApD,OAAAp+D,EAEAo+D,GAEA/B,EAAAx9D,UAAAwgE,eAAA,SAAAoC,EAAAC,GACAjzD,EAAA,uBAAAgzD,EAAA,IAAAC,GACAziE,KAAAw+D,WAAA,KACAx+D,KAAAy+D,oBAAA,EACAz+D,KAAAu+D,UAAAtkD,QACA,kBAAAuoD,GAAA,sBAAAA,IAIAxiE,KAAA0+D,yBACA1+D,KAAA0+D,wBAtqBA,IAwqBA1+D,KAAAi+D,gBA7qBA,IAgrBAj+D,KAAAw9D,mBAAA3R,2BAIAuR,EAAAx9D,UAAAohE,uBAAA,SAAA3gD,GACArgB,KAAAm+D,uBACAn+D,KAAAm+D,uBAAA99C,GAGA,QAAAA,GACA9Q,QAAAC,IAAA,aAAA6Q,EAAA,IAAAzJ,QAAA,uBAIAwmD,EAAAx9D,UAAAuhE,cAAA,WACA,IAAA9yD,EAAArO,KAEAA,KAAA6/D,UAGApzD,EAAAnH,QAAAtF,KAAA49D,SAAA,SAAAllC,EAAAuxB,GACAx9C,EAAAnH,QAAA2kD,EAAA,SAAAzlD,EAAA66D,GACAhxD,EAAAixD,YAAAD,OAGA,QAAA/4D,EAAA,EAAuBA,EAAAtG,KAAA69D,iBAAAl5D,OAAkC2B,IACzDtG,KAAA69D,iBAAAv3D,IACAtG,KAAA0gE,SAAAp6D,GAEA,KAAAtG,KAAA+9D,0BAAAp5D,QAAA,CACA,IAAAwc,EAAAnhB,KAAA+9D,0BAAAr8C,QACA1hB,KAAAwgE,kBAAAr/C,EAAA4hB,OAAA5hB,EAAAuX,WAAAvX,EAAA1K,KAAA0K,EAAA+d,cAOAk+B,EAAAx9D,UAAAshE,kBAAA,WACA,IAAAzT,EAAA,GACAiV,EAAA,KACAj2D,EAAAwF,UAAAE,WACAuwD,EAAA,aAEAj2D,EAAAwF,UAAAC,cACAwwD,EAAA,QAEAjV,EAAA,OAAAiV,EAAA,IAAAzyD,EAAAY,YAAA+F,QAAA,cACAnK,EAAAyO,kBACAuyC,EAAA,uBAEAhhD,EAAA6O,kBACAmyC,EAAA,4BAEAztD,KAAA4tD,YAAAH,IAMA2P,EAAAx9D,UAAA4hE,iBAAA,WACA,IAAAH,EAAA3R,GAAAD,cAAAG,kBACA,OAAAnjD,EAAAkQ,QAAA3c,KAAA29D,oBAAA0D,GAKAjE,EAAAM,4BAAA,EAMAN,EAAA2E,kBAAA,EACA3E,EA9uBA,CA+uBCP,IAuBD8F,GAAA,SAAA9qD,GAQA,SAAA8qD,EAAAtJ,EAAAgE,EAAAG,GACA,IAAAnvD,EAAAwJ,EAAArV,KAAAxC,YAaA,OAZAqO,EAAAgrD,YACAhrD,EAAAgvD,gBACAhvD,EAAAmvD,qBAEAnvD,EAAA+iD,KAAA57B,EAAA,WAOAnnB,EAAAuvD,SAAA,GACAvvD,EA+HA,OApJA2D,EAAAqG,UAAAsqD,EAAA9qD,GAuBA8qD,EAAA/iE,UAAAguD,YAAA,SAAAH,GACA,UAAA5mD,MAAA,4BAQA87D,EAAAC,aAAA,SAAA5zB,EAAA9hB,GACA,YAAAnsB,IAAAmsB,EACA,OAAAA,GAGAzgB,EAAA2F,OAAA48B,EAAAC,iBAAAob,YAAA,kDACArb,EAAAhV,KAAA31B,aAIAs+D,EAAA/iE,UAAAu/D,OAAA,SAAAnwB,EAAAowB,EAAAlyC,EAAAgS,GACA,IAAA7wB,EAAArO,KACA04B,EAAAsW,EAAAhV,KAAA31B,WACArE,KAAAoxD,KAAA,qBAAA14B,EAAA,IAAAsW,EAAAkE,mBAEA,IAAA2vB,EAAAF,EAAAC,aAAA5zB,EAAA9hB,GACA41C,EAAA,GACA9iE,KAAA49D,SAAAiF,GAAAC,EACA,IAAAC,EAAA/zB,EACAC,iBACA+zB,8BACAhjE,KAAAijE,aAAAvqC,EAAA,QAAAqqC,EAAA,SAAArY,EAAAvmD,GACA,IAAAsS,EAAAtS,GACA,MAAAumD,IACAj0C,EAAA,KACAi0C,EAAA,MAEA,OAAAA,GACAr8C,EAAAgvD,cAAA3kC,EAAAjiB,GAAA,EAAAyW,GAEAzgB,EAAAqQ,QAAAzO,EAAAuvD,SAAAiF,KAAAC,IAWA5jC,EATAwrB,EAGA,KAAAA,EACA,oBAGA,cAAAA,EANA,KAQA,SAKAiY,EAAA/iE,UAAAygE,SAAA,SAAArxB,EAAA9hB,GACA,IAAA21C,EAAAF,EAAAC,aAAA5zB,EAAA9hB,UACAltB,KAAA49D,SAAAiF,IAGAF,EAAA/iE,UAAAm9D,iBAAA,SAAA9lD,KAYA0rD,EAAA/iE,UAAAqjE,aAAA,SAAAvqC,EAAAqqC,EAAAn1D,GACA,IAAAS,EAAArO,UACA,IAAA+iE,IAA+CA,EAAA,IAC/CA,EAAA,gBACA/iE,KAAAw9D,mBACA9vD,UAAA,GACAxJ,KAAA,SAAAg/D,GACA,IAAAC,EAAAD,KAAAd,YACAe,IACAJ,EAAA,KAAAI,GAEA,IAAAviD,GAAAvS,EAAAgrD,UAAAx+B,OAAA,sBACAxsB,EAAAgrD,UAAAz+B,KACAlC,EACA,OAEArqB,EAAAgrD,UAAAhpD,UACA5D,EAAAsQ,YAAAgmD,GACA10D,EAAA+iD,KAAA,4BAAAxwC,GACA,IAAAQ,EAAA,IAAAC,eACAD,EAAA0H,mBAAA,WACA,GAAAlb,GAAA,IAAAwT,EAAA2wC,WAAA,CACA1jD,EAAA+iD,KAAA,qBAAAxwC,EAAA,qBAAAQ,EAAAX,OAAA,YAAAW,EAAAS,cACA,IAAAnF,EAAA,KACA,GAAA0E,EAAAX,QAAA,KAAAW,EAAAX,OAAA,KACA,IACA/D,EAAAjQ,EAAAoK,SAAAuK,EAAAS,cAEA,MAAA3hB,GACA6lB,EAAA,qCACAnF,EACA,KACAQ,EAAAS,cAEAjU,EAAA,KAAA8O,QAIA,MAAA0E,EAAAX,QAAA,MAAAW,EAAAX,QACAsF,EAAA,sCACAnF,EACA,YACAQ,EAAAX,QAEA7S,EAAAwT,EAAAX,QAEA7S,EAAA,OAGAwT,EAAAY,KAAA,MAAApB,GAAA,GACAQ,EAAAiB,UAGAsgD,EArJA,CAsJC9F,IAsBDuG,GAAA,WAMA,SAAAA,EAAA/J,EAAAgK,EAAA3yD,GACA,IAAArC,EAAArO,KACAA,KAAAq5D,YACAr5D,KAAA0Q,MACA1Q,KAAAsjE,gBAAA,EACAtjE,KAAAstD,eAAA,KACAttD,KAAAujE,YAAA,IAAA1V,GACA7tD,KAAAwjE,aAAA,EACAxjE,KAAAyjE,6BAAA,KAEAzjE,KAAA0xD,cAAA,IAAAhe,GAKA1zC,KAAA0jE,sBAAA,KAEA,IAAAC,EAAA,IAAAnY,GAAA96C,GAEA,GADA1Q,KAAAqxD,OAAAlF,GAAAC,cAAAiN,GACAgK,GAAAxrC,IACA73B,KAAAotD,QAAA,IAAAuV,GAAA3iE,KAAAq5D,UAAAr5D,KAAAq9D,cAAAnuD,KAAAlP,MAAA2jE,GAEAj6D,WAAA1J,KAAAs9D,iBAAApuD,KAAAlP,MAAA,UAEA,CACA,IAAA4jE,EAAAlzD,EAAA5D,QAAA,6BAEA,SAAA82D,EAAA,CACA,oBAAAA,EACA,UAAA/8D,MAAA,sEAEA,IACA4F,EAAAgP,UAAAmoD,GAEA,MAAA1jE,GACA,UAAA2G,MAAA,kCAAA3G,IAGAF,KAAA0jE,sBAAA,IAAAtG,GAAAp9D,KAAAq5D,UAAAr5D,KAAAq9D,cAAAnuD,KAAAlP,WAAAs9D,iBAAApuD,KAAAlP,WAAAu9D,oBAAAruD,KAAAlP,MAAA2jE,EAAAC,GACA5jE,KAAAotD,QAAAptD,KAAA0jE,sBAEAC,EAAAhY,uBAAA,SAAA10C,GACA5I,EAAA++C,QAAA2P,iBAAA9lD,KAIAjX,KAAA6jE,eAAA1X,GAAAI,oBAAA8M,EAAA,WAAuF,WAAAnM,GAAA7+C,EAAAgjD,OAAAhjD,EAAA++C,WACvFptD,KAAA8jE,qBAEA9jE,KAAA+jE,UAAA,IAAA3Y,GACAprD,KAAAgkE,cAAA,IAAApd,GAAA,CACAyC,eAAA,SAAAra,EAAA9hB,EAAAkyC,EAAAlgC,GACA,IAAA+kC,EAAA,GACA/jC,EAAA7xB,EAAA01D,UAAA7rB,QAAAlJ,EAAAhV,MASA,OANAkG,EAAAvjB,YACAsnD,EAAA51D,EAAA21D,cAAAxc,qBAAAxY,EAAAhV,KAAAkG,GACAx2B,WAAA,WACAw1B,EAAA,OACqB,IAErB+kC,GAEAxa,cAAA,eAEAzpD,KAAAkkE,YAAA,gBACAlkE,KAAAmkE,gBAAA,IAAAvd,GAAA,CACAyC,eAAA,SAAAra,EAAA9hB,EAAAkyC,EAAAlgC,GAMA,OALA7wB,EAAA++C,QAAA+R,OAAAnwB,EAAAowB,EAAAlyC,EAAA,SAAAzM,EAAAhK,GACA,IAAAwpC,EAAA/gB,EAAAze,EAAAhK,GACApI,EAAAk1D,YAAAhV,0BAAAvf,EAAAhV,KAAAimB,KAGA,IAEAwJ,cAAA,SAAAza,EAAA9hB,GACA7e,EAAA++C,QAAAiT,SAAArxB,EAAA9hB,MAkZA,OA3YAk2C,EAAAxjE,UAAAyE,SAAA,WACA,OAAArE,KAAAq5D,UAAAx+B,OAAA,sBAAA76B,KAAAq5D,UAAAz+B,MAKAwoC,EAAAxjE,UAAAc,KAAA,WACA,OAAAV,KAAAq5D,UAAAhpD,WAKA+yD,EAAAxjE,UAAAwkE,WAAA,WACA,IACAC,EADArkE,KAAA+jE,UAAA7rB,QAAA,IAAAlgB,EAAA,2BACA9pB,OAAA,EACA,WAAAyH,MAAAC,UAAAyuD,GAMAjB,EAAAxjE,UAAA0kE,qBAAA,WACA,OA7sOA/hE,GADAA,EA8sOA,CACA+5D,UAAAt8D,KAAAokE,gBA9sOA,IACA,UAAA7hE,EAAA,gBAAAoT,MAAAC,UACArT,EAHA,IAAAA,GA2tOA6gE,EAAAxjE,UAAAy9D,cAAA,SAAA3kC,EAAAjiB,EAAA8tD,EAAAr3C,GAEAltB,KAAAsjE,kBACA,IAAAtpC,EAAA,IAAAhC,EAAAU,GACAjiB,EAAAzW,KAAAyjE,6BACAzjE,KAAAyjE,6BAAA/qC,EAAAjiB,GACAA,EACA,IAAAwpC,EAAA,GACA,GAAA/yB,EACA,GAAAq3C,EAAA,CACA,IAAAC,EAAA/3D,EAAAkC,IAAA8H,EAAA,SAAA4c,GACA,OAAA2Y,GAAA3Y,KAEA4sB,EAAAjgD,KAAAmkE,gBAAAlc,sBAAAjuB,EAAAwqC,EAAAt3C,OAEA,CACA,IAAAu3C,EAAAz4B,GAAAv1B,GACAwpC,EAAAjgD,KAAAmkE,gBAAAxc,0BAAA3tB,EAAAyqC,EAAAv3C,QAGA,GAAAq3C,EAAA,CACA,IAAA5lB,EAAAlyC,EAAAkC,IAAA8H,EAAA,SAAA4c,GACA,OAAA2Y,GAAA3Y,KAEA4sB,EAAAjgD,KAAAmkE,gBAAA1c,iBAAAztB,EAAA2kB,OAEA,CACA,IAAAzR,EAAAlB,GAAAv1B,GACAwpC,EAAAjgD,KAAAmkE,gBAAA3c,qBAAAxtB,EAAAkT,GAEA,IAAA4M,EAAA9f,EACAimB,EAAAt7C,OAAA,IAGAm1C,EAAA95C,KAAA0kE,mBAAA1qC,IAEAh6B,KAAAujE,YAAAhV,0BAAAzU,EAAAmG,IAOAmjB,EAAAxjE,UAAA+kE,qBAAA,SAAA/2D,GACA5N,KAAAyjE,6BAAA71D,GAMAw1D,EAAAxjE,UAAA09D,iBAAA,SAAAsH,GACA5kE,KAAAkkE,YAAA,YAAAU,IACA,IAAAA,GACA5kE,KAAA6kE,0BAOAzB,EAAAxjE,UAAA29D,oBAAA,SAAAha,GACA,IAAAl1C,EAAArO,KACA62B,EAAA0sB,EAAA,SAAAziD,EAAA0D,GACA6J,EAAA61D,YAAA1/D,EAAA1D,MASAsiE,EAAAxjE,UAAAskE,YAAA,SAAAxrC,EAAA53B,GACA,IAAAk5B,EAAA,IAAAhC,EAAA,UAAAU,GACA+H,EAAAuL,GAAAlrC,GACAd,KAAA+jE,UAAAzY,eAAAtxB,EAAAyG,GACA,IAAAwf,EAAAjgD,KAAAgkE,cAAAxc,qBAAAxtB,EAAAyG,GACAzgC,KAAAujE,YAAAhV,0BAAAv0B,EAAAimB,IAMAmjB,EAAAxjE,UAAAklE,gBAAA,WACA,OAAA9kE,KAAAwjE,gBAQAJ,EAAAxjE,UAAAy/B,gBAAA,SAAArF,EAAA+qC,EAAA16B,EAAAnL,GACA,IAAA7wB,EAAArO,KACAA,KAAAoxD,KAAA,OACAp3B,OAAA31B,WACAvD,MAAAikE,EACAnnC,SAAAyM,IAIA,IAAA+J,EAAAp0C,KAAAskE,uBACAU,EAAAh5B,GAAA+4B,EAAA16B,GACA5J,EAAA4T,GAAA2wB,EAAA5wB,GACAqQ,EAAAzkD,KAAA8kE,kBACA7kB,EAAAjgD,KAAAmkE,gBAAAjd,mBAAAltB,EAAAyG,EAAAgkB,GAAA,GACAzkD,KAAAujE,YAAAvV,YAAA/N,GACAjgD,KAAAotD,QAAA0P,IAAA9iC,EAAA31B,WAAA2gE,EAAA92D,KAAA,YAAAuS,EAAAmgD,GACA,IAAAqE,EAAA,OAAAxkD,EACAwkD,GACAl/C,EAAA,UAAAiU,EAAA,YAAAvZ,GAEA,IAAAykD,EAAA72D,EAAA81D,gBAAAvnB,aAAA6H,GAAAwgB,GACA52D,EAAAk1D,YAAAhV,0BAAAv0B,EAAAkrC,GACA72D,EAAA82D,uBAAAjmC,EAAAze,EAAAmgD,KAEA,IAAA9mB,EAAA95C,KAAAolE,mBAAAprC,GACAh6B,KAAA0kE,mBAAA5qB,GAEA95C,KAAAujE,YAAAhV,0BAAAzU,EAAA,KAOAspB,EAAAxjE,UAAAmZ,OAAA,SAAAihB,EAAAqrC,EAAAnmC,GACA,IAAA7wB,EAAArO,KACAA,KAAAoxD,KAAA,UAA6Bp3B,OAAA31B,WAAAvD,MAAAukE,IAE7B,IAAAC,GAAA,EACAlxB,EAAAp0C,KAAAskE,uBACA3lB,EAAA,GAMA,GALAlyC,EAAAnH,QAAA+/D,EAAA,SAAAE,EAAAC,GACAF,GAAA,EACA,IAAAN,EAAAh5B,GAAAw5B,GACA7mB,EAAA4mB,GAAAlxB,GAAA2wB,EAAA5wB,KAEAkxB,EAsBA91D,EAAA,wDACAxP,KAAAmlE,uBAAAjmC,EAAA,UAvBA,CACA,IAAAumC,EAAAzlE,KAAA8kE,kBACA7kB,EAAAjgD,KAAAmkE,gBAAA9c,eAAArtB,EAAA2kB,EAAA8mB,GACAzlE,KAAAujE,YAAAvV,YAAA/N,GACAjgD,KAAAotD,QAAA3Q,MAAAziB,EAAA31B,WAAAghE,EAAA,SAAA5kD,EAAAmgD,GACA,IAAAqE,EAAA,OAAAxkD,EACAwkD,GACAl/C,EAAA,aAAAiU,EAAA,YAAAvZ,GAEA,IAAAykD,EAAA72D,EAAA81D,gBAAAvnB,aAAA6oB,GAAAR,GACAnrB,EAAAorB,EAAAvgE,OAAA,EAAA0J,EAAAq2D,mBAAA1qC,KACA3rB,EAAAk1D,YAAAhV,0BAAAzU,EAAAorB,GACA72D,EAAA82D,uBAAAjmC,EAAAze,EAAAmgD,KAEAn0D,EAAAnH,QAAA+/D,EAAA,SAAA7W,GACA,IAAA1U,EAAAzrC,EAAA+2D,mBAAAprC,EAAAjB,MAAAy1B,IACAngD,EAAAq2D,mBAAA5qB,KAGA95C,KAAAujE,YAAAhV,0BAAAv0B,EAAA,MAWAopC,EAAAxjE,UAAAilE,uBAAA,WACA,IAAAx2D,EAAArO,KACAA,KAAAoxD,KAAA,sBACA,IAAAhd,EAAAp0C,KAAAskE,uBACAoB,EA32OA,SAAA3xB,EAAAK,GACA,IAAAuxB,EAAA,IAAAjyB,GAIA,OAHAK,EAAAC,YAAA,IAAAhc,EAAA,aAAAgC,EAAAkG,GACAylC,EAAA/xB,SAAA5Z,EAAAqa,GAAAnU,EAAAkU,MAEAuxB,EAs2OAC,CAAA5lE,KAAA0xD,cAAAtd,GACA6L,EAAA,GACAylB,EAAA1xB,YAAAhc,EAAA0d,MAAA,SAAA1b,EAAAkT,GACA+S,IAAAh2C,OAAAoE,EAAA81D,gBAAA3c,qBAAAxtB,EAAAkT,IACA,IAAA4M,EAAAzrC,EAAA+2D,mBAAAprC,GACA3rB,EAAAq2D,mBAAA5qB,KAEA95C,KAAA0xD,cAAA,IAAAhe,GACA1zC,KAAAujE,YAAAhV,0BAAAv2B,EAAA0d,MAAAuK,IAMAmjB,EAAAxjE,UAAAu/B,mBAAA,SAAAnF,EAAAkF,GACA,IAAA7wB,EAAArO,KACAA,KAAAotD,QAAAjuB,mBAAAnF,EAAA31B,WAAA,SAAAoc,EAAAmgD,GACA,OAAAngD,GACApS,EAAAqjD,cAAA7d,OAAA7Z,GAEA3rB,EAAA82D,uBAAAjmC,EAAAze,EAAAmgD,MAQAwC,EAAAxjE,UAAAw/B,gBAAA,SAAApF,EAAAl5B,EAAAo+B,GACA,IAAA7wB,EAAArO,KACAygC,EAAAuL,GAAAlrC,GACAd,KAAAotD,QAAA4P,gBAAAhjC,EAAA31B,WAAAo8B,EAAAvyB,KAAA,YAAAuS,EAAAmgD,GACA,OAAAngD,GACApS,EAAAqjD,cAAA9d,SAAA5Z,EAAAyG,GAEApyB,EAAA82D,uBAAAjmC,EAAAze,EAAAmgD,MASAwC,EAAAxjE,UAAA0/B,4BAAA,SAAAtF,EAAAl5B,EAAA88B,EAAAsB,GACA,IAAA7wB,EAAArO,KACAygC,EAAAuL,GAAAlrC,EAAA88B,GACA59B,KAAAotD,QAAA4P,gBAAAhjC,EAAA31B,WAAAo8B,EAAAvyB,KAAA,YAAAuS,EAAAmgD,GACA,OAAAngD,GACApS,EAAAqjD,cAAA9d,SAAA5Z,EAAAyG,GAEApyB,EAAA82D,uBAAAjmC,EAAAze,EAAAmgD,MAQAwC,EAAAxjE,UAAA6/B,mBAAA,SAAAzF,EAAAqrC,EAAAnmC,GACA,IAAA7wB,EAAArO,KACA,GAAAyM,EAAAkQ,QAAA0oD,GAGA,OAFA71D,EAAA,4EACAxP,KAAAmlE,uBAAAjmC,EAAA,MAGAl/B,KAAAotD,QAAA6P,kBAAAjjC,EAAA31B,WAAAghE,EAAA,SAAA5kD,EAAAmgD,GACA,OAAAngD,GACAhU,EAAAnH,QAAA+/D,EAAA,SAAAjjC,EAAAI,GACA,IAAAE,EAAAsJ,GAAAxJ,GACAn0B,EAAAqjD,cAAA9d,SAAA5Z,EAAAjB,MAAAqJ,GAAAM,KAGAr0B,EAAA82D,uBAAAjmC,EAAAze,EAAAmgD,MAOAwC,EAAAxjE,UAAAiyC,yBAAA,SAAA7C,EAAAd,GACA,IAAA+R,EAEAA,EADA,UAAAjR,EAAAhV,KAAA1B,WACAt4B,KAAAgkE,cAAAviB,qBAAAzS,EAAAd,GAGAluC,KAAAmkE,gBAAA1iB,qBAAAzS,EAAAd,GAEAluC,KAAAujE,YAAAlV,kBAAArf,EAAAhV,KAAAimB,IAMAmjB,EAAAxjE,UAAAkyC,4BAAA,SAAA9C,EAAAd,GAGA,IAAA+R,EAEAA,EADA,UAAAjR,EAAAhV,KAAA1B,WACAt4B,KAAAgkE,cAAAtiB,wBAAA1S,EAAAd,GAGAluC,KAAAmkE,gBAAAziB,wBAAA1S,EAAAd,GAEAluC,KAAAujE,YAAAlV,kBAAArf,EAAAhV,KAAAimB,IAEAmjB,EAAAxjE,UAAAyiE,UAAA,WACAriE,KAAA0jE,uBACA1jE,KAAA0jE,sBAAArB,UAzZA,mBA4ZAe,EAAAxjE,UAAAqzB,OAAA,WACAjzB,KAAA0jE,uBACA1jE,KAAA0jE,sBAAAzwC,OA9ZA,mBAiaAmwC,EAAAxjE,UAAA6tD,MAAA,SAAAoY,GAEA,QADA,IAAAA,IAAmCA,GAAA,GACnC,oBAAAt2D,QAAA,CAEA,IAAAk+C,EACAoY,GACA7lE,KAAAstD,iBACAttD,KAAAstD,eAAA,IAAAZ,GAAA1sD,KAAAqxD,SACA5D,EAAAztD,KAAAstD,eAAAvtD,OAGA0tD,EAAAztD,KAAAqxD,OAAAtxD,MAEA,IAAA+lE,EAAA7kE,OAAAqD,KAAAmpD,GAAAsY,OAAA,SAAAC,EAAAC,GACA,OAAAhqD,KAAAme,IAAA6rC,EAAAthE,OAAAqhE,IACS,GACTv5D,EAAAnH,QAAAmoD,EAAA,SAAAV,EAAAjsD,GAEA,QAAAwF,EAAAymD,EAAApoD,OAAqC2B,EAAAw/D,EAAA,EAAqBx/D,IAC1DymD,GAAA,IACAx9C,QAAAC,IAAAu9C,EAAAjsD,OAGAsiE,EAAAxjE,UAAAsmE,sBAAA,SAAAC,GACAnmE,KAAAqxD,OAAApF,iBAAAka,GACAnmE,KAAA6jE,eAAArW,YAAA2Y,IAMA/C,EAAAxjE,UAAAwxD,KAAA,WAEA,IADA,IAAAr8B,EAAA,GACAzjB,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/CyjB,EAAAzjB,GAAAxG,UAAAwG,GAEA,IAAAmkB,EAAA,GACAz1B,KAAA0jE,wBACAjuC,EAAAz1B,KAAA0jE,sBAAAv9C,GAAA,KAEA3W,EAAAzE,WAAA,GAAA0qB,GAAAxrB,OAAA8qB,KAOAquC,EAAAxjE,UAAAulE,uBAAA,SAAAv3D,EAAA6S,EAAAmgD,GACAhzD,GACAgqB,EAAA,WACA,SAAAnX,EACA7S,EAAA,UAEA,CACA,IAAAyB,GAAAoR,GAAA,SAAA0D,cACA7R,EAAAjD,EACAuxD,IACAtuD,GAAA,KAAAsuD,GACA,IAAAlW,EAAA,IAAA7jD,MAAAyL,GACAo4C,EAAAr7C,OACAzB,EAAA88C,OAKAzpD,OAAAT,eAAA4iE,EAAAxjE,UAAA,YACAG,IAAA,WACA,OAAAC,KAAAomE,aAAApmE,KAAAomE,WAAA,IAAAC,GAAArmE,QAEAmO,YAAA,EACArO,cAAA,IAEAsjE,EAreA,GA8fAkD,GAAA,WAIA,SAAAA,EAAArpD,GACAjd,KAAAumE,eAAA,IAAA1sB,GAAA58B,EAAAiyB,YACAlvC,KAAAwtC,OAAAvwB,EAAAiyB,WACAlvC,KAAAwmE,WAAAF,EAAAG,cAAAxpD,GACAjd,KAAA0mE,SAAAJ,EAAAK,YAAA1pD,GAuGA,OAlGAqpD,EAAA1mE,UAAAgnE,aAAA,WACA,OAAA5mE,KAAAwmE,YAKAF,EAAA1mE,UAAAinE,WAAA,WACA,OAAA7mE,KAAA0mE,UAMAJ,EAAA1mE,UAAA6vC,QAAA,SAAAvP,GACA,OAAAlgC,KAAAwtC,OAAAlN,QAAAtgC,KAAA4mE,eAAA1mC,IAAA,GACAlgC,KAAAwtC,OAAAlN,QAAAJ,EAAAlgC,KAAA6mE,eAAA,GAKAP,EAAA1mE,UAAA+iC,YAAA,SAAAuK,EAAA1oC,EAAA4xC,EAAA0D,EAAApkC,EAAAqkC,GAIA,OAHA/5C,KAAAyvC,QAAA,IAAAxP,GAAAz7B,EAAA4xC,MACAA,EAAAnM,GAAAlI,YAEA/hC,KAAAumE,eAAA5jC,YAAAuK,EAAA1oC,EAAA4xC,EAAA0D,EAAApkC,EAAAqkC,IAKAusB,EAAA1mE,UAAAs6C,eAAA,SAAAlB,EAAAmB,EAAAJ,GACAI,EAAAzY,eAEAyY,EAAAlQ,GAAAlI,YAEA,IAAAyW,EAAA2B,EAAArW,UAAA9jC,KAAAwtC,QAEAgL,IAAAvW,eAAAgI,GAAAlI,YACA,IAAAj+B,EAAA9D,KAMA,OALAm6C,EAAArX,aAAAmB,GAAA,SAAAz/B,EAAAg+B,GACA1+B,EAAA2rC,QAAA,IAAAxP,GAAAz7B,EAAAg+B,MACAgW,IAAA/V,qBAAAj+B,EAAAylC,GAAAlI,eAGA/hC,KAAAumE,eAAArsB,eAAAlB,EAAAR,EAAAuB,IAKAusB,EAAA1mE,UAAAqiC,eAAA,SAAA+W,EAAA3O,GAEA,OAAA2O,GAKAstB,EAAA1mE,UAAAw6C,aAAA,WACA,UAKAksB,EAAA1mE,UAAAy6C,iBAAA,WACA,OAAAr6C,KAAAumE,gBAKAD,EAAA1mE,UAAAsvC,SAAA,WACA,OAAAlvC,KAAAwtC,QAOA84B,EAAAG,cAAA,SAAAxpD,GACA,GAAAA,EAAAyzB,WAAA,CACA,IAAAo2B,EAAA7pD,EAAA+zB,oBACA,OAAA/zB,EAAAiyB,WAAAjO,SAAAhkB,EAAA0zB,qBAAAm2B,GAGA,OAAA7pD,EAAAiyB,WAAAtO,WAQA0lC,EAAAK,YAAA,SAAA1pD,GACA,GAAAA,EAAA2zB,SAAA,CACA,IAAAm2B,EAAA9pD,EAAAg0B,kBACA,OAAAh0B,EAAAiyB,WAAAjO,SAAAhkB,EAAA4zB,mBAAAk2B,GAGA,OAAA9pD,EAAAiyB,WAAAlO,WAGAslC,EA/GA,GAwIAU,GAAA,WAIA,SAAAA,EAAA/pD,GACAjd,KAAAinE,cAAA,IAAAX,GAAArpD,GACAjd,KAAAwtC,OAAAvwB,EAAAiyB,WACAlvC,KAAAknE,OAAAjqD,EAAAkqD,WACAnnE,KAAAonE,UAAAnqD,EAAAoqD,iBA0NA,OArNAL,EAAApnE,UAAA+iC,YAAA,SAAAuK,EAAA1oC,EAAA4xC,EAAA0D,EAAApkC,EAAAqkC,GAIA,OAHA/5C,KAAAinE,cAAAx3B,QAAA,IAAAxP,GAAAz7B,EAAA4xC,MACAA,EAAAnM,GAAAlI,YAEAmL,EAAA/K,kBAAA39B,GAAAq1B,OAAAuc,GAEAlJ,EAEAA,EAAArK,cAAA7iC,KAAAknE,OACAlnE,KAAAinE,cACA5sB,mBACA1X,YAAAuK,EAAA1oC,EAAA4xC,EAAA0D,EAAApkC,EAAAqkC,GAGA/5C,KAAAsnE,sBAAAp6B,EAAA1oC,EAAA4xC,EAAA1gC,EAAAqkC,IAMAitB,EAAApnE,UAAAs6C,eAAA,SAAAlB,EAAAmB,EAAAJ,GACA,IAAAvB,EACA,GAAA2B,EAAAzY,cAAAyY,EAAAx9B,UAEA67B,EAAAvO,GAAAlI,WAAA+B,UAAA9jC,KAAAwtC,aAGA,KAAAxtC,KAAAknE,OAAA/sB,EAAAtX,eACAsX,EAAApW,UAAA/jC,KAAAwtC,QAAA,CAEAgL,EAAAvO,GAAAlI,WAAA+B,UAAA9jC,KAAAwtC,QAEA,IAAAnsC,OAAA,EAEAA,EADArB,KAAAonE,SACAjtB,EAAAlT,uBAAAjnC,KAAAinE,cAAAJ,aAAA7mE,KAAAwtC,QAGA2M,EAAAnT,gBAAAhnC,KAAAinE,cAAAL,eAAA5mE,KAAAwtC,QAGA,IADA,IAAA/iB,EAAA,EACAppB,EAAAwjC,WAAApa,EAAAzqB,KAAAknE,QAAA,CACA,IAAAjjE,EAAA5C,EAAAujC,UAUA,KARA5kC,KAAAonE,SAEApnE,KAAAwtC,OAAAlN,QAAAtgC,KAAAinE,cAAAL,eAAA3iE,IAAA,EAIAjE,KAAAwtC,OAAAlN,QAAAr8B,EAAAjE,KAAAinE,cAAAJ,eAAA,GAQA,MALAruB,IAAA/V,qBAAAx+B,EAAAvD,KAAAuD,EAAAi8B,MACAzV,SAQA,CAIA+tB,GAFAA,EAAA2B,EAAArW,UAAA9jC,KAAAwtC,SAEAvL,eAAAgI,GAAAlI,YACA,IAAAqJ,OAAA,EACAC,OAAA,EACAzR,OAAA,EACAv4B,OAAA,EACA,GAAArB,KAAAonE,SAAA,CACA/lE,EAAAm3C,EAAAtR,mBAAAlnC,KAAAwtC,QACApC,EAAAprC,KAAAinE,cAAAJ,aACAx7B,EAAArrC,KAAAinE,cAAAL,eACA,IAAAW,EAAAvnE,KAAAwtC,OAAAnN,aACAzG,EAAA,SAAAhhB,EAAAC,GAA2C,OAAA0uD,EAAA1uD,EAAAD,SAG3CvX,EAAAm3C,EAAA1R,YAAA9mC,KAAAwtC,QACApC,EAAAprC,KAAAinE,cAAAL,eACAv7B,EAAArrC,KAAAinE,cAAAJ,aACAjtC,EAAA55B,KAAAwtC,OAAAnN,aAEA5V,EAAA,EAEA,IAFA,IACA+8C,GAAA,EACAnmE,EAAAwjC,WAAA,CACA5gC,EAAA5C,EAAAujC,WACA4iC,GAAA5tC,EAAAwR,EAAAnnC,IAAA,IAEAujE,GAAA,GAEAA,GAAA/8C,EAAAzqB,KAAAknE,QAAAttC,EAAA31B,EAAAonC,IAAA,EAEA5gB,IAGA+tB,IAAA/V,qBAAAx+B,EAAAvD,KAAAupC,GAAAlI,aAKA,OAAA/hC,KAAAinE,cACA5sB,mBACAH,eAAAlB,EAAAR,EAAAuB,IAKAitB,EAAApnE,UAAAqiC,eAAA,SAAA+W,EAAA3O,GAEA,OAAA2O,GAKAguB,EAAApnE,UAAAw6C,aAAA,WACA,UAKA4sB,EAAApnE,UAAAy6C,iBAAA,WACA,OAAAr6C,KAAAinE,cAAA5sB,oBAKA2sB,EAAApnE,UAAAsvC,SAAA,WACA,OAAAlvC,KAAAwtC,QAWAw5B,EAAApnE,UAAA0nE,sBAAA,SAAAp6B,EAAAyG,EAAAmC,EAAApgC,EAAA+xD,GAEA,IAAA7tC,EACA,GAAA55B,KAAAonE,SAAA,CACA,IAAAM,EAAA1nE,KAAAwtC,OAAAnN,aACAzG,EAAA,SAAAhhB,EAAAC,GAAmC,OAAA6uD,EAAA7uD,EAAAD,SAGnCghB,EAAA55B,KAAAwtC,OAAAnN,aAEA,IAAAqf,EAAAxS,EACAzgC,EAAA2F,OAAAstC,EAAA7c,eAAA7iC,KAAAknE,OAAA,IACA,IAAAS,EAAA,IAAA1nC,GAAA0T,EAAAmC,GACA8xB,EAAA5nE,KAAAonE,SACA1nB,EAAA1U,cAAAhrC,KAAAwtC,QACAkS,EAAAxU,aAAAlrC,KAAAwtC,QACAq6B,EAAA7nE,KAAAinE,cAAAx3B,QAAAk4B,GACA,GAAAjoB,EAAApd,SAAAqR,GAAA,CAGA,IAFA,IAAAm0B,EAAApoB,EAAAvd,kBAAAwR,GACAmD,EAAAphC,EAAAolC,mBAAA96C,KAAAwtC,OAAAo6B,EAAA5nE,KAAAonE,UACA,MAAAtwB,IACAA,EAAAp2C,MAAAizC,GAAA+L,EAAApd,SAAAwU,EAAAp2C,QAIAo2C,EAAAphC,EAAAolC,mBAAA96C,KAAAwtC,OAAAsJ,EAAA92C,KAAAonE,UAEA,IAAAW,EAAA,MAAAjxB,EAAA,EAAAld,EAAAkd,EAAA6wB,GAEA,GADAE,IAAA/xB,EAAAn5B,WAAAorD,GAAA,EAKA,OAHA,MAAAN,GACAA,EAAAxtB,iBAAAlB,GAAAQ,mBAAA5F,EAAAmC,EAAAgyB,IAEApoB,EAAAjd,qBAAAkR,EAAAmC,GAGA,MAAA2xB,GACAA,EAAAxtB,iBAAAlB,GAAAM,mBAAA1F,EAAAm0B,IAEA,IAAAvqB,EAAAmC,EAAAjd,qBAAAkR,EAAA1J,GAAAlI,YAEA,OADA,MAAA+U,GAAA92C,KAAAinE,cAAAx3B,QAAAqH,IAEA,MAAA2wB,GACAA,EAAAxtB,iBAAAlB,GAAAI,iBAAArC,EAAAp2C,KAAAo2C,EAAA5W,OAEAqd,EAAA9a,qBAAAqU,EAAAp2C,KAAAo2C,EAAA5W,OAGAqd,EAIA,OAAAzH,EAAAn5B,UAEAuwB,EAEA26B,GACAjuC,EAAAguC,EAAAD,IAAA,GACA,MAAAF,IACAA,EAAAxtB,iBAAAlB,GAAAM,mBAAAuuB,EAAAlnE,KAAAknE,EAAA1nC,OACAunC,EAAAxtB,iBAAAlB,GAAAI,iBAAAxF,EAAAmC,KAEA4J,EACAjd,qBAAAkR,EAAAmC,GACArT,qBAAAmlC,EAAAlnE,KAAAupC,GAAAlI,aAOAmL,GAGA85B,EAlOA,GA2PAgB,GAAA,WACA,SAAAA,IACAhoE,KAAAioE,WAAA,EACAjoE,KAAAkoE,WAAA,EACAloE,KAAAmoE,eAAA,EACAnoE,KAAAooE,SAAA,EACApoE,KAAAqoE,aAAA,EACAroE,KAAAknE,OAAA,EACAlnE,KAAAsoE,UAAA,GACAtoE,KAAAuoE,iBAAA,KACAvoE,KAAAwoE,gBAAA,GACAxoE,KAAAyoE,eAAA,KACAzoE,KAAA0oE,cAAA,GACA1oE,KAAAwtC,OAAAvJ,GAmWA,OA9VA+jC,EAAApoE,UAAA8wC,SAAA,WACA,OAAA1wC,KAAAkoE,WAKAF,EAAApoE,UAAAynE,eAAA,WACA,WAAArnE,KAAAsoE,UAKAtoE,KAAAkoE,UAGAloE,KAAAsoE,YAAAN,EAAAW,yBAAAC,gBAOAZ,EAAApoE,UAAA+wC,mBAAA,WAEA,OADAlkC,EAAA2F,OAAApS,KAAAkoE,UAAA,oCACAloE,KAAAuoE,kBAOAP,EAAApoE,UAAAoxC,kBAAA,WAEA,OADAvkC,EAAA2F,OAAApS,KAAAkoE,UAAA,oCACAloE,KAAAmoE,cACAnoE,KAAAwoE,gBAGAzyC,GAMAiyC,EAAApoE,UAAAgxC,OAAA,WACA,OAAA5wC,KAAAooE,SAMAJ,EAAApoE,UAAAixC,iBAAA,WAEA,OADApkC,EAAA2F,OAAApS,KAAAooE,QAAA,kCACApoE,KAAAyoE,gBAOAT,EAAApoE,UAAAqxC,gBAAA,WAEA,OADAxkC,EAAA2F,OAAApS,KAAAooE,QAAA,kCACApoE,KAAAqoE,YACAroE,KAAA0oE,cAGA1yC,GAMAgyC,EAAApoE,UAAAuxC,SAAA,WACA,OAAAnxC,KAAAioE,WAKAD,EAAApoE,UAAAwxC,iBAAA,WACA,OAAApxC,KAAAioE,WAAA,KAAAjoE,KAAAsoE,WAMAN,EAAApoE,UAAAunE,SAAA,WAEA,OADA16D,EAAA2F,OAAApS,KAAAioE,UAAA,oCACAjoE,KAAAknE,QAKAc,EAAApoE,UAAAsvC,SAAA,WACA,OAAAlvC,KAAAwtC,QAMAw6B,EAAApoE,UAAAipE,MAAA,WACA,IAAA1jC,EAAA,IAAA6iC,EAaA,OAZA7iC,EAAA8iC,UAAAjoE,KAAAioE,UACA9iC,EAAA+hC,OAAAlnE,KAAAknE,OACA/hC,EAAA+iC,UAAAloE,KAAAkoE,UACA/iC,EAAAojC,iBAAAvoE,KAAAuoE,iBACApjC,EAAAgjC,cAAAnoE,KAAAmoE,cACAhjC,EAAAqjC,gBAAAxoE,KAAAwoE,gBACArjC,EAAAijC,QAAApoE,KAAAooE,QACAjjC,EAAAsjC,eAAAzoE,KAAAyoE,eACAtjC,EAAAkjC,YAAAroE,KAAAqoE,YACAljC,EAAAujC,cAAA1oE,KAAA0oE,cACAvjC,EAAAqI,OAAAxtC,KAAAwtC,OACArI,EAAAmjC,UAAAtoE,KAAAsoE,UACAnjC,GAMA6iC,EAAApoE,UAAAwyC,MAAA,SAAA02B,GACA,IAAAt2B,EAAAxyC,KAAA6oE,QAIA,OAHAr2B,EAAAy1B,WAAA,EACAz1B,EAAA00B,OAAA4B,EACAt2B,EAAA81B,UAAA,GACA91B,GAMAw1B,EAAApoE,UAAAuyC,aAAA,SAAA22B,GACA,IAAAt2B,EAAAxyC,KAAA6oE,QAIA,OAHAr2B,EAAAy1B,WAAA,EACAz1B,EAAA00B,OAAA4B,EACAt2B,EAAA81B,UAAAN,EAAAW,yBAAAC,eACAp2B,GAMAw1B,EAAApoE,UAAAyyC,YAAA,SAAAy2B,GACA,IAAAt2B,EAAAxyC,KAAA6oE,QAIA,OAHAr2B,EAAAy1B,WAAA,EACAz1B,EAAA00B,OAAA4B,EACAt2B,EAAA81B,UAAAN,EAAAW,yBAAAI,gBACAv2B,GAOAw1B,EAAApoE,UAAAizC,QAAA,SAAA3R,EAAA18B,GACA,IAAAguC,EAAAxyC,KAAA6oE,QAcA,OAbAr2B,EAAA01B,WAAA,OACAnnE,IAAAmgC,IACAA,EAAA,MAEAsR,EAAA+1B,iBAAArnC,EACA,MAAA18B,GACAguC,EAAA21B,eAAA,EACA31B,EAAAg2B,gBAAAhkE,IAGAguC,EAAA21B,eAAA,EACA31B,EAAAg2B,gBAAA,IAEAh2B,GAOAw1B,EAAApoE,UAAAkzC,MAAA,SAAA5R,EAAA18B,GACA,IAAAguC,EAAAxyC,KAAA6oE,QAcA,OAbAr2B,EAAA41B,SAAA,OACArnE,IAAAmgC,IACAA,EAAA,MAEAsR,EAAAi2B,eAAAvnC,OACAngC,IAAAyD,GACAguC,EAAA61B,aAAA,EACA71B,EAAAk2B,cAAAlkE,IAGAguC,EAAA61B,aAAA,EACA71B,EAAAk2B,cAAA,IAEAl2B,GAMAw1B,EAAApoE,UAAA6yC,QAAA,SAAAtoB,GACA,IAAAqoB,EAAAxyC,KAAA6oE,QAEA,OADAr2B,EAAAhF,OAAArjB,EACAqoB,GAKAw1B,EAAApoE,UAAAqzC,eAAA,WACA,IAAA+1B,EAAAhB,EAAAW,yBACAxgE,EAAA,GAaA,GAZAnI,KAAAkoE,YACA//D,EAAA6gE,EAAAC,mBAAAjpE,KAAAuoE,iBACAvoE,KAAAmoE,gBACAhgE,EAAA6gE,EAAAE,kBAAAlpE,KAAAwoE,kBAGAxoE,KAAAooE,UACAjgE,EAAA6gE,EAAAG,iBAAAnpE,KAAAyoE,eACAzoE,KAAAqoE,cACAlgE,EAAA6gE,EAAAI,gBAAAppE,KAAA0oE,gBAGA1oE,KAAAioE,UAAA,CACA9/D,EAAA6gE,EAAAK,OAAArpE,KAAAknE,OACA,IAAAoC,EAAAtpE,KAAAsoE,UACA,KAAAgB,IAEAA,EADAtpE,KAAAqnE,iBACA2B,EAAAJ,eAGAI,EAAAD,iBAGA5gE,EAAA6gE,EAAAO,WAAAD,EAMA,OAHAtpE,KAAAwtC,SAAAvJ,KACA97B,EAAA6gE,EAAAQ,OAAAxpE,KAAAwtC,OAAAnpC,YAEA8D,GAKA6/D,EAAApoE,UAAA4hD,aAAA,WACA,QAAAxhD,KAAAkoE,WAAAloE,KAAAooE,SAAApoE,KAAAioE,YAKAD,EAAApoE,UAAAyqD,UAAA,WACA,OAAArqD,KAAAwhD,gBAAAxhD,KAAAwtC,QAAAvJ,IAKA+jC,EAAApoE,UAAAohD,cAAA,WACA,OAAAhhD,KAAAwhD,eACA,IAAA3H,GAAA75C,KAAAkvC,YAEAlvC,KAAAmxC,WACA,IAAA61B,GAAAhnE,MAGA,IAAAsmE,GAAAtmE,OAQAgoE,EAAApoE,UAAAojE,4BAAA,WACA,IAKAvwB,EALAg3B,EAAAzB,EAAA0B,sBACAC,EAAA,GACA,OAAA3pE,KAAAqqD,YACAsf,GAGA3pE,KAAAwtC,SAAAvJ,GACAwO,EAAAg3B,EAAAxlC,eAEAjkC,KAAAwtC,SAAAZ,GACA6F,EAAAg3B,EAAA78B,YAEA5sC,KAAAwtC,SAAArM,GACAsR,EAAAg3B,EAAAtoC,WAGA10B,EAAA2F,OAAApS,KAAAwtC,kBAAAT,GAAA,4BACA0F,EAAAzyC,KAAAwtC,OAAAnpC,YAEAslE,EAAAF,EAAAG,UAAAn9D,EAAAgP,UAAAg3B,GACAzyC,KAAAkoE,YACAyB,EAAAF,EAAAI,UAAAp9D,EAAAgP,UAAAzb,KAAAuoE,kBACAvoE,KAAAmoE,gBACAwB,EAAAF,EAAAI,WAAA,IAAAp9D,EAAAgP,UAAAzb,KAAAwoE,mBAGAxoE,KAAAooE,UACAuB,EAAAF,EAAAK,QAAAr9D,EAAAgP,UAAAzb,KAAAyoE,gBACAzoE,KAAAqoE,cACAsB,EAAAF,EAAAK,SAAA,IAAAr9D,EAAAgP,UAAAzb,KAAA0oE,iBAGA1oE,KAAAioE,YACAjoE,KAAAqnE,iBACAsC,EAAAF,EAAAM,gBAAA/pE,KAAAknE,OAGAyC,EAAAF,EAAAO,eAAAhqE,KAAAknE,QAGAyC,IAQA3B,EAAAW,yBAAA,CACAM,kBAAA,KACAC,iBAAA,KACAC,gBAAA,KACAC,eAAA,KACAC,MAAA,IACAE,UAAA,KACAX,eAAA,IACAG,gBAAA,IACAS,MAAA,KAQAxB,EAAA0B,sBAAA,CACAE,SAAA,UACA3lC,eAAA,YACA2I,YAAA,SACAzL,UAAA,OACA0oC,SAAA,UACAC,OAAA,QACAC,eAAA,eACAC,cAAA,eAOAhC,EAAAiC,QAAA,IAAAjC,EACAA,EAhXA,GAmYAkC,GAAA,SAAAryD,GAaA,SAAAqyD,EAAA95B,EAAApW,GAEA,KAAAoW,aAAAgzB,IACA,UAAAv8D,MAAA,6DAIA,OADAgR,EAAArV,KAAAxC,KAAAowC,EAAApW,EAAAguC,GAAAiC,SAAA,IAAAjqE,KA6OA,OA/PAgS,EAAAqG,UAAA6xD,EAAAryD,GAsBAqyD,EAAAtqE,UAAAmuC,OAAA,WAEA,OADAthC,EAAA8Q,iBAAA,oBAAAzS,UAAAnG,QACA3E,KAAAg6B,KAAArd,UACA,KAEA3c,KAAAg6B,KAAAvB,WAMAyxC,EAAAtqE,UAAAm5B,MAAA,SAAAL,GAWA,OAVAjsB,EAAA8Q,iBAAA,sBAAAzS,UAAAnG,QACA,iBAAA+zB,EACAA,EAAA3jB,OAAA2jB,GAEAA,aAAAV,IACA,OAAAh4B,KAAAg6B,KAAA1B,WAxlYA,SAAA1d,EAAAC,EAAA6d,EAAA5d,GACA4d,IAEAA,IAAA9hB,QAAA,yBAEA+nB,GAAA/jB,EAAAC,EAAA6d,EAAA5d,GAolYAqvD,CAAA,oBAAAzxC,GAAA,GAEAiG,GAAA,oBAAAjG,GAAA,IAEA,IAAAwxC,EAAAlqE,KAAAowC,KAAApwC,KAAAg6B,KAAAjB,MAAAL,KAGAwxC,EAAAtqE,UAAAyuC,UAAA,WACA5hC,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACA,IAAAylE,EAAApqE,KAAAg6B,KAAAnB,SACA,cAAAuxC,EAAA,SAAAF,EAAAlqE,KAAAowC,KAAAg6B,IAGAF,EAAAtqE,UAAAyqE,QAAA,WACA59D,EAAA8Q,iBAAA,qBAAAzS,UAAAnG,QAEA,IADA,IAAA+hB,EAAA1mB,KACA,OAAA0mB,EAAA2nB,aACA3nB,IAAA2nB,YAEA,OAAA3nB,GAGAwjD,EAAAtqE,UAAA0qE,aAAA,WACA,OAAAtqE,KAAAowC,KAAAm6B,UAOAL,EAAAtqE,UAAAqO,IAAA,SAAA82D,EAAA7lC,GACAzyB,EAAA8Q,iBAAA,oBAAAzS,UAAAnG,QACAi6B,GAAA,gBAAA5+B,KAAAg6B,MACA6D,GAAA,kBAAAknC,EAAA/kE,KAAAg6B,MAAA,GACAvtB,EAAAmR,iBAAA,kBAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAGA,OAFA9V,KAAAowC,KAAA/Q,gBAAAr/B,KAAAg6B,KAAA+qC,EACA,KAAA//C,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAOAm0D,EAAAtqE,UAAAmZ,OAAA,SAAAwmB,EAAAL,GAGA,GAFAzyB,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACAi6B,GAAA,mBAAA5+B,KAAAg6B,MACAnvB,MAAA8I,QAAA4rB,GAAA,CAEA,IADA,IAAAC,EAAA,GACAl5B,EAAA,EAA2BA,EAAAi5B,EAAA56B,SAA0B2B,EACrDk5B,EAAA,GAAAl5B,GAAAi5B,EAAAj5B,GAEAi5B,EAAAC,EACAzZ,EAAA,wMAKAmY,GAAA,qBAAAqB,EAAAv/B,KAAAg6B,MAAA,GACAvtB,EAAAmR,iBAAA,qBAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAowC,KAAAr3B,OAAA/Y,KAAAg6B,KAAAuF,EAAAva,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAQAm0D,EAAAtqE,UAAAy/B,gBAAA,SAAA0lC,EAAA16B,EAAAnL,GAMA,GALAzyB,EAAA8Q,iBAAA,gCAAAzS,UAAAnG,QACAi6B,GAAA,4BAAA5+B,KAAAg6B,MACA6D,GAAA,8BAAAknC,EAAA/kE,KAAAg6B,MAAA,GACAuE,GAAA,8BAAA8L,GAAA,GACA59B,EAAAmR,iBAAA,8BAAAshB,GAAA,GACA,YAAAl/B,KAAA+tC,UAAA,UAAA/tC,KAAA+tC,SACA,0CACA/tC,KAAA+tC,SACA,0BACA,IAAA/oB,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAowC,KAAA/Q,gBAAAr/B,KAAAg6B,KAAA+qC,EAAA16B,EAAArlB,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAMAm0D,EAAAtqE,UAAAo0B,OAAA,SAAAkL,GAIA,OAHAzyB,EAAA8Q,iBAAA,uBAAAzS,UAAAnG,QACAi6B,GAAA,mBAAA5+B,KAAAg6B,MACAvtB,EAAAmR,iBAAA,qBAAAshB,GAAA,GACAl/B,KAAAiO,IAAA,KAAAixB,IAQAgrC,EAAAtqE,UAAA4qE,YAAA,SAAAC,EAAAvrC,EAAAwrC,GAQA,GAPAj+D,EAAA8Q,iBAAA,4BAAAzS,UAAAnG,QACAi6B,GAAA,wBAAA5+B,KAAAg6B,MACAvtB,EAAAmR,iBAAA,0BAAA6sD,GAAA,GACAh+D,EAAAmR,iBAAA,0BAAAshB,GAAA,GAzqYA,SAAAtkB,EAAAC,EAAA8vD,EAAA7vD,GACA,KAAAA,QAAA/Z,IAAA4pE,IAEA,kBAAAA,EACA,UAAA9jE,MAAA4F,EAAAkO,YAAAC,EAAAC,EAAAC,GAAA,sBAwqYA8vD,CAAA,0BAAAF,GAAA,GACA,YAAA1qE,KAAA+tC,UAAA,UAAA/tC,KAAA+tC,SACA,sCACA/tC,KAAA+tC,SACA,+BACAhtC,IAAA2pE,IACAA,GAAA,GACA,IAAA1lD,EAAA,IAAAvY,EAAAqJ,SACA,mBAAAopB,GACAla,EAAAjP,QAAA5O,MAAA,cAcA,OADAnH,KAAAowC,KAAAy6B,iBAAA7qE,KAAAg6B,KAAAywC,EAXA,SAAA/f,EAAA/qB,EAAAC,GACA8qB,EACA1lC,EAAAvc,OAAAiiD,GAGA1lC,EAAAxc,QAAA,IAAAk3B,GAAAC,EAAAC,IAEA,mBAAAV,GACAA,EAAAwrB,EAAA/qB,EAAAC,IAGA8qC,GACA1lD,EAAAjP,SAOAm0D,EAAAtqE,UAAAkrE,YAAA,SAAAltC,EAAAsB,GACAzyB,EAAA8Q,iBAAA,4BAAAzS,UAAAnG,QACAi6B,GAAA,wBAAA5+B,KAAAg6B,MACAuE,GAAA,0BAAAX,GAAA,GACAnxB,EAAAmR,iBAAA,0BAAAshB,GAAA,GACA,IAAAla,EAAA,IAAAvY,EAAAqJ,SAEA,OADA9V,KAAAowC,KAAA/Q,gBAAAr/B,KAAAg6B,KAAAjB,MAAA,aAAA6E,EAAA,KAAA5Y,EAAAhP,aAAAkpB,IACAla,EAAAjP,SAOAm0D,EAAAtqE,UAAA6E,KAAA,SAAA3D,EAAAo+B,GACAzyB,EAAA8Q,iBAAA,qBAAAzS,UAAAnG,QACAi6B,GAAA,iBAAA5+B,KAAAg6B,MACA6D,GAAA,mBAAA/8B,EAAAd,KAAAg6B,MAAA,GACAvtB,EAAAmR,iBAAA,mBAAAshB,GAAA,GACA,IASAnpB,EATAiG,EAAAhc,KAAAowC,KAAAg0B,aACA1jE,EAAAo/B,GAAA9jB,GAMA+uD,EAAA/qE,KAAA+4B,MAAAr4B,GACAsqE,EAAAhrE,KAAA+4B,MAAAr4B,GAaA,OAVAqV,EADA,MAAAjV,EACAiqE,EAAA98D,IAAAnN,EAAAo+B,GAAAh7B,KAAA,WAAgF,OAAA8mE,IAGhFziE,QAAAC,QAAAwiE,GAEAD,EAAA7mE,KAAA6R,EAAA7R,KAAAgL,KAAA6G,GACAg1D,EAAA5jE,MAAA4O,EAAA7R,KAAAgL,KAAA6G,OAAAhV,GACA,mBAAAm+B,GACAnpB,EAAA5O,MAAA,cAEA4jE,GAKAb,EAAAtqE,UAAA4xD,aAAA,WAEA,OADA5yB,GAAA,yBAAA5+B,KAAAg6B,MACA,IAAA+E,GAAA/+B,KAAAowC,KAAApwC,KAAAg6B,OAEA/4B,OAAAT,eAAA0pE,EAAAtqE,UAAA,YACAG,IAAA,WACA,OAAAC,KAAAsqE,gBAEAn8D,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAA0pE,EAAAtqE,UAAA,OACAG,IAAA,WACA,OAAAC,KAAA+tC,UAEA5/B,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAA0pE,EAAAtqE,UAAA,UACAG,IAAA,WACA,OAAAC,KAAAquC,aAEAlgC,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAA0pE,EAAAtqE,UAAA,QACAG,IAAA,WACA,OAAAC,KAAAqqE,WAEAl8D,YAAA,EACArO,cAAA,IAEAoqE,EAhQA,CAiQC/5B,IAODA,GAAAzD,uBAAAw9B,GACA/nB,GAAAzV,uBAAAw9B,GAqBA,IAgOAe,GAhOAC,GAAA,WAQA,OAPA,WAGAlrE,KAAAw1C,SAAA,GACAx1C,KAAAmrE,WAAA,EACAnrE,KAAAc,MAAA,MANA,GAeAsqE,GAAA,WAOA,SAAAA,EAAAj+D,EAAAk+D,EAAA/9B,QACA,IAAAngC,IAA+BA,EAAA,SAC/B,IAAAk+D,IAAiCA,EAAA,WACjC,IAAA/9B,IAA+BA,EAAA,IAAA49B,IAC/BlrE,KAAAmN,QACAnN,KAAAqrE,UACArrE,KAAAstC,QA0KA,OAlKA89B,EAAAxrE,UAAA0rE,QAAA,SAAAC,GAIA,IAFA,IACAtnE,EADA+1B,EAAAuxC,aAAAvzC,EAAAuzC,EAAA,IAAAvzC,EAAAuzC,GACAxyC,EAAA/4B,KACA,QAAAiE,EAAA+1B,EAAA1B,aAAA,CAEAS,EAAA,IAAAqyC,EAAAnnE,EAAA80B,EADAtsB,EAAAqQ,QAAAic,EAAAuU,MAAAkI,SAAAvxC,IAAA,IAAAinE,IAEAlxC,IAAAxB,WAEA,OAAAO,GAOAqyC,EAAAxrE,UAAAsjC,SAAA,WACA,OAAAljC,KAAAstC,MAAAxsC,OAOAsqE,EAAAxrE,UAAA4rE,SAAA,SAAA1qE,GACA2L,EAAA2F,YAAA,IAAAtR,EAAA,iCACAd,KAAAstC,MAAAxsC,QACAd,KAAAyrE,kBAKAL,EAAAxrE,UAAA6zC,MAAA,WACAzzC,KAAAstC,MAAAxsC,MAAA,KACAd,KAAAstC,MAAAkI,SAAA,GACAx1C,KAAAstC,MAAA69B,WAAA,EACAnrE,KAAAyrE,kBAKAL,EAAAxrE,UAAAkuC,YAAA,WACA,OAAA9tC,KAAAstC,MAAA69B,WAAA,GAKAC,EAAAxrE,UAAA+c,QAAA,WACA,cAAA3c,KAAAkjC,aAAAljC,KAAA8tC,eAOAs9B,EAAAxrE,UAAAkjC,aAAA,SAAAC,GACA,IAAA10B,EAAArO,KACAyM,EAAAnH,QAAAtF,KAAAstC,MAAAkI,SAAA,SAAAzc,EAAAuP,GACAvF,EAAA,IAAAqoC,EAAAryC,EAAA1qB,EAAAi6B,OAYA8iC,EAAAxrE,UAAA8rE,kBAAA,SAAA3oC,EAAA4oC,EAAAC,GACAD,IAAAC,GACA7oC,EAAA/iC,MACAA,KAAA8iC,aAAA,SAAA/J,GACAA,EAAA2yC,kBAAA3oC,GAAA,EAAA6oC,KAEAD,GAAAC,GACA7oC,EAAA/iC,OAUAorE,EAAAxrE,UAAAisE,gBAAA,SAAA9oC,EAAA4oC,GAEA,IADA,IAAAzrC,EAAAyrC,EAAA3rE,UAAA64B,SACA,OAAAqH,GAAA,CACA,GAAA6C,EAAA7C,GACA,SAEAA,IAAArH,SAEA,UASAuyC,EAAAxrE,UAAAksE,oCAAA,SAAA/oC,GACA/iC,KAAA8iC,aAAA,SAAA/J,GACA,OAAAA,EAAAmK,WACAH,EAAAhK,GAEAA,EAAA+yC,oCAAA/oC,MAMAqoC,EAAAxrE,UAAAo6B,KAAA,WACA,WAAAhC,EAAA,OAAAh4B,KAAAqrE,QACArrE,KAAAmN,MACAnN,KAAAqrE,QAAArxC,OAAA,IAAAh6B,KAAAmN,QAKAi+D,EAAAxrE,UAAAc,KAAA,WACA,OAAAV,KAAAmN,OAKAi+D,EAAAxrE,UAAAi5B,OAAA,WACA,OAAA74B,KAAAqrE,SAOAD,EAAAxrE,UAAA6rE,eAAA,WACA,OAAAzrE,KAAAqrE,SACArrE,KAAAqrE,QAAAU,aAAA/rE,KAAAmN,MAAAnN,OASAorE,EAAAxrE,UAAAmsE,aAAA,SAAA3pC,EAAArJ,GACA,IAAAizC,EAAAjzC,EAAApc,UACAsvD,EAAAx/D,EAAAC,SAAA1M,KAAAstC,MAAAkI,SAAApT,GACA4pC,GAAAC,UACAjsE,KAAAstC,MAAAkI,SAAApT,GACApiC,KAAAstC,MAAA69B,aACAnrE,KAAAyrE,kBAEAO,GAAAC,IACAjsE,KAAAstC,MAAAkI,SAAApT,GAAArJ,EAAAuU,MACAttC,KAAAstC,MAAA69B,aACAnrE,KAAAyrE,mBAGAL,EAvLA,IAkNA,SAAAH,GAIAA,IAAA,aAGAA,IAAA,eAGAA,IAAA,yBAGAA,IAAA,uCAEAA,IAAA,6BAfA,CAgBCA,QAAA,KAQD7H,GAAA8I,yBAAA,GAKA9I,GAAAxjE,UAAAkkE,mBAAA,WAOA9jE,KAAAmsE,sBAAA,IAAAf,IAUAhI,GAAAxjE,UAAAirE,iBAAA,SAAA7wC,EAAAywC,EAAAvrC,EAAAwrC,GACA1qE,KAAAoxD,KAAA,kBAAAp3B,GAEA,IAAAoyC,EAAA,aACAC,EAAA,IAAAnC,GAAAlqE,KAAAg6B,GACAqyC,EAAA/gE,GAAA,QAAA8gE,GACA,IAIA5B,EAAA,CACAxwC,OACAjhB,OAAA0xD,EACAvrC,aAEAze,OAAA,KAEA6rD,MAAA33C,IAEA+1C,eAEA6B,WAAA,EAEAC,UAjBA,WACAH,EAAA5gE,IAAA,QAAA2gE,IAkBAK,YAAA,KACAC,eAAA,KACAC,qBAAA,KACAC,yBAAA,KACAC,8BAAA,MAGAC,EAAA9sE,KAAA+sE,gBAAA/yC,GACAwwC,EAAAmC,qBAAAG,EACA,IAAA/H,EAAAyF,EAAAzxD,OAAA+zD,EAAA5+D,OACA,QAAAnN,IAAAgkE,GAKA,GAHAyF,EAAAgC,YACAhC,EAAAoC,yBAAA,KACApC,EAAAqC,8BAAA,KACArC,EAAAtrC,WAAA,CAEA,IAAAU,EAAA,IAAAyN,GAAAm9B,EAAAmC,qBAAA,IAAAzC,GAAAlqE,KAAAwqE,EAAAxwC,MAAAiK,IACAumC,EAAAtrC,WAAA,QAAAU,QAGA,CACA9B,GAAA,qCAAAinC,EAAAyF,EAAAxwC,MAEAwwC,EAAA/pD,OAAAwqD,GAAA+B,IACA,IAAAC,EAAAjtE,KAAAmsE,sBAAAb,QAAAtxC,GACAkzC,EAAAD,EAAA/pC,YAAA,GACAgqC,EAAAzoE,KAAA+lE,GACAyC,EAAAzB,SAAA0B,GAIA,IAAAC,OAAA,EACA,oBAAApI,GACA,OAAAA,GACAt4D,EAAAC,SAAAq4D,EAAA,aACAoI,EAAA1gE,EAAAqQ,QAAAioD,EAAA,aACAt4D,EAAA2F,OAAAurB,GAAAwvC,GAAA,yHAMAA,GAFAntE,KAAAmkE,gBAAAtmB,uBAAA7jB,IACAiQ,GAAAlI,YACAJ,cAAAzzB,MAEAi/D,EAAsDA,EACtD,IAAA/4B,EAAAp0C,KAAAskE,uBACAU,EAAAh5B,GAAA+4B,EAAAoI,GACA1sC,EAAA4T,GAAA2wB,EAAA5wB,GACAo2B,EAAAoC,yBAAA5H,EACAwF,EAAAqC,8BAAApsC,EACA+pC,EAAAkC,eAAA1sE,KAAA8kE,kBACA,IAAA7kB,EAAAjgD,KAAAmkE,gBAAAjd,mBAAAltB,EAAAyG,EAAA+pC,EAAAkC,eAAAlC,EAAAE,cACA1qE,KAAAujE,YAAAhV,0BAAAv0B,EAAAimB,GACAjgD,KAAAotE,2BASAhK,GAAAxjE,UAAAmtE,gBAAA,SAAA/yC,EAAAqzC,GACA,OAAArtE,KAAAmkE,gBAAAtmB,uBAAA7jB,EAAAqzC,IACApjC,GAAAlI,YAYAqhC,GAAAxjE,UAAAwtE,uBAAA,SAAAltC,GACA,IAAA7xB,EAAArO,KAMA,QALA,IAAAkgC,IAA0BA,EAAAlgC,KAAAmsE,uBAE1BjsC,GACAlgC,KAAAstE,qCAAAptC,GAEA,OAAAA,EAAAgD,WAAA,CACA,IAAAr5B,EAAA7J,KAAAutE,uBAAArtC,GACAzzB,EAAA2F,OAAAvI,EAAAlF,OAAA,2CACAkF,EAAAuS,MAAA,SAAAouD,GAAyD,OAAAA,EAAA/pD,SAAAwqD,GAAA+B,OAGzDhtE,KAAAwtE,sBAAAttC,EAAAlG,OAAAnwB,QAGAq2B,EAAA4N,eACA5N,EAAA4C,aAAA,SAAAN,GACAn0B,EAAA++D,uBAAA5qC,MAWA4gC,GAAAxjE,UAAA4tE,sBAAA,SAAAxzC,EAAAnwB,GASA,IARA,IAAAwE,EAAArO,KAEAytE,EAAA5jE,EAAA8E,IAAA,SAAA++D,GACA,OAAAA,EAAAhB,iBAEAiB,EAAA3tE,KAAA+sE,gBAAA/yC,EAAAyzC,GACAG,EAAAD,EACAE,EAAAF,EAAAvqC,OACA98B,EAAA,EAAmBA,EAAAuD,EAAAlF,OAAkB2B,IAAA,CACrC,IAAAonE,EAAA7jE,EAAAvD,GACAmG,EAAA2F,OAAAs7D,EAAAjtD,SAAAwqD,GAAA+B,IAAA,iEACAU,EAAAjtD,OAAAwqD,GAAA6C,KACAJ,EAAAnB,aACA,IAAArzC,EAAAlB,EAAAkB,aAAAc,EAAA0zC,EAAA1zC,MAEA4zC,IAAAjrC,YAAAzJ,EAAyEw0C,EAAAd,0BAEzE,IAAAmB,EAAAH,EAAA1/D,KAAA,GACA8/D,EAAAh0C,EAEAh6B,KAAAotD,QAAA0P,IAAAkR,EAAA3pE,WAAA0pE,EAAA,SAAAttD,GACApS,EAAA+iD,KAAA,4BACAp3B,KAAAg0C,EAAA3pE,WACAoc,WAEA,IAAAw/B,EAAA,GACA,UAAAx/B,EAAA,CAIA,IADA,IAAAgxB,EAAA,GACAnrC,EAAA,EAA2BA,EAAAuD,EAAAlF,OAAkB2B,IAAA,CAG7C,GAFAuD,EAAAvD,GAAAma,OAAAwqD,GAAAgD,UACAhuB,IAAAh2C,OAAAoE,EAAA81D,gBAAAvnB,aAAA/yC,EAAAvD,GAAAomE,iBACA7iE,EAAAvD,GAAA44B,WAAA,CAEA,IAAAgB,EAAAr2B,EAAAvD,GAAAumE,8BACAnmD,EAAA,IAAAwjD,GAAA77D,EAAAxE,EAAAvD,GAAA0zB,MACA4F,EAAA,IAAAyN,GAAAnN,EAAAxZ,EAAAud,IACAwN,EAAAhtC,KAAAoF,EAAAvD,GAAA44B,WAAAhwB,KAAA,aAAA0wB,IAEA/1B,EAAAvD,GAAAkmE,YAGAn+D,EAAAi/D,qCAAAj/D,EAAA89D,sBAAAb,QAAAtxC,IAEA3rB,EAAA++D,yBACA/+D,EAAAk1D,YAAAhV,0BAAAv0B,EAAAimB,GAEA,IAAA35C,EAAA,EAA2BA,EAAAmrC,EAAA9sC,OAAsB2B,IACjDsxB,EAAA6Z,EAAAnrC,QAGA,CAEA,iBAAAma,EACA,IAAAna,EAAA,EAA+BA,EAAAuD,EAAAlF,OAAkB2B,IACjDuD,EAAAvD,GAAAma,SAAAwqD,GAAAiD,iBACArkE,EAAAvD,GAAAma,OAAAwqD,GAAAkD,YAEAtkE,EAAAvD,GAAAma,OAAAwqD,GAAA+B,QAGA,CACAjnD,EAAA,kBAAAioD,EAAA3pE,WAAA,YAAAoc,GACA,IAAAna,EAAA,EAA+BA,EAAAuD,EAAAlF,OAAkB2B,IACjDuD,EAAAvD,GAAAma,OAAAwqD,GAAAkD,YACAtkE,EAAAvD,GAAAmmE,YAAAhsD,EAGApS,EAAAq2D,mBAAA1qC,KAEK6zC,IAcLzK,GAAAxjE,UAAA8kE,mBAAA,SAAAlW,GACA,IAAA4f,EAAApuE,KAAAquE,4BAAA7f,GACAx0B,EAAAo0C,EAAAp0C,OACAnwB,EAAA7J,KAAAutE,uBAAAa,GAEA,OADApuE,KAAAsuE,uBAAAzkE,EAAAmwB,GACAA,GASAopC,GAAAxjE,UAAA0uE,uBAAA,SAAAzkE,EAAAmwB,GACA,OAAAnwB,EAAAlF,OAAA,CAcA,IATA,IAiEA6nE,EAjEA/6B,EAAA,GACAwO,EAAA,GAKAwtB,EAHA5jE,EAAAiE,OAAA,SAAAklB,GACA,OAAAA,EAAAvS,SAAAwqD,GAAA+B,MAEAr+D,IAAA,SAAAqkB,GACA,OAAAA,EAAA05C,iBAEApmE,EAAA,EAAmBA,EAAAuD,EAAAlF,OAAkB2B,IAAA,CACrC,IAAAkkE,EAAA3gE,EAAAvD,GACA4yB,EAAAlB,EAAAkB,aAAAc,EAAAwwC,EAAAxwC,MACAu0C,GAAA,EAAA9B,OAAA,EAEA,GADAhgE,EAAA2F,OAAA,OAAA8mB,EAAA,iEACAsxC,EAAA/pD,SAAAwqD,GAAAkD,YACAI,GAAA,EACA9B,EAAAjC,EAAAiC,YACAxsB,IAAAh2C,OAAAjK,KAAAmkE,gBAAAvnB,aAAA4tB,EAAAkC,gBAAA,SAEA,GAAAlC,EAAA/pD,SAAAwqD,GAAA+B,IACA,GAAAxC,EAAA+B,YAAAnJ,GAAA8I,yBACAqC,GAAA,EACA9B,EAAA,WACAxsB,IAAAh2C,OAAAjK,KAAAmkE,gBAAAvnB,aAAA4tB,EAAAkC,gBAAA,QAEA,CAEA,IAAA8B,EAAAxuE,KAAA+sE,gBAAAvC,EAAAxwC,KAAAyzC,GACAjD,EAAAmC,qBAAA6B,EACA,IAAArnB,EAAAt9C,EAAAvD,GAAAyS,OAAAy1D,EAAAtgE,OACA,QAAAnN,IAAAomD,EAAA,CACArpB,GAAA,qCAAAqpB,EAAAqjB,EAAAxwC,MACA,IAAAy0C,EAAAziC,GAAAmb,GACA,iBAAAA,GACA,MAAAA,GACA16C,EAAAC,SAAAy6C,EAAA,eAGAsnB,IAAAxsC,eAAAusC,EAAA7sC,gBAEA,IAAA+sC,EAAAlE,EAAAkC,eACAt4B,EAAAp0C,KAAAskE,uBACAqK,EAAAt6B,GAAAo6B,EAAAr6B,GACAo2B,EAAAoC,yBAAA6B,EACAjE,EAAAqC,8BAAA8B,EACAnE,EAAAkC,eAAA1sE,KAAA8kE,kBAEA2I,EAAA3oB,OAAA2oB,EAAAtvD,QAAAuwD,GAAA,GAEAzuB,GADAA,IAAAh2C,OAAAjK,KAAAmkE,gBAAAjd,mBAAAsjB,EAAAxwC,KAAA20C,EAAAnE,EAAAkC,eAAAlC,EAAAE,gBACAzgE,OAAAjK,KAAAmkE,gBAAAvnB,aAAA8xB,GAAA,SAGAH,GAAA,EACA9B,EAAA,SACAxsB,IAAAh2C,OAAAjK,KAAAmkE,gBAAAvnB,aAAA4tB,EAAAkC,gBAAA,IAMA,GAFA1sE,KAAAujE,YAAAhV,0BAAAv0B,EAAAimB,GACAA,EAAA,GACAsuB,IAEA1kE,EAAAvD,GAAAma,OAAAwqD,GAAAgD,UAGAzB,EAEa3iE,EAAAvD,GAAAkmE,UADb9iE,WAAA8iE,EAAAvwD,KAAAC,MAAA,IAEArS,EAAAvD,GAAA44B,YACA,cAAAutC,EAAA,CACA,IAAA/lD,EAAA,IAAAwjD,GAAAlqE,KAAA6J,EAAAvD,GAAA0zB,MAEA40C,EAAmD/kE,EAAAvD,GAAAqmE,qBACnD/sC,EAAA,IAAAyN,GAAAuhC,EAAAloD,EAAAud,IACAwN,EAAAhtC,KAAAoF,EAAAvD,GAAA44B,WAAAhwB,KAAA,aAAA0wB,SAGA6R,EAAAhtC,KAAAoF,EAAAvD,GAAA44B,WAAAhwB,KAAA,SAAArI,MAAA4lE,IAAA,SAMAzsE,KAAAstE,qCAAAttE,KAAAmsE,uBAEA,IAAA7lE,EAAA,EAAmBA,EAAAmrC,EAAA9sC,OAAsB2B,IACzCsxB,EAAA6Z,EAAAnrC,IAGAtG,KAAAotE,2BAUAhK,GAAAxjE,UAAAyuE,4BAAA,SAAAr0C,GAIA,IAHA,IAAA4I,EAEAisC,EAAA7uE,KAAAmsE,sBACA,QAAAvpC,EAAA5I,EAAA1B,aACA,OAAAu2C,EAAA3rC,YACA2rC,IAAAvD,QAAA1oC,GACA5I,IAAAxB,WAEA,OAAAq2C,GASAzL,GAAAxjE,UAAA2tE,uBAAA,SAAAsB,GAEA,IAAAC,EAAA,GAMA,OALA9uE,KAAA+uE,mCAAAF,EAAAC,GAEAA,EAAAt4C,KAAA,SAAA5d,EAAAC,GACA,OAAAD,EAAA0zD,MAAAzzD,EAAAyzD,QAEAwC,GAOA1L,GAAAxjE,UAAAmvE,mCAAA,SAAA7uC,EAAAr2B,GACA,IAAAwE,EAAArO,KACAktE,EAAAhtC,EAAAgD,WACA,UAAAgqC,EACA,QAAA5mE,EAAA,EAAuBA,EAAA4mE,EAAAvoE,OAAsB2B,IAC7CuD,EAAApF,KAAAyoE,EAAA5mE,IAGA45B,EAAA4C,aAAA,SAAA/J,GACA1qB,EAAA0gE,mCAAAh2C,EAAAlvB,MASAu5D,GAAAxjE,UAAA0tE,qCAAA,SAAAptC,GACA,IAAA7xB,EAAArO,KACA6J,EAAAq2B,EAAAgD,WACA,GAAAr5B,EAAA,CAEA,IADA,IAAAmlE,EAAA,EACAC,EAAA,EAA0BA,EAAAplE,EAAAlF,OAAqBsqE,IAC/CplE,EAAAolE,GAAAxuD,SAAAwqD,GAAAgD,YACApkE,EAAAmlE,GAAAnlE,EAAAolE,GACAD,KAGAnlE,EAAAlF,OAAAqqE,EACA9uC,EAAAsrC,SAAA3hE,EAAAlF,OAAA,EAAAkF,EAAA,MAEAq2B,EAAA4C,aAAA,SAAAN,GACAn0B,EAAAi/D,qCAAA9qC,MAWA4gC,GAAAxjE,UAAAwlE,mBAAA,SAAAprC,GACA,IAAA3rB,EAAArO,KACA85C,EAAA95C,KAAAquE,4BAAAr0C,UACA60C,EAAA7uE,KAAAmsE,sBAAAb,QAAAtxC,GAQA,OAPA60C,EAAAhD,gBAAA,SAAA3rC,GACA7xB,EAAA6gE,yBAAAhvC,KAEAlgC,KAAAkvE,yBAAAL,GACAA,EAAAnD,kBAAA,SAAAxrC,GACA7xB,EAAA6gE,yBAAAhvC,KAEA4Z,GAQAspB,GAAAxjE,UAAAsvE,yBAAA,SAAAhvC,GACA,IAAAr2B,EAAAq2B,EAAAgD,WACA,UAAAr5B,EAAA,CAQA,IALA,IAAA4nC,EAAA,GAGAwO,EAAA,GACAkvB,GAAA,EACA7oE,EAAA,EAAuBA,EAAAuD,EAAAlF,OAAkB2B,IACzC,GAAAuD,EAAAvD,GAAAma,SAAAwqD,GAAAiD,uBAGA,GAAArkE,EAAAvD,GAAAma,SAAAwqD,GAAA6C,KACArhE,EAAA2F,OAAA+8D,IAAA7oE,EAAA,qDACA6oE,EAAA7oE,EAEAuD,EAAAvD,GAAAma,OAAAwqD,GAAAiD,iBACArkE,EAAAvD,GAAAmmE,YAAA,WAOA,GAJAhgE,EAAA2F,OAAAvI,EAAAvD,GAAAma,SAAAwqD,GAAA+B,IAAA,0CAEAnjE,EAAAvD,GAAAkmE,YACAvsB,IAAAh2C,OAAAjK,KAAAmkE,gBAAAvnB,aAAA/yC,EAAAvD,GAAAomE,gBAAA,IACA7iE,EAAAvD,GAAA44B,WAAA,CAEAuS,EAAAhtC,KAAAoF,EAAAvD,GAAA44B,WAAAhwB,KAAA,SAAArI,MAAA,UADA,QAKA,IAAAsoE,EAEAjvC,EAAAsrC,SAAA,MAIA3hE,EAAAlF,OAAAwqE,EAAA,EAGAnvE,KAAAujE,YAAAhV,0BAAAruB,EAAAlG,OAAAimB,GACA,IAAA35C,EAAA,EAAuBA,EAAAmrC,EAAA9sC,OAAsB2B,IAC7CsxB,EAAA6Z,EAAAnrC,MAsBA,IACA8oE,GAIAC,GAAA,WACA,SAAAA,IAIArvE,KAAAsvE,OAAA,GAKAtvE,KAAAuvE,gBAAA,EAyFA,OAvFAF,EAAA5f,YAAA,WAIA,OAHA2f,KACAA,GAAA,IAAAC,GAEAD,IAGAC,EAAAzvE,UAAAyiE,UAAA,WACA,QAAAmN,KAAAxvE,KAAAsvE,OACA,QAAAG,KAAAzvE,KAAAsvE,OAAAE,GACAxvE,KAAAsvE,OAAAE,GAAAC,GAAApN,aAIAgN,EAAAzvE,UAAAqzB,OAAA,WACA,QAAAu8C,KAAAxvE,KAAAsvE,OACA,QAAAG,KAAAzvE,KAAAsvE,OAAAE,GACAxvE,KAAAsvE,OAAAE,GAAAC,GAAAx8C,UAUAo8C,EAAAzvE,UAAA8vE,gBAAA,SAAAh/D,EAAAkQ,GACA,IAAA6uD,EAAA7uD,GAAAlQ,EAAA5D,QAAA,iBACA/L,IAAA0uE,GACA/5C,EAAA,wHAIA,IAAAyG,EAAAF,EAAAwzC,GACAjzC,EAAAL,EAAAK,SAOA,OANAqC,GAAA,kCAAA1C,GACAA,EAAAnC,KAAArd,WACA+Y,EAAA,4FAGA11B,KAAA2vE,WAAAnzC,EAAA9rB,GACA65D,UAOA8E,EAAAzvE,UAAAgwE,WAAA,SAAAx/B,GACA,IAAAy/B,EAAApjE,EAAAqQ,QAAA9c,KAAAsvE,OAAAl/B,EAAA1/B,IAAAhQ,MAEAmvE,GAAApjE,EAAAqQ,QAAA+yD,EAAAz/B,EAAAipB,UAAA19B,iBAAAyU,GACA1a,EAAA,YAAA0a,EAAA1/B,IAAAhQ,KAAA,IAAA0vC,EAAAipB,UAAA,+BAEAjpB,EAAAiyB,mBACAwN,EAAAz/B,EAAAipB,UAAA19B,gBAUA0zC,EAAAzvE,UAAA+vE,WAAA,SAAAnzC,EAAA9rB,GACA,IAAAm/D,EAAApjE,EAAAqQ,QAAA9c,KAAAsvE,OAAA5+D,EAAAhQ,MACAmvE,IACAA,EAAA,GACA7vE,KAAAsvE,OAAA5+D,EAAAhQ,MAAAmvE,GAEA,IAAAz/B,EAAA3jC,EAAAqQ,QAAA+yD,EAAArzC,EAAAb,eAMA,OALAyU,GACA1a,EAAA,2HAEA0a,EAAA,IAAAgzB,GAAA5mC,EAAAx8B,KAAAuvE,eAAA7+D,GACAm/D,EAAArzC,EAAAb,eAAAyU,EACAA,GAMAi/B,EAAAzvE,UAAAyjE,gBAAA,SAAAA,GACArjE,KAAAuvE,eAAAlM,GAEAgM,EAnGA,GA0HAhJ,GAAA,WAKA,SAAAA,EAAArnC,GACAh/B,KAAAg/B,QACAA,aAAAokC,IACA1tC,EAAA,wEAGA11B,KAAA2mC,MAAA,IAAAujC,GAAAlrC,EAAAhH,EAAA0d,OACA11C,KAAAwN,SAAA,IAAAsiE,GAAA9vE,MAmEA,OAjEAiB,OAAAT,eAAA6lE,EAAAzmE,UAAA,OACAG,IAAA,WACA,OAAAC,KAAAg/B,MAAAtuB,KAEAvC,YAAA,EACArO,cAAA,IAEAumE,EAAAzmE,UAAA8mB,IAAA,SAAAsT,GAGA,OAFAh6B,KAAA+vE,cAAA,OACAtjE,EAAA8Q,iBAAA,mBAAAzS,UAAAnG,QACAq1B,aAAAkwC,GACAlqE,KAAAgwE,WAAAh2C,EAAA31B,iBAEAtD,IAAAi5B,EAAAh6B,KAAA2mC,MAAA5N,MAAAiB,GAAAh6B,KAAA2mC,OASA0/B,EAAAzmE,UAAAowE,WAAA,SAAApvD,GAEA,IAAAqvD,EAAA,sBACAjwE,KAAA+vE,cAAAE,GACAxjE,EAAA8Q,iBAAA0yD,EAAA,IAAAnlE,UAAAnG,QACA,IAAAurE,EAAAj0C,EAAArb,GACAie,GAAAoxC,EAAA,EAAAC,GACA,IAAA1zC,EAAA0zC,EAAA1zC,SAUA,OATAA,EAAA5B,OAAA56B,KAAAg/B,MAAAq6B,UAAAz+B,MACAlF,EAAAu6C,EACA,2DAEAzzC,EAAA5B,KACA,iBACA56B,KAAAg/B,MAAAq6B,UAAAz+B,KACA,KAEA56B,KAAA0mB,IAAAwpD,EAAAl2C,KAAA31B,aAKAgiE,EAAAzmE,UAAAmwE,cAAA,SAAAE,GACA,OAAAjwE,KAAAg/B,OACAtJ,EAAA,eAAAu6C,EAAA,4BAIA5J,EAAAzmE,UAAAuwE,UAAA,WACA1jE,EAAA8Q,iBAAA,yBAAAzS,UAAAnG,QACA3E,KAAA+vE,cAAA,aACA/vE,KAAAg/B,MAAAqjC,aAEAgE,EAAAzmE,UAAAwwE,SAAA,WACA3jE,EAAA8Q,iBAAA,wBAAAzS,UAAAnG,QACA3E,KAAA+vE,cAAA,YACA/vE,KAAAg/B,MAAA/L,UAEAozC,EAAAgK,YAAA,CACAC,UAAA,CACAC,MAAA,cAGAlK,EA/EA,GAiFAyJ,GAAA,WAEA,SAAAA,EAAAvF,GACAvqE,KAAAuqE,WAgBA,OAbAuF,EAAAlwE,UAAAwO,OAAA,WACA,OAAA4D,EAAAye,UAAAzwB,UAAA,oBACA,OAAAgS,EAAA0e,YAAA1wB,KAAA,SAAAm9B,GAOA,OANAn9B,KAAAuqE,SAAAwF,cAAA,UACAV,GAAA5f,cAAAmgB,WAAA5vE,KAAAuqE,SAAAvrC,OACAh/B,KAAAuqE,SAAAvrC,MAAA,KACAh/B,KAAAuqE,SAAA5jC,MAAA,KACA3mC,KAAAuqE,SAAA/8D,SAAA,KACAxN,KAAAuqE,SAAA,KACA,SAIAuF,EAnBA,GAwEAtiE,GAAAvM,OAAAuvE,OAAA,CACAC,iBA5BA,WACA7Z,GAAAtD,gBACAzC,GAAAuC,cA2BAsd,gBAzBA,WACA7f,GAAAyC,iBAyBAsF,sBAtBA,WACA,OAAAhC,GAAA,eAsBA+Z,yBApBA,SAAAjqD,EAAA9Y,GACA8Y,EAAA0pB,KAAAszB,sBAAAvF,uBAAAvwD,GAoBA6/C,MAlBA,SAAA/mC,EAAAm/C,GACAn/C,EAAA0pB,KAAAqd,MAAAoY,IAkBAK,sBAhBA,SAAAx/C,EAAAy/C,GACAz/C,EAAA0pB,KAAA81B,sBAAAC,IAgBA7C,gBAdA,SAAA58C,GACA,OAAAA,EAAA0pB,KAAAkzB,iBAcAsN,oBAZA,SAAAlqD,EAAA9Y,GACA,OAAA8Y,EAAA0pB,KAAAu0B,qBAAA/2D,MA8BAijE,GAAAzT,GAKAA,GAAAx9D,UAAAkxE,aAAA,SAAAp4C,EAAAwG,GACAl/B,KAAAg7D,YAAA,KAA2BroD,EAAA+lB,GAAgBwG,IAM3Ck+B,GAAAx9D,UAAAmxE,KAAA,SAAAt6D,EAAAu6D,GACAhxE,KAAAg7D,YAAA,QAA8BliD,EAAArC,GAAUu6D,IAGxC,IAAAC,GAAA7X,GAoBA8X,GAAAv2C,EAwBAw2C,GAAAlwE,OAAAuvE,OAAA,CACAK,kBACAI,sBACAG,WA1CA,SAAAC,GACA,IAAAC,EAAAlU,GAAAx9D,UAAAk9D,IAOA,OANAM,GAAAx9D,UAAAk9D,IAAA,SAAApkC,EAAAjiB,EAAA86D,EAAAC,QACAzwE,IAAAywE,IACAA,EAAAH,KAEAC,EAAA9uE,KAAAxC,KAAA04B,EAAAjiB,EAAA86D,EAAAC,IAEA,WACApU,GAAAx9D,UAAAk9D,IAAAwU,IAkCAJ,oBACAh+B,gBAxBA,SAAAlE,GACA,OAAAA,EAAAkE,mBAwBAu+B,QAlBA,SAAAC,GACA,OAAAA,EAAAthC,KAAAszB,sBAAA9F,UAkBAyF,gBAXA,SAAAA,GACAgM,GAAA5f,cAAA4T,sBA6BAgN,GAAAhK,GAAAgK,YACA,SAAAsB,GAAAC,GAEA,IAAAvhE,EAAAuhE,EAAApkE,SAAAsD,gBAAA,oBAAAJ,EAAAmhE,EAAAjxD,GAA+F,OAAAyuD,GAAA5f,cAAAigB,gBAAAh/D,EAAAkQ,IAE/F,CACAspD,aACA/5B,SACAk2B,YACAnxC,gBACA1nB,YACA6iE,eACAc,gBACK,SACL1kE,EAAA4O,cACA5a,EAAAN,QAAAkQ,GAGAshE,GAAA1hE,GAEA9P,EAAAwxE,oBACAxxE,EAAAkmE,YACAlmE,EAAAgwC,SACAhwC,EAAA+pE,aACA/pE,EAAA+0B,gBACA/0B,EAAAkwE,eACAlwE,EAAAktC,gBACAltC,EAAA4+B,sEC3keAv/B,EAAAkf,EAAAC,GAAAnf,EAAAsZ,EAAA6F,EAAA,gCAAAmzD,IAAAtyE,EAAAsZ,EAAA6F,EAAA,2BAAA+V,IAAAl1B,EAAAsZ,EAAA6F,EAAA,6BAAA2W,IAmBA,IAYAA,EAZAy8C,EAAA,IAaA,SAAAz8C,GACAA,IAAA,iBACAA,IAAA,qBACAA,IAAA,eACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBANA,CAOCA,MAAA,KAID,IAAA08C,EAAA18C,EAAA28C,KAMAC,EAAA,SAAAN,EAAAO,GAEA,IADA,IAAAvnE,EAAA,GACA0G,EAAA,EAAoBA,EAAAxG,UAAAnG,OAAuB2M,IAC3C1G,EAAA0G,EAAA,GAAAxG,UAAAwG,GAEA,KAAA6gE,EAAAP,EAAAv8C,UAAA,CAEA,IAAArZ,GAAA,IAAArG,MAAAy8D,cACA,OAAAD,GAOA,KAAA78C,EAAA+8C,MAGA,KAAA/8C,EAAAC,QACAhmB,QAAAC,IAAAzE,MAAAwE,QAAA,KAAAyM,EAAA,MAAA41D,EAAAlxE,KAAA,KAAAuJ,OAAAW,IACA,MACA,KAAA0qB,EAAA28C,KACA1iE,QAAAxG,KAAAgC,MAAAwE,QAAA,KAAAyM,EAAA,MAAA41D,EAAAlxE,KAAA,KAAAuJ,OAAAW,IACA,MACA,KAAA0qB,EAAAg9C,KACA/iE,QAAAwW,KAAAhb,MAAAwE,QAAA,KAAAyM,EAAA,MAAA41D,EAAAlxE,KAAA,KAAAuJ,OAAAW,IACA,MACA,KAAA0qB,EAAAi9C,MACAhjE,QAAA3G,MAAAmC,MAAAwE,QAAA,KAAAyM,EAAA,MAAA41D,EAAAlxE,KAAA,KAAAuJ,OAAAW,IACA,MACA,QACA,UAAA/D,MAAA,8DAAAsrE,EAAA,QAGAz9C,EAAA,WAOA,SAAAA,EAAAh0B,GACAV,KAAAU,OAIAV,KAAAwyE,UAAAR,EAIAhyE,KAAAyyE,YAAAP,EAIAH,EAAAttE,KAAAzE,MAkEA,OAhEAiB,OAAAT,eAAAk0B,EAAA90B,UAAA,YACAG,IAAA,WACA,OAAAC,KAAAwyE,WAEAvkE,IAAA,SAAAC,GACA,KAAAA,KAAAonB,GACA,UAAAxsB,UAAA,wCAEA9I,KAAAwyE,UAAAtkE,GAEAC,YAAA,EACArO,cAAA,IAEAmB,OAAAT,eAAAk0B,EAAA90B,UAAA,cACAG,IAAA,WACA,OAAAC,KAAAyyE,aAEAxkE,IAAA,SAAAC,GACA,sBAAAA,EACA,UAAApF,UAAA,qDAEA9I,KAAAyyE,YAAAvkE,GAEAC,YAAA,EACArO,cAAA,IAKA40B,EAAA90B,UAAA8yE,MAAA,WAEA,IADA,IAAA9nE,EAAA,GACA0G,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/C1G,EAAA0G,GAAAxG,UAAAwG,GAEAtR,KAAAyyE,YAAA1nE,MAAA/K,KAAA,CAAAA,KAAAs1B,EAAA+8C,OAAApoE,OAAAW,KAEA8pB,EAAA90B,UAAA4P,IAAA,WAEA,IADA,IAAA5E,EAAA,GACA0G,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/C1G,EAAA0G,GAAAxG,UAAAwG,GAEAtR,KAAAyyE,YAAA1nE,MAAA/K,KAAA,CAAAA,KAAAs1B,EAAAC,SAAAtrB,OAAAW,KAEA8pB,EAAA90B,UAAAmJ,KAAA,WAEA,IADA,IAAA6B,EAAA,GACA0G,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/C1G,EAAA0G,GAAAxG,UAAAwG,GAEAtR,KAAAyyE,YAAA1nE,MAAA/K,KAAA,CAAAA,KAAAs1B,EAAA28C,MAAAhoE,OAAAW,KAEA8pB,EAAA90B,UAAAmmB,KAAA,WAEA,IADA,IAAAnb,EAAA,GACA0G,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/C1G,EAAA0G,GAAAxG,UAAAwG,GAEAtR,KAAAyyE,YAAA1nE,MAAA/K,KAAA,CAAAA,KAAAs1B,EAAAg9C,MAAAroE,OAAAW,KAEA8pB,EAAA90B,UAAAgJ,MAAA,WAEA,IADA,IAAAgC,EAAA,GACA0G,EAAA,EAAwBA,EAAAxG,UAAAnG,OAAuB2M,IAC/C1G,EAAA0G,GAAAxG,UAAAwG,GAEAtR,KAAAyyE,YAAA1nE,MAAA/K,KAAA,CAAAA,KAAAs1B,EAAAi9C,OAAAtoE,OAAAW,KAEA8pB,EAtFA,GAyGA,SAAAo9C,EAAAa,GACAZ,EAAAzsE,QAAA,SAAAstE,GACAA,EAAAv9C,SAAAs9C,uCC9LAnzE,EAAAkf,EAAAC,GAAAnf,EAAAsZ,EAAA6F,EAAA,8BAAAtG,IAAA7Y,EAAAsZ,EAAA6F,EAAA,6BAAAyR,IAAA5wB,EAAAsZ,EAAA6F,EAAA,2BAAA0R,IAAA7wB,EAAAsZ,EAAA6F,EAAA,+BAAA2R,IAAA9wB,EAAAsZ,EAAA6F,EAAA,4BAAA4R,IAAA/wB,EAAAsZ,EAAA6F,EAAA,+BAAA6R,IAAAhxB,EAAAsZ,EAAA6F,EAAA,8BAAA8R,IAAAjxB,EAAAsZ,EAAA6F,EAAA,gCAAA+R,IAAAlxB,EAAAsZ,EAAA6F,EAAA,iCAAAgS,IAAAnxB,EAAAsZ,EAAA6F,EAAA,6BAAAiS,IAAApxB,EAAAsZ,EAAA6F,EAAA,2BAAAkS,IAAArxB,EAAAsZ,EAAA6F,EAAA,6BAAAmS,IAAAtxB,EAAAsZ,EAAA6F,EAAA,4BAAAnb,IAAAhE,EAAAsZ,EAAA6F,EAAA,qCAAAoS,IAAAvxB,EAAAsZ,EAAA6F,EAAA,qCAAAqS,IAAAxxB,EAAAsZ,EAAA6F,EAAA,kCAAAsS,IAAAzxB,EAAAsZ,EAAA6F,EAAA,yCAAAuS,IAAA1xB,EAAAsZ,EAAA6F,EAAA,iCAAAwS,IAAA3xB,EAAAsZ,EAAA6F,EAAA,oCAAAyS,IAgBA,IAAAC,EAAApwB,OAAAmC,gBACA,CAAMC,UAAA,cAAgBwH,OAAA,SAAAiO,EAAAD,GAAsCC,EAAAzV,UAAAwV,IAC5D,SAAAC,EAAAD,GAAqB,QAAAlG,KAAAkG,IAAA1X,eAAAwR,KAAAmG,EAAAnG,GAAAkG,EAAAlG,KAEd,SAAA0F,EAAAS,EAAAD,GAEP,SAAAyY,IAAmBtxB,KAAA8C,YAAAgW,EADnBuY,EAAAvY,EAAAD,GAEAC,EAAAlZ,UAAA,OAAAiZ,EAAA5X,OAAA2B,OAAAiW,IAAAyY,EAAA1xB,UAAAiZ,EAAAjZ,UAAA,IAAA0xB,GAGO,IAAAlB,EAAAnvB,OAAA4oB,QAAA,SAAAnR,GACP,QAAA6Y,EAAAjrB,EAAA,EAAA4S,EAAApO,UAAAnG,OAA4C2B,EAAA4S,EAAO5S,IAEnD,QAAAqM,KADA4e,EAAAzmB,UAAAxE,GACArF,OAAArB,UAAAuB,eAAAqB,KAAA+uB,EAAA5e,KAAA+F,EAAA/F,GAAA4e,EAAA5e,IAEA,OAAA+F,GAGO,SAAA2X,EAAAkB,EAAArxB,GACP,IAAAwY,EAAA,GACA,QAAA/F,KAAA4e,EAAAtwB,OAAArB,UAAAuB,eAAAqB,KAAA+uB,EAAA5e,IAAAzS,EAAAie,QAAAxL,GAAA,IACA+F,EAAA/F,GAAA4e,EAAA5e,IACA,SAAA4e,GAAA,mBAAAtwB,OAAA2tB,sBACA,KAAAtoB,EAAA,MAAAqM,EAAA1R,OAAA2tB,sBAAA2C,GAA4DjrB,EAAAqM,EAAAhO,OAAc2B,IAAApG,EAAAie,QAAAxL,EAAArM,IAAA,IAC1EoS,EAAA/F,EAAArM,IAAAirB,EAAA5e,EAAArM,KACA,OAAAoS,EAGO,SAAA4X,EAAAkB,EAAA/b,EAAAjR,EAAAitB,GACP,IAAA3Y,EAAAlG,EAAA9H,UAAAnG,OAAA+Z,EAAA9L,EAAA,EAAA6C,EAAA,OAAAgc,IAAAxwB,OAAA0tB,yBAAAlZ,EAAAjR,GAAAitB,EACA,oBAAAC,SAAA,mBAAAA,QAAAC,SAAAjT,EAAAgT,QAAAC,SAAAH,EAAA/b,EAAAjR,EAAAitB,QACA,QAAAnrB,EAAAkrB,EAAA7sB,OAAA,EAA4C2B,GAAA,EAAQA,KAAAwS,EAAA0Y,EAAAlrB,MAAAoY,GAAA9L,EAAA,EAAAkG,EAAA4F,GAAA9L,EAAA,EAAAkG,EAAArD,EAAAjR,EAAAka,GAAA5F,EAAArD,EAAAjR,KAAAka,GACpD,OAAA9L,EAAA,GAAA8L,GAAAzd,OAAAT,eAAAiV,EAAAjR,EAAAka,KAGO,SAAA6R,EAAAqB,EAAAC,GACP,gBAAApc,EAAAjR,GAAmCqtB,EAAApc,EAAAjR,EAAAotB,IAG5B,SAAApB,EAAAsB,EAAAC,GACP,oBAAAL,SAAA,mBAAAA,QAAAM,SAAA,OAAAN,QAAAM,SAAAF,EAAAC,GAGO,SAAAtB,EAAAzQ,EAAAiS,EAAAvI,EAAAhiB,GACP,WAAAgiB,MAAAnhB,UAAA,SAAAC,EAAAC,GACA,SAAAypB,EAAApxB,GAAmC,IAAMqxB,EAAAzqB,EAAAzD,KAAAnD,IAA+B,MAAAZ,GAAYuI,EAAAvI,IACpF,SAAAyjB,EAAA7iB,GAAkC,IAAMqxB,EAAAzqB,EAAA,MAAA5G,IAAmC,MAAAZ,GAAYuI,EAAAvI,IACvF,SAAAiyB,EAAAhuB,GAA+BA,EAAAC,KAAAoE,EAAArE,EAAArD,OAAA,IAAA4oB,EAAA,SAAAlhB,GAAiEA,EAAArE,EAAArD,SAAyBoD,KAAAguB,EAAAvO,GACzHwO,GAAAzqB,IAAAqD,MAAAiV,EAAAiS,GAAA,KAAAhuB,UAIO,SAAAysB,EAAA1Q,EAAAK,GACP,IAAwG5gB,EAAA2yB,EAAA1Z,EAAAuF,EAAxGoU,EAAA,CAAaC,MAAA,EAAArtB,KAAA,WAA6B,KAAAyT,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAe6Z,KAAA,GAAAC,IAAA,IACnF,OAAAvU,EAAA,CAAgBha,KAAAwuB,EAAA,GAAAC,MAAAD,EAAA,GAAA5pB,OAAA4pB,EAAA,IAAqD,mBAAA7xB,SAAAqd,EAAArd,OAAAS,UAAA,WAAoE,OAAArB,OAAeie,EACxJ,SAAAwU,EAAAvZ,GAAsB,gBAAAyZ,GAAsB,OAC5C,SAAAC,GACA,GAAAnzB,EAAA,UAAAqJ,UAAA,mCACA,KAAAupB,GAAA,IACA,GAAA5yB,EAAA,EAAA2yB,IAAA1Z,EAAA0Z,EAAA,EAAAQ,EAAA,YAAAA,EAAA,uBAAAla,IAAAlW,KAAA4vB,EAAAQ,EAAA,KAAAxuB,KAAA,OAAAsU,EAEA,OADA0Z,EAAA,EAAA1Z,IAAAka,EAAA,GAAAla,EAAA5X,QACA8xB,EAAA,IACA,cAAAla,EAAAka,EAAuC,MACvC,OAAkC,OAAlCP,EAAAC,QAAkC,CAASxxB,MAAA8xB,EAAA,GAAAxuB,MAAA,GAC3C,OAAAiuB,EAAAC,QAAkCF,EAAAQ,EAAA,GAAWA,EAAA,IAAU,SACvD,OAAAA,EAAAP,EAAAG,IAAA5tB,MAAyCytB,EAAAE,KAAA3tB,MAAc,SACvD,QACA,KAAA8T,KAAA2Z,EAAAE,MAAA5tB,OAAA,GAAA+T,IAAA/T,OAAA,UAAAiuB,EAAA,QAAAA,EAAA,KAA6GP,EAAA,EAAO,SACpH,OAAAO,EAAA,MAAAla,GAAAka,EAAA,GAAAla,EAAA,IAAAka,EAAA,GAAAla,EAAA,KAAgF2Z,EAAAC,MAAAM,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAP,EAAAC,MAAA5Z,EAAA,IAAwD2Z,EAAAC,MAAA5Z,EAAA,GAAgBA,EAAAka,EAAQ,MAChF,GAAAla,GAAA2Z,EAAAC,MAAA5Z,EAAA,IAA8C2Z,EAAAC,MAAA5Z,EAAA,GAAgB2Z,EAAAG,IAAA/tB,KAAAmuB,GAAgB,MAC9Ela,EAAA,IAAA2Z,EAAAG,IAAA5tB,MACAytB,EAAAE,KAAA3tB,MAAiC,SAEjCguB,EAAAvS,EAAA7d,KAAAwd,EAAAqS,GACS,MAAAnyB,GAAY0yB,EAAA,GAAA1yB,GAAakyB,EAAA,EAAS,QAAU3yB,EAAAiZ,EAAA,EACrD,KAAAka,EAAA,SAAAA,EAAA,GAAmC,OAAS9xB,MAAA8xB,EAAA,GAAAA,EAAA,UAAAxuB,MAAA,GArBA+tB,CAAA,CAAAjZ,EAAAyZ,MAyBrC,SAAAhC,EAAAkC,EAAA1yB,GACP,QAAAwS,KAAAkgB,EAAA1yB,EAAAgB,eAAAwR,KAAAxS,EAAAwS,GAAAkgB,EAAAlgB,IAGO,SAAAie,EAAAkC,GACP,IAAAD,EAAA,mBAAAjyB,QAAAkyB,EAAAlyB,OAAAS,UAAAiF,EAAA,EACA,OAAAusB,IAAArwB,KAAAswB,GACA,CACA7uB,KAAA,WAEA,OADA6uB,GAAAxsB,GAAAwsB,EAAAnuB,SAAAmuB,OAAA,GACA,CAAoBhyB,MAAAgyB,KAAAxsB,KAAAlC,MAAA0uB,KAKb,SAAAjC,EAAAiC,EAAA5Z,GACP,IAAA2Z,EAAA,mBAAAjyB,QAAAkyB,EAAAlyB,OAAAS,UACA,IAAAwxB,EAAA,OAAAC,EACA,IAAApU,EAAAxe,EAAAoG,EAAAusB,EAAArwB,KAAAswB,GAAAC,EAAA,GACA,IACA,eAAA7Z,QAAA,MAAAwF,EAAApY,EAAArC,QAAAG,MAAA2uB,EAAAtuB,KAAAia,EAAA5d,OAEA,MAAA8H,GAAmB1I,EAAA,CAAM0I,SACzB,QACA,IACA8V,MAAAta,OAAAyuB,EAAAvsB,EAAA,SAAAusB,EAAArwB,KAAA8D,GAEA,QAAiB,GAAApG,EAAA,MAAAA,EAAA0I,OAEjB,OAAAmqB,EAGO,SAAAjC,IACP,QAAAiC,EAAA,GAAAzsB,EAAA,EAA4BA,EAAAwE,UAAAnG,OAAsB2B,IAClDysB,IAAA9oB,OAAA4mB,EAAA/lB,UAAAxE,KACA,OAAAysB,EAGO,SAAAvvB,EAAAmvB,GACP,OAAA3yB,gBAAAwD,GAAAxD,KAAA2yB,IAAA3yB,MAAA,IAAAwD,EAAAmvB,GAGO,SAAA5B,EAAA/Q,EAAAiS,EAAAvqB,GACP,IAAA9G,OAAAW,cAAA,UAAAuH,UAAA,wCACA,IAAAxC,EAAA2X,EAAAvW,EAAAqD,MAAAiV,EAAAiS,GAAA,IAAAe,EAAA,GACA,OAAA1sB,EAAA,GAAiBmsB,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAAnsB,EAAA1F,OAAAW,eAAA,WAAsF,OAAAvB,MAAesG,EACtH,SAAAmsB,EAAAvZ,GAAsB+E,EAAA/E,KAAA5S,EAAA4S,GAAA,SAAAyZ,GAAgC,WAAApqB,QAAA,SAAAqQ,EAAAC,GAAqCma,EAAAvuB,KAAA,CAAAyU,EAAAyZ,EAAA/Z,EAAAC,IAAA,GAAAoa,EAAA/Z,EAAAyZ,OAC3F,SAAAM,EAAA/Z,EAAAyZ,GAA2B,KAC3BjU,EADiCT,EAAA/E,GAAAyZ,IACX7xB,iBAAA0C,EAAA+E,QAAAC,QAAAkW,EAAA5d,MAAA6xB,GAAAzuB,KAAAgvB,EAAAzqB,GAAA0qB,EAAAH,EAAA,MAAAtU,GAD4B,MAAAxe,GAAYizB,EAAAH,EAAA,MAAA9yB,GAC9D,IAAAwe,EACA,SAAAwU,EAAApyB,GAA6BmyB,EAAA,OAAAnyB,GAC7B,SAAA2H,EAAA3H,GAA4BmyB,EAAA,QAAAnyB,GAC5B,SAAAqyB,EAAA1zB,EAAAkzB,GAA2BlzB,EAAAkzB,GAAAK,EAAAtR,QAAAsR,EAAAruB,QAAAsuB,EAAAD,EAAA,MAAAA,EAAA,QAGpB,SAAAhC,EAAA8B,GACP,IAAAxsB,EAAAqM,EACA,OAAArM,EAAA,GAAiBmsB,EAAA,QAAAA,EAAA,iBAAAvyB,GAA4C,MAAAA,IAAWuyB,EAAA,UAAAnsB,EAAA1F,OAAAS,UAAA,WAAqD,OAAArB,MAAesG,EAC5I,SAAAmsB,EAAAvZ,EAAAzZ,GAAyBqzB,EAAA5Z,KAAA5S,EAAA4S,GAAA,SAAAyZ,GAAgC,OAAAhgB,MAAA,CAAoB7R,MAAA0C,EAAAsvB,EAAA5Z,GAAAyZ,IAAAvuB,KAAA,WAAA8U,GAAgDzZ,IAAAkzB,QAGtH,SAAA1B,EAAA6B,GACP,IAAAlyB,OAAAW,cAAA,UAAAuH,UAAA,wCACA,IAAA+pB,EAAAC,EAAAlyB,OAAAW,eACA,OAAAsxB,IAAArwB,KAAAswB,GAAAlC,EAAAkC,GAGO,SAAA5B,EAAAkC,EAAAC,GAEP,OADApyB,OAAAT,eAAgCS,OAAAT,eAAA4yB,EAAA,OAAuCtyB,MAAAuyB,IAAwBD,EAAAC,MAC/FD,EAGO,SAAAjC,EAAAmC,GACP,GAAAA,KAAAhjB,WAAA,OAAAgjB,EACA,IAAAnvB,EAAA,GACA,SAAAmvB,EAAA,QAAA3a,KAAA2a,EAAAryB,OAAAE,eAAAqB,KAAA8wB,EAAA3a,KAAAxU,EAAAwU,GAAA2a,EAAA3a,IAEA,OADAxU,EAAA4N,QAAAuhB,EACAnvB,EAGO,SAAAitB,EAAAkC,GACP,OAAAA,KAAAhjB,WAAAgjB,EAAA,CAA4CvhB,QAAAuhB","file":"12-ab67efff8c9ca5d3f128.js","sourcesContent":["var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = require('@firebase/util');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.8.3',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\n// TypeScript does not support non-string indexes!\r\n// let errors: {[code: AppError: string} = {\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar firebase = createFirebaseNamespace();\n\nexports.firebase = firebase;\nexports.default = firebase;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib_1 = require('tslib');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nvar Hash = /** @class */ (function () {\r\n    function Hash() {\r\n        /**\r\n         * The block size for the hasher.\r\n         * @type {number}\r\n         */\r\n        this.blockSize = -1;\r\n    }\r\n    return Hash;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sha1, _super);\r\n    function Sha1() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.total_ = 0;\r\n        _this.blockSize = 512 / 8;\r\n        _this.pad_[0] = 128;\r\n        for (var i = 1; i < _this.blockSize; ++i) {\r\n            _this.pad_[i] = 0;\r\n        }\r\n        _this.reset();\r\n        return _this;\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}(Hash));\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.CONSTANTS = CONSTANTS;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.patchProperty = patchProperty;\nexports.Deferred = Deferred;\nexports.getUA = getUA;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.patchCapture = patchCapture;\nexports.jsonEval = jsonEval;\nexports.stringify = stringify;\nexports.decode = decode;\nexports.isAdmin = isAdmin;\nexports.issuedAtTime = issuedAtTime;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.clone = clone;\nexports.contains = contains;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getValues = getValues;\nexports.isEmpty = isEmpty;\nexports.isNonNullObject = isNonNullObject;\nexports.map = map;\nexports.safeGet = safeGet;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.Sha1 = Sha1;\nexports.async = async;\nexports.createSubscribe = createSubscribe;\nexports.errorPrefix = errorPrefix;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nrequire('@firebase/polyfill');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n","import 'whatwg-fetch';\nimport 'promise-polyfill/lib/polyfill';\nimport 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport 'core-js/fn/object/assign';\nimport 'core-js/fn/string/starts-with';\nimport 'core-js/fn/string/repeat';\nimport 'core-js/fn/symbol';\nimport 'core-js/fn/symbol/iterator';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","'use strict';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!globalNS.Promise) {\n  globalNS.Promise = Promise;\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","require('../../modules/es6.array.find');\nmodule.exports = require('../../modules/_core').Array.find;\n","require('../../modules/es6.array.find-index');\nmodule.exports = require('../../modules/_core').Array.findIndex;\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","require('../../modules/es6.string.starts-with');\nmodule.exports = require('../../modules/_core').String.startsWith;\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","require('../../modules/es6.string.repeat');\nmodule.exports = require('../../modules/_core').String.repeat;\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import '@firebase/database';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar tslib_1 = require('tslib');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n","/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { setLogLevel, Logger, LogLevel };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"sourceRoot":""}